{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/runner.js","application.js","node_modules/domready/ready.js","node_modules/three/three.js","src/js/App.js","src/js/Ball.js","src/js/MirrorLoader.js","src/js/WaterLoader.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"App","domReady","./App.js","domready",2,"module","name","definition","define","amd","this","listener","fns","doc","document","hack","documentElement","doScroll","domContentLoaded","loaded","test","readyState","addEventListener","removeEventListener","shift","fn","push",3,"self","THREE","REVISION","undefined","Math","sign","x","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","NoShading","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","MultiplyOperation","MixOperation","AddOperation","UVMapping","CubeReflectionMapping","CubeRefractionMapping","SphericalReflectionMapping","SphericalRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","Color","color","arguments","setRGB","set","prototype","constructor","g","b","value","copy","setHex","setStyle","hex","floor","setHSL","h","hue2rgb","p","q","style","exec","min","parseInt","ColorKeywords","copyGammaToLinear","copyLinearToGamma","sqrt","convertGammaToLinear","convertLinearToGamma","getHex","getHexString","toString","slice","getHSL","optionalTarget","hue","saturation","hsl","max","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","c","fromArray","array","toArray","clone","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","_x","_y","_z","_w",{"end":{"file":"?","comments_before":[],"nlb":false,"endpos":15089,"pos":15088,"col":5,"line":658,"value":"x","type":"name"},"start":{"file":"?","comments_before":[],"nlb":false,"endpos":15089,"pos":15088,"col":5,"line":658,"value":"x","type":"name"},"name":"x"},"onChangeCallback","quaternion","setFromEuler","euler","update","Euler","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","EPS","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","console","warn","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","multiplyVector3","vector","applyQuaternion","slerp","qb","cosHalfTheta","halfTheta","acos","sinHalfTheta","ratioA","ratioB","offset","onChange","callback","qa","qm","Vector2","setX","setY","setComponent","index","getComponent","addVectors","sub","subVectors","divide","divideScalar","scalar","invScalar","clamp","clampScalar","minVal","maxVal","ceil","round","roundToZero","negate","distanceTo","distanceToSquared","dx","dy","setLength","oldLength","setZ","multiplyVectors","applyEuler","error","applyAxisAngle","applyMatrix3","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","matrix","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","lengthManhattan","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","dz","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","setFromMatrixPosition","getScaleFromMatrix","setFromMatrixScale","getColumnFromMatrix","setFromMatrixColumn","sx","sy","sz","me","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","PI","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","atan2","setFromQuaternion","sqx","sqy","sqz","sqw","reorder","newOrder","Line3","start","end","line","center","result","distanceSq","distance","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","box","empty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","isIntersectionBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","positions","getBoundingSphere","Sphere","radius","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","multiplyVector3Array","applyToVector3Array","j","determinant","throwOnInvertible","det","msg","transpose","tmp","flattenToArrayOffset","getNormalMatrix","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","extractPosition","copyPosition","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","setRotationFromQuaternion","makeRotationFromQuaternion","x2","y2","z2","wx","wy","wz","lookAt","eye","target","up","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","multiplyVector4","rotateAxis","crossVector","getPosition","setPosition","rotateX","rotateY","rotateZ","rotateByAxis","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","position","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToSegment","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segCenter","segDir","segExtent","diff","a01","b0","b1","invDet","isIntersectionSphere","sphere","intersectSphere","tca","d2","radius2","thc","t0","t1","isIntersectionPlane","plane","distToPoint","denominator","distanceToPlane","constant","intersectPlane","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","matrix4","optionalCenter","maxRadiusSq","intersectsSphere","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","negRadius","intersectsBox","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","v2","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","isIntersectionLine","startSign","endSign","intersectLine","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","newNormal","newCoplanarPoint","generateUUID","chars","split","uuid","Array","rnd","random","join","clampBottom","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degreeToRadiansFactor","degrees","radToDeg","radianToDegreesFactor","radians","isPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","now","Date","stop","getElapsedTime","getDelta","newTime","EventDispatcher","apply","hasEventListener","dispatchEvent","type","_listeners","listeners","indexOf","listenerArray","splice","event","Raycaster","params","Sprite","Mesh","PointCloud","threshold","LOD","Line","descSort","intersectObject","raycaster","intersects","recursive","raycast","children","precision","linePrecision","sort","intersectObjects","objects","log","Object3D","Object","defineProperty","Object3DIdCount","parent","DefaultUp","rotation","onRotationChange","onQuaternionChange","defineProperties","enumerable","renderDepth","rotationAutoUpdate","matrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","userData","eulerOrder","useQuaternion","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","rotateOnAxis","q1","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getChildByName","getObjectByName","getObjectById","id","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","updateMatrix","force","toJSON","output","metadata","version","generator","geometries","parseGeometry","json","materials","parseMaterial","material","parseObject","data","JSON","stringify","PerspectiveCamera","OrthographicCamera","AmbientLight","DirectionalLight","intensity","PointLight","SpotLight","exponent","HemisphereLight","groundColor","parse","Projector","projectVector","unprojectVector","pickingRay","Face3","materialIndex","vertexNormals","vertexColors","vertexTangents","face","Face4","BufferAttribute","itemSize","needsUpdate","copyAt","index1","attribute","index2","setXY","setXYZ","setXYZW","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","GeometryIdCount","attributesKeys","drawcalls","offsets","boundingBox","addAttribute","keys","getAttribute","addDrawCall","count","indexOffset","fromGeometry","settings","faces","faceVertexUvs","hasFaceVertexUv","hasFaceVertexNormals","normals","colors","uvs","i3","na","nb","nc","fc","vca","vcb","vcc","uva","uvb","uvc","computeBoundingBox","bb","isNaN","computeFaceNormals","computeVertexNormals","vA","vB","vC","pA","pB","pC","cb","ab","indices","jl","normalizeNormals","computeTangents","handleTriangle","uvA","uvB","uvC","x1","y1","z1","sdir","tdir","tan1","tan2","handleVertex","n2","tmp2","tangents","uv","nVertices","tangent","iA","iB","iC","computeOffsets","indexBufferSize","facesCount","sortedIndices","Uint16Array","indexPtr","vertexPtr","duplicatedVertices","newVerticeMaps","faceVertices","Int32Array","vertexMap","revVertexMap","findex","vo","vid","faceMax","new_offset","new_vid","reorderBuffers","merge","indexBuffer","indexMap","vertexCount","sortedAttributes","attr","sourceArray","attrArray","attrSize","sortedAttr","numItems","key","typeArray","sourceAttr","dispose","morphTargets","morphColors","morphNormals","skinWeights","skinIndices","lineDistances","hasTangents","dynamic","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","tangentsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","fromBufferGeometry","tempNormals","tempUVs","addFace","fl","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","context","ua","ub","uc","vertexIndex","faceIndex","computeLineDistances","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","uvs2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeVertices","verticesMap","unique","changes","precisionPoints","pow","faceIndicesToRemove","dupIndex","idx","setBit","enabled","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","Camera","matrixWorldInverse","create","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","format","magFilter","minFilter","updateCubeMap","renderer","scene","generateMipmaps","activeCubeFace","render","zoom","updateProjectionMatrix","cx","cy","setLens","focalLength","frameHeight","atan","setViewOffset","fullWidth","fullHeight","width","height","Light","light","AreaLight","constantAttenuation","linearAttenuation","quadraticAttenuation","onlyShadow","shadowCameraNear","shadowCameraFar","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowBias","shadowDarkness","shadowMapWidth","shadowMapHeight","shadowCascade","shadowCascadeOffset","shadowCascadeCount","shadowCascadeBias","shadowCascadeWidth","shadowCascadeHeight","shadowCascadeNearZ","shadowCascadeFarZ","shadowCascadeArray","shadowMap","shadowMapSize","shadowCamera","shadowMatrix","skyColor","shadowCameraFov","Cache","files","file","get","clear","Loader","showStatus","statusDomElement","addStatusElement","imageLoader","ImageLoader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","createElement","fontSize","textAlign","background","padding","zIndex","innerHTML","updateProgress","progress","message","toFixed","extractUrlBase","url","parts","pop","initMaterials","texturePath","createMaterial","needsTangents","ShaderMaterial","nearest_pow2","LN2","create_texture","where","sourceFile","repeat","wrap","anisotropy","texture","fullPath","loader","Handlers","load","Texture","image","canvas","getContext","drawImage","wrapS","wrapT","wrapMap","mirror","rgb2hex","rgb","mtype","mpars","opacity","map","lightMap","normalMap","bumpMap","wireframe","shading","toLowerCase","blending","transparent","depthTest","depthWrite","flipSided","side","doubleSided","colorDiffuse","DbgColor","colorSpecular","specular","colorAmbient","ambient","colorEmissive","emissive","transparency","specularCoef","shininess","mapDiffuse","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapLight","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapBump","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormal","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecular","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapAlpha","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","mapBumpScale","bumpScale","shader","ShaderLib","uniforms","UniformsUtils","mapNormalFactor","specularMap","fragmentShader","vertexShader","lights","fog","DbgName","handlers","regex","XHRLoader","manager","cache","DefaultLoadingManager","onLoad","onProgress","onError","cached","request","XMLHttpRequest","open","response","itemEnd","responseType","send","itemStart","setResponseType","setCrossOrigin","src","JSONLoader","withCredentials","loadAjaxJSON","callbackProgress","xhr","onreadystatechange","DONE","status","responseText","LOADING","getResponseHeader","HEADERS_RECEIVED","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","bones","animation","animations","parseMorphing","dstVertices","srcVertices","cl","dstColors","srcColors","LoadingManager","BufferGeometryLoader","text","typedArray","MaterialLoader","ObjectLoader","parseGeometries","parseMaterials","geometryLoader","bufferGeometryLoader","PlaneGeometry","widthSegments","heightSegments","BoxGeometry","depth","depthSegments","CircleGeometry","segments","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","IcosahedronGeometry","detail","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","heightScale","Scene","Group","TextureLoader","CompressedTextureLoader","_parser","images","CompressedTexture","loadTexture","buffer","texDatas","mipmaps","mipmapCount","isCubemap","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","alphaTest","overdraw","setValues","values","newValue","currentValue","Number","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshNormalMaterial","MeshDepthMaterial","SpriteMaterial","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","alphaMap","envMap","combine","reflectivity","refractionRatio","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","wrapAround","wrapRGB","metal","normalScale","MeshFaceMaterial","PointCloudMaterial","sizeAttenuation","ParticleBasicMaterial","ParticleSystemMaterial","defines","defaultAttributeValues","uv2","index0AttributeName","RawShaderMaterial","mapping","TextureIdCount","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","_needsUpdate","onUpdate","CubeTexture","DataTexture","VideoTexture","video","requestAnimationFrame","HAVE_ENOUGH_DATA","sortParticles","inverseMatrix","localThreshold","testPoint","rayPointDistance","intersectPoint","distanceToRay","oi","ol","pointCount","ParticleSystem","mode","LineStrip","LinePieces","precisionSq","nbVertices","interSegment","interRay","step","distSq","updateMorphTargets","morphTargetBase","morphTargetForcedOrder","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","intersectionPoint","isFaceMaterial","objectMaterials","morphInfluences","tl","influence","targets","Bone","belongsToSkin","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","bone","offsetMatrix","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","bind","skeleton","sw","MorphAnimMesh","duration","mirroredLoop","time","lastKeyframe","currentKeyframe","directionBackwards","setFrameRange","startKeyframe","endKeyframe","setDirectionForward","setDirectionBackward","parseAnimations","firstAnimation","pattern","morph","match","label","setAnimationLabel","playAnimation","fps","updateAnimation","frameTime","keyframe","mix","interpolateTargets","influences","addLevel","getObjectForDistance","matrixPosition","Particle","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","ShaderChunk","merged","uniforms_src","uniforms_dst","parameter_src","UniformsLib","common","diffuse","offsetRepeat","flipEnvMap","useRefract","bump","normalmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLightDirection","directionalLightColor","hemisphereLightDirection","hemisphereLightSkyColor","hemisphereLightGroundColor","pointLightColor","pointLightPosition","pointLightDistance","spotLightColor","spotLightPosition","spotLightDirection","spotLightDistance","spotLightAngleCos","spotLightExponent","particle","psColor","shadowmap","basic","lambert","phong","particle_basic","dashed","totalSize","mNear","mFar","enableAO","enableDiffuse","enableSpecular","enableReflection","enableDisplacement","tDisplacement","tDiffuse","tCube","tNormal","tSpecular","tAO","uNormalScale","uDisplacementBias","uDisplacementScale","uOffset","uRepeat","cube","tFlip","depthRGBA","WebGLRenderer","setDefaultGLState","_gl","clearColor","clearDepth","clearStencil","enable","DEPTH_TEST","depthFunc","LEQUAL","frontFace","CCW","cullFace","BACK","CULL_FACE","BLEND","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","viewport","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_clearColor","_clearAlpha","createParticleBuffers","__webglVertexBuffer","createBuffer","__webglColorBuffer","_this","info","memory","createLineBuffers","__webglLineDistanceBuffer","createMeshBuffers","geometryGroup","__webglNormalBuffer","__webglTangentBuffer","__webglUVBuffer","__webglUV2Buffer","__webglSkinIndicesBuffer","__webglSkinWeightsBuffer","__webglFaceBuffer","__webglLineBuffer","numMorphTargets","__webglMorphTargetsBuffers","numMorphNormals","__webglMorphNormalsBuffers","initCustomAttributes","nvertices","__webglCustomAttributesList","__webglInitialized","createUniqueBuffers","belongsToAttribute","initParticleBuffers","__vertexArray","__colorArray","__sortArray","__webglParticleCount","initLineBuffers","__lineDistanceArray","__webglLineCount","initMeshBuffers","faces3","ntris","nlines","getBufferMaterial","__normalArray","__uvArray","__uv2Array","__tangentArray","__skinIndexArray","__skinWeightArray","UintArray","extensions","Uint32Array","__typeArray","__faceArray","__lineArray","__morphTargetsArrays","__morphNormalsArrays","__webglFaceCount","originalAttribute","property","__original","__inittedArrays","materialNeedsSmoothNormals","setParticleBuffers","hint","ca","cal","customAttribute","vertexArray","colorArray","sortArray","dirtyVertices","dirtyColors","customAttributes","_projScreenMatrixPS","_projScreenMatrix","_vector3","numericalSort","boundTo","bindBuffer","ARRAY_BUFFER","bufferData","setLineBuffers","dl","lineDistanceArray","dirtyLineDistances","setMeshBuffers","faceColor","n1","n3","sw1","sw2","sw3","si1","si2","si3","vn","uvi","uv2i","vk","vkl","vka","nka","chf","needsSmoothNormals","offset_uv","offset_uv2","offset_face","offset_normal","offset_tangent","offset_line","offset_color","offset_skin","offset_morphTarget","offset_custom","offset_customSrc","uvArray","uv2Array","normalArray","tangentArray","skinIndexArray","skinWeightArray","morphTargetsArrays","morphNormalsArrays","faceArray","lineArray","dirtyElements","dirtyUvs","dirtyNormals","dirtyTangents","dirtyMorphTargets","morphTargetsNeedUpdate","chunk_faces3","obj_faces","obj_uvs","obj_uvs2","obj_skinIndices","obj_skinWeights","ELEMENT_ARRAY_BUFFER","pp","setDirectBuffers","bufferType","STATIC_DRAW","setupVertexAttributes","program","startIndex","geometryAttributes","programAttributes","programAttributesKeys","programAttribute","geometryAttribute","enableAttribute","vertexAttribPointer","FLOAT","vertexAttrib2fv","vertexAttrib3fv","disableUnusedAttributes","initAttributes","_newAttributes","_enabledAttributes","enableVertexAttribArray","disableVertexAttribArray","setupMorphTargets","numSupportedMorphTargets","__webglMorphTargetInfluences","activeInfluenceIndices","numSupportedMorphNormals","influenceIndex","uniform1fv","painterSortStable","reversePainterSortStable","projectObject","initObject","sprites","webglObjects","_webglObjects","_frustum","updateObject","webglObject","unrollBufferMaterial","sortObjects","renderObjects","renderList","useBlending","setupMatrices","setBlending","setDepthTest","setDepthWrite","setPolygonOffset","setMaterialFaces","renderBufferDirect","renderBuffer","renderObjectsImmediate","materialType","renderImmediateObject","unrollImmediateBufferMaterial","globject","opaque","transparentObjects","opaqueObjects","__webglInit","_modelViewMatrix","_normalMatrix","onObjectRemoved","onGeometryDispose","initGeometryGroups","__webglActive","addBuffer","geometryGroupsList","geometryGroups","ImmediateRenderObject","immediateRenderCallback","addBufferImmediate","_webglObjectsImmediate","makeGroups","usesFaceMaterial","groupHash","group","maxVerticesInGroup","hash_map","groups","groupsList","counter","geometryGroupCounter","addBuffers","objlist","customAttributesDirty","areCustomAttributesDirty","DYNAMIC_DRAW","clearCustomAttributes","removeObject","removeInstances","initMaterial","onMaterialDispose","shaderID","__webglShader","maxLightCount","allocateLights","maxShadows","allocateShadows","maxBones","allocateBones","_precision","supportsVertexTextures","_supportsVertexTextures","useFog","fogExp","logarithmicDepthBuffer","_logarithmicDepthBuffer","_supportsBoneTextures","maxMorphTargets","maxMorphNormals","maxDirLights","directional","maxPointLights","maxSpotLights","spot","maxHemiLights","hemi","shadowMapEnabled","shadowMapType","shadowMapDebug","shadowMapCascade","pl","_programs","programInfo","usedTimes","WebGLProgram","programs","base","uniformsList","location","setProgram","_usedTextureUnits","deallocateMaterial","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","_currentProgram","useProgram","_currentMaterialId","_currentCamera","uniformMatrix4fv","uniform1f","logDepthBufFC","cameraPosition","uniform3f","viewMatrix","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","refreshUniformsFog","_lightsNeedUpdate","setupLights","refreshUniformsLights","_lights","markUniformsLightsNeedsUpdate","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsParticle","refreshUniformsPhong","refreshUniformsLambert","_shadowPass","refreshUniformsShadow","loadUniformsGeneric","loadUniformsMatrices","modelMatrix","gammaInput","uvScaleMap","_canvas","distances","directions","anglesCos","exponents","skyColors","groundColors","boolean","modelViewMatrix","uniformMatrix3fv","_maxTextures","uniform","uniform2f","uniform4f","uniform1iv","uniform3iv","uniform2fv","uniform3fv","uniform4fv","_array","setCubeTexture","setCubeTextureDynamic","setColorGamma","intensitySq","setColorLinear","ll","zlights","dirColors","dirPositions","pointColors","pointPositions","pointDistances","spotColors","spotPositions","spotDistances","spotDirections","spotAnglesCos","spotExponents","hemiSkyColors","hemiGroundColors","hemiPositions","dirLength","pointLength","spotLength","hemiLength","dirCount","spotCount","hemiCount","dirOffset","pointOffset","spotOffset","hemiOffset","_direction","setLineWidth","_oldLineWidth","lineWidth","polygonoffset","factor","units","_oldPolygonOffset","POLYGON_OFFSET_FILL","disable","_oldPolygonOffsetFactor","_oldPolygonOffsetUnits","setTextureParameters","textureType","isImagePowerOfTwo","extension","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__oldAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","clampToMaxSize","maxSize","slot","__webglTextureCube","onTextureDispose","createTexture","textures","activeTexture","TEXTURE0","bindTexture","TEXTURE_CUBE_MAP","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isDataTexture","cubeImage","autoScaleCubemaps","_maxCubemapSize","glFormat","glType","mipmap","getCompressedTextureFormats","compressedTexImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","generateMipmap","__webglTexture","setupFrameBuffer","framebuffer","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","setupRenderBuffer","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","updateRenderTargetMipmap","TEXTURE_2D","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","MIN_EXT","MAX_EXT","nVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","nVertexMatrices","dirLights","pointLights","spotLights","hemiLights","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","domElement","devicePixelRatio","autoClear","autoClearColor","autoClearDepth","autoClearStencil","gammaOutput","shadowMapCullFace","calls","_currentFramebuffer","_currentGeometryGroupHash","_oldDoubleSided","_oldFlipSided","_oldBlending","_oldBlendEquation","_oldBlendSrc","_oldBlendDst","_oldDepthTest","_oldDepthWrite","_currentWidth","_currentHeight","Uint8Array","getShaderPrecisionFormat","rangeMin","rangeMax","WebGLExtensions","MAX_TEXTURE_IMAGE_UNITS","_maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","_maxTextureSize","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","_vertexShaderPrecisionHighpFloat","VERTEX_SHADER","HIGH_FLOAT","_vertexShaderPrecisionMediumpFloat","MEDIUM_FLOAT","_fragmentShaderPrecisionHighpFloat","LOW_FLOAT","FRAGMENT_SHADER","_fragmentShaderPrecisionMediumpFloat","formats","COMPRESSED_TEXTURE_FORMATS","highpAvailable","mediumpAvailable","shadowMapPlugin","ShadowMapPlugin","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","supportsFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","setSize","updateStyle","setViewport","setScissor","scissor","enableScissorTest","SCISSOR_TEST","setClearColor","setClearColorHex","getClearColor","getClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","setRenderTarget","resetGLState","deallocateGeometry","deallocateTexture","onRenderTargetDispose","deallocateRenderTarget","deleteBuffers","buffers","deleteBuffer","deleteTexture","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglRenderbuffer","deleteProgram","newPrograms","renderBufferImmediate","hasPositions","hasNormals","hasUvs","__webglUvBuffer","hasColors","positionArray","nx","ny","nz","nax","nbx","ncx","nay","nby","ncy","naz","nbz","ncz","drawArrays","TRIANGLES","updateBuffers","wireframeBit","geometryHash","LINES","drawElements","POINTS","LINE_STRIP","geometryGroupHash","skinIndex","skinWeight","lineDistance","forceClear","setFaceCulling","frontFaceDirection","CW","FRONT","FRONT_AND_BACK","depthMask","blendEquationSeparate","blendFuncSeparate","uploadTexture","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isCube","isTargetPowerOfTwo","createFramebuffer","createRenderbuffer","shareDepthFrom","vx","vy","addPrePlugin","addPostPlugin","updateShadowMap","WebGLRenderTarget","options","gl","getExtension","programIdCount","generateDefines","chunk","cacheUniformLocations","identifiers","getUniformLocation","cacheAttributeLocations","getAttribLocation","shadowMapTypeDefine","prefix_vertex","prefix_fragment","customDefines","createProgram","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteShader","addLineNumbers","string","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","flares","prefix","vertexBuffer","elementBuffer","hasVertexTexture","tempTexture","occlusionTexture","init","renderType","occlusionMap","screenPosition","viewportWidth","viewportHeight","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","sprite","_renderer","_renderList","createVirtualLight","cascade","virtualLight","isVirtual","pointsWorld","pointsFrustum","nearZ","farZ","updateVirtualLight","updateShadowCamera","_min","_max","getObjectMaterial","_depthMaterial","_depthMaterialMorph","_depthMaterialSkin","_depthMaterialMorphSkin","_matrixPosition","depthShader","depthUniforms","originalCamera","gyro","Gyroscope","shadowFilter","pars","cameraHelper","CameraHelper","objectMaterial","useMorphing","useSkinning","customDepthMaterial","clearAlpha","uvOffset","uvScale","fogType","fillStyle","fillRect","oldFogType","sceneFogType","GeometryUtils","geometry1","geometry2","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","getNormalMap","subtract","getImageData","imageData","createImageData","ly","uy","lx","ux","num_points","putImageData","generateDataTexture","SceneUtils","createMultiMaterialObject","detach","attach","FontUtils","divisions","getFace","loadFace","family","familyName","ThreeFont","cssFontWeight","cssFontStyle","drawText","resolution","String","fontPaths","path","Path","ret","extractGlyphPoints","paths","outline","action","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","pts","glyph","glyphs","_cachedOutline","moveTo","lineTo","quadraticCurveTo","Shape","Utils","bezierCurveTo","b3","ha","generateShapes","curveSegments","font","shapes","toShapes","namespace","EPSILON","process","contour","verts","vertIndices","nv","snip","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cCROSSap","bCROSScp","aCROSSbp","Triangulate","_typeface_js","typeface_js","Audio","source","createBufferSource","gain","createGain","connect","destination","panner","createPanner","onload","decodeAudioData","setLoop","loop","setRefDistance","refDistance","setRolloffFactor","rolloffFactor","AudioListener","window","AudioContext","webkitAudioContext","orientation","velocity","positionPrev","setOrientation","setVelocity","Curve","getPointAt","getUtoTmapping","getPoints","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","last","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","vec","getTangentAt","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","getPointFunc","CurvePath","curves","bends","autoClose","curve","checkConnection","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","maxX","maxY","maxZ","minX","minY","minZ","NEGATIVE_INFINITY","POSITIVE_INFINITY","createPointsGeometry","createGeometry","createSpacedPointsGeometry","addWrapPath","bendpath","getTransformedPoints","oldPts","getWrapPoints","getTransformedSpacedPoints","oldX","oldY","xNorm","bounds","pathPt","translationObject","quaternionObject","scaleObject","translationWorld","quaternionWorld","scaleWorld","actions","fromPoints","PathActions","MOVE_TO","LINE_TO","QUADRATIC_CURVE_TO","BEZIER_CURVE_TO","CSPLINE_THRU","ARC","ELLIPSE","vectors","vlen","args","lastargs","x0","y0","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","EllipseCurve","lastPoint","closedPath","useSpacedPoints","item","spts","concat","spline","deltaAngle","tdivisions","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","isClockWise","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambigious","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","hole","tmpHoles","holes","extrude","extruded","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","getSpacedPointsHoles","extractAllPoints","shape","extractPoints","extractAllSpacedPoints","triangulateShape","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","nextIdx","intersection","intersectsHoleEdge","ihIdx","chkHole","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","b2p0","b2p1","b2p2","b3p0","b3p1","b3p2","b3p3","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","ClosedSplineCurve3","AnimationHandler","CATMULLROM","CATMULLROM_FORWARD","initialized","hierarchy","rot","quat","usedMorphTargets","morphTargetName","morphTargetsInfluences","root","parseRecurseHierarchy","play","deltaTimeMS","resetBlendWeights","Animation","currentTime","timeScale","isPlaying","interpolationType","keyTypes","reset","animationCache","positionWeight","quaternionWeight","scaleWeight","prevKey","nextKey","originalMatrix","getNextKeyWith","newVector","newQuat","interpolateCatmullRom","prevXYZ","nextXYZ","proportionalWeight","getPrevKeyWith","currentPoint","forwardPoint","KeyFrameAnimation","isPaused","sids","obj","sid","next","endTime","original","hasTarget","MorphAnimation","mesh","frames","pause","lastFrame","currentFrame","interpolation","frame","buildPlane","udir","vdir","gridX","gridY","width_half","height_half","gridX1","gridY1","segment_width","segment_height","uvd","depth_half","centerUV","segment","CubeGeometry","heightHalf","verticesRow","uvsRow","tanTheta","v4","n4","uv1","uv3","uv4","addShapeList","addShape","scalePt2","pt","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","colinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","extrudeMaterial","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","TubeGeometry","FrenetFrames","shapePoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheGeometry","inversePointLength","inverseSegments","phi","np","u0","u1","PlaneBufferGeometry","offset2","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegment","TextGeometry","textShapes","getPos","in_q","in_p","cu","su","quOverP","cs","tz","grid","tang","bitan","ip","jp","closed","numpoints","pos2","initialNormal3","smallest","MAX_VALUE","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","DodecahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","dir","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","edge","sortFunction","numEdges","vert1","vert2","face1","face2","FaceNormalsHelper","objectVertices","objectFaces","objectWorldMatrix","GridHelper","setColors","colorCenterLine","colorGrid","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","worldMatrix","vertexId","VertexTangentsHelper","WireframeHelper","edges","numTris","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","active","autoCreateAnimations","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","stopAnimation",4,"Ball","container","body","innerHeight","innerWidth","appendChild","pointLight","ambientLight","directionalLight","makeWater","makeEnvironment","addBalls","waterNormals","water","Water","textureWidth","textureHeight","sunDirection","sunColor","waterColor","distortionScale","waterPlane","mirrorMesh","cubeMap","getSide","cubeShader","skyBoxMaterial","skyBox","balls","maxz","minz","forEach","videoload","videocanvas","videocanvasctx","spheretexture","ball","move","./Ball.js","./MirrorLoader.js","./WaterLoader.js","three",5,"ctx","miny","maxy","currentDirection","tooHigh","tooLow","moveBy",6,"MirrorLoader","mirrorColor","mirrorSampler","textureMatrix","Mirror","matrixNeedsUpdate","clipBias","mirrorPlane","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","debugMode","arrow","planeGeometry","mirrorCamera","mirrorShader","mirrorUniforms","updateTextureMatrix","renderWithMirror","otherMirror","tempCamera","renderTemp","view",7,"WaterLoader","normalSampler","optionalParameter","defaultValue","worldCoordinates"],"mappings":"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AzpD,EAAAypD,YAAA,YAIA/R,cAEA13C,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,wBAEA,gBAEAppD,EAAAopD,YAAA,WACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,aACAppD,EAAAopD,YAAA,gBAEA,qBAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,qBAEA,UAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,mBAEAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,cACAppD,EAAAopD,YAAA,iBAEA,KAEAj3B,KAAA,MAEAslB,gBAEA,wBACA,yBAEAz3C,EAAAopD,YAAA,oBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,0BACAppD,EAAAopD,YAAA,0BAEA,gBAEA,4CAEAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,aACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,mBAEAppD,EAAAopD,YAAA,yBAEAppD,EAAAopD,YAAA,aAEA,KAEAj3B,KAAA,OAIAq5B,SAEAnU,SAAAr3C,EAAAs3C,cAAA3R,OAEA3lC,EAAAypD,YAAA,OACAzpD,EAAAypD,YAAA,IACAzpD,EAAAypD,YAAA,OACAzpD,EAAAypD,YAAA,WAGA5U,SAAA/c,KAAA,IAAA3xB,MAAA,GAAAnG,GAAA0F,MAAA,WACAqvC,UAAAjd,KAAA,IAAA3xB,MAAA,GAAAnG,GAAA0F,MAAA,IACAm7C,SAAA/oB,KAAA,KAAA3xB,MAAA,GAAAnG,GAAAuV,QAAA,EAAA,EAAA,OAKAmiC,cAEA,kBAEA,4BAEA,sBAEA,4BAEA,SAEA13C,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,2BACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,wBAEA,gBAEAppD,EAAAopD,YAAA,WACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,aAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,qBAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,mBAEAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,cACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,iBAEA,KAEAj3B,KAAA,MAEAslB,gBAEA,yBAEA,4BAEA,sBAEA,4BAEA,SAEAz3C,EAAAopD,YAAA,oBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,0BACAppD,EAAAopD,YAAA,0BAEA,gBAEA,gDAEAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,aACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,qBAEA,uBAKA,0BACA,sCACA,SACA,qCAEA,SAEA,qCAEA,UAEAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,mBAEAppD,EAAAopD,YAAA,yBAEAppD,EAAAopD,YAAA,aAEA,KAEAj3B,KAAA,OAIAs5B,OAEApU,SAAAr3C,EAAAs3C,cAAA3R,OAEA3lC,EAAAypD,YAAA,OACAzpD,EAAAypD,YAAA,KACAzpD,EAAAypD,YAAA,UACAzpD,EAAAypD,YAAA,IACAzpD,EAAAypD,YAAA,OACAzpD,EAAAypD,YAAA,WAGA5U,SAAA/c,KAAA,IAAA3xB,MAAA,GAAAnG,GAAA0F,MAAA,WACAqvC,UAAAjd,KAAA,IAAA3xB,MAAA,GAAAnG,GAAA0F,MAAA,IACAivC,UAAA7c,KAAA,IAAA3xB,MAAA,GAAAnG,GAAA0F,MAAA,UACAwvC,WAAApd,KAAA,IAAA3xB,MAAA,IACA06C,SAAA/oB,KAAA,KAAA3xB,MAAA,GAAAnG,GAAAuV,QAAA,EAAA,EAAA,OAKAmiC,cAEA,gBAEA,8BACA,wBAEA13C,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,yBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,wBAEA,gBAEAppD,EAAAopD,YAAA,WACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,aAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,qBAEA,6CAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,mBAEA,oCAEAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,cACAppD,EAAAopD,YAAA,oBACAppD,EAAAopD,YAAA,iBAEA,KAEAj3B,KAAA,MAEAslB,gBAEA,gBAEA,wBACA,yBAEA,wBACA,yBACA,yBACA,2BAEAz3C,EAAAopD,YAAA,oBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,uBACAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,2BACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,0BACAppD,EAAAopD,YAAA,0BAEA,gBAEA,gDAEAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,aACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,qBAEAppD,EAAAopD,YAAA,sBAEAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,mBAEAppD,EAAAopD,YAAA,yBAEAppD,EAAAopD,YAAA,aAEA,KAEAj3B,KAAA,OAIAu5B,gBAEArU,SAAAr3C,EAAAs3C,cAAA3R,OAEA3lC,EAAAypD,YAAA,SACAzpD,EAAAypD,YAAA,YAIA/R,cAEA,sBACA,uBAEA13C,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,wBAEA,gBAEAppD,EAAAopD,YAAA,aAEA,8DAEA,8BACA,gEACA,SACA,yBACA,UAEA,gDAEAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,gBACAppD,EAAAopD,YAAA,iBAEA,KAEAj3B,KAAA,MAEAslB,gBAEA,wBACA,yBAEAz3C,EAAAopD,YAAA,oBACAppD,EAAAopD,YAAA,2BACAppD,EAAAopD,YAAA,kBACAppD,EAAAopD,YAAA,wBACAppD,EAAAopD,YAAA,0BAEA,gBAEA,4CAEAppD,EAAAopD,YAAA,qBACAppD,EAAAopD,YAAA,sBACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,eACAppD,EAAAopD,YAAA,mBACAppD,EAAAopD,YAAA,aAEA,KAEAj3B,KAAA,OAIAw5B,QAEAtU,SAAAr3C,EAAAs3C,cAAA3R,OAEA3lC,EAAAypD,YAAA,OACAzpD,EAAAypD,YAAA,KAGAlhC,OAAAuP,KAAA,IAAA3xB,MAAA,GACA85C,UAAAnoB,KAAA,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","file":"application.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var App = require('./App.js');\nvar domReady = require('domready');\n\ndomReady(function(){\n    var app = new App();\n\n});",null,"/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? fn() : fns.push(fn)\n  }\n\n});\n","var self = self || {};// File:src/Three.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar THREE = { REVISION: '69' };\n\n// browserify support\n\nif ( typeof module === 'object' ) {\n\n\tmodule.exports = THREE;\n\n}\n\n// polyfills\n\nif ( Math.sign === undefined ) {\n\n\tMath.sign = function ( x ) {\n\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : 0;\n\n\t};\n\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n\nTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\n// GL STATE CONSTANTS\n\nTHREE.CullFaceNone = 0;\nTHREE.CullFaceBack = 1;\nTHREE.CullFaceFront = 2;\nTHREE.CullFaceFrontBack = 3;\n\nTHREE.FrontFaceDirectionCW = 0;\nTHREE.FrontFaceDirectionCCW = 1;\n\n// SHADOWING TYPES\n\nTHREE.BasicShadowMap = 0;\nTHREE.PCFShadowMap = 1;\nTHREE.PCFSoftShadowMap = 2;\n\n// MATERIAL CONSTANTS\n\n// side\n\nTHREE.FrontSide = 0;\nTHREE.BackSide = 1;\nTHREE.DoubleSide = 2;\n\n// shading\n\nTHREE.NoShading = 0;\nTHREE.FlatShading = 1;\nTHREE.SmoothShading = 2;\n\n// colors\n\nTHREE.NoColors = 0;\nTHREE.FaceColors = 1;\nTHREE.VertexColors = 2;\n\n// blending modes\n\nTHREE.NoBlending = 0;\nTHREE.NormalBlending = 1;\nTHREE.AdditiveBlending = 2;\nTHREE.SubtractiveBlending = 3;\nTHREE.MultiplyBlending = 4;\nTHREE.CustomBlending = 5;\n\n// custom blending equations\n// (numbers start from 100 not to clash with other\n//  mappings to OpenGL constants defined in Texture.js)\n\nTHREE.AddEquation = 100;\nTHREE.SubtractEquation = 101;\nTHREE.ReverseSubtractEquation = 102;\nTHREE.MinEquation = 103;\nTHREE.MaxEquation = 104;\n\n// custom blending destination factors\n\nTHREE.ZeroFactor = 200;\nTHREE.OneFactor = 201;\nTHREE.SrcColorFactor = 202;\nTHREE.OneMinusSrcColorFactor = 203;\nTHREE.SrcAlphaFactor = 204;\nTHREE.OneMinusSrcAlphaFactor = 205;\nTHREE.DstAlphaFactor = 206;\nTHREE.OneMinusDstAlphaFactor = 207;\n\n// custom blending source factors\n\n//THREE.ZeroFactor = 200;\n//THREE.OneFactor = 201;\n//THREE.SrcAlphaFactor = 204;\n//THREE.OneMinusSrcAlphaFactor = 205;\n//THREE.DstAlphaFactor = 206;\n//THREE.OneMinusDstAlphaFactor = 207;\nTHREE.DstColorFactor = 208;\nTHREE.OneMinusDstColorFactor = 209;\nTHREE.SrcAlphaSaturateFactor = 210;\n\n\n// TEXTURE CONSTANTS\n\nTHREE.MultiplyOperation = 0;\nTHREE.MixOperation = 1;\nTHREE.AddOperation = 2;\n\n// Mapping modes\n\nTHREE.UVMapping = function () {};\n\nTHREE.CubeReflectionMapping = function () {};\nTHREE.CubeRefractionMapping = function () {};\n\nTHREE.SphericalReflectionMapping = function () {};\nTHREE.SphericalRefractionMapping = function () {};\n\n// Wrapping modes\n\nTHREE.RepeatWrapping = 1000;\nTHREE.ClampToEdgeWrapping = 1001;\nTHREE.MirroredRepeatWrapping = 1002;\n\n// Filters\n\nTHREE.NearestFilter = 1003;\nTHREE.NearestMipMapNearestFilter = 1004;\nTHREE.NearestMipMapLinearFilter = 1005;\nTHREE.LinearFilter = 1006;\nTHREE.LinearMipMapNearestFilter = 1007;\nTHREE.LinearMipMapLinearFilter = 1008;\n\n// Data types\n\nTHREE.UnsignedByteType = 1009;\nTHREE.ByteType = 1010;\nTHREE.ShortType = 1011;\nTHREE.UnsignedShortType = 1012;\nTHREE.IntType = 1013;\nTHREE.UnsignedIntType = 1014;\nTHREE.FloatType = 1015;\n\n// Pixel types\n\n//THREE.UnsignedByteType = 1009;\nTHREE.UnsignedShort4444Type = 1016;\nTHREE.UnsignedShort5551Type = 1017;\nTHREE.UnsignedShort565Type = 1018;\n\n// Pixel formats\n\nTHREE.AlphaFormat = 1019;\nTHREE.RGBFormat = 1020;\nTHREE.RGBAFormat = 1021;\nTHREE.LuminanceFormat = 1022;\nTHREE.LuminanceAlphaFormat = 1023;\n\n// DDS / ST3C Compressed texture formats\n\nTHREE.RGB_S3TC_DXT1_Format = 2001;\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\n\n\n// PVRTC compressed texture formats\n\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\n\n\n// File:src/math/Color.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Color = function ( color ) {\n\n\tif ( arguments.length === 3 ) {\n\n\t\treturn this.setRGB( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );\n\n\t}\n\n\treturn this.set( color )\n\n};\n\nTHREE.Color.prototype = {\n\n\tconstructor: THREE.Color,\n\n\tr: 1, g: 1, b: 1,\n\n\tset: function ( value ) {\n\n\t\tif ( value instanceof THREE.Color ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetHex: function ( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t},\n\n\tsetRGB: function ( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t},\n\n\tsetHSL: function ( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tvar hue2rgb = function ( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t};\n\n\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetStyle: function ( style ) {\n\n\t\t// rgb(255,0,0)\n\n\t\tif ( /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.test( style ) ) {\n\n\t\t\tvar color = /^rgb\\((\\d+), ?(\\d+), ?(\\d+)\\)$/i.exec( style );\n\n\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// rgb(100%,0%,0%)\n\n\t\tif ( /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.test( style ) ) {\n\n\t\t\tvar color = /^rgb\\((\\d+)\\%, ?(\\d+)\\%, ?(\\d+)\\%\\)$/i.exec( style );\n\n\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// #ff0000\n\n\t\tif ( /^\\#([0-9a-f]{6})$/i.test( style ) ) {\n\n\t\t\tvar color = /^\\#([0-9a-f]{6})$/i.exec( style );\n\n\t\t\tthis.setHex( parseInt( color[ 1 ], 16 ) );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// #f00\n\n\t\tif ( /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {\n\n\t\t\tvar color = /^\\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );\n\n\t\t\tthis.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t// red\n\n\t\tif ( /^(\\w+)$/i.test( style ) ) {\n\n\t\t\tthis.setHex( THREE.ColorKeywords[ style ] );\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t},\n\n\tcopy: function ( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyGammaToLinear: function ( color ) {\n\n\t\tthis.r = color.r * color.r;\n\t\tthis.g = color.g * color.g;\n\t\tthis.b = color.b * color.b;\n\n\t\treturn this;\n\n\t},\n\n\tcopyLinearToGamma: function ( color ) {\n\n\t\tthis.r = Math.sqrt( color.r );\n\t\tthis.g = Math.sqrt( color.g );\n\t\tthis.b = Math.sqrt( color.b );\n\n\t\treturn this;\n\n\t},\n\n\tconvertGammaToLinear: function () {\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tthis.r = r * r;\n\t\tthis.g = g * g;\n\t\tthis.b = b * b;\n\n\t\treturn this;\n\n\t},\n\n\tconvertLinearToGamma: function () {\n\n\t\tthis.r = Math.sqrt( this.r );\n\t\tthis.g = Math.sqrt( this.g );\n\t\tthis.b = Math.sqrt( this.b );\n\n\t\treturn this;\n\n\t},\n\n\tgetHex: function () {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t},\n\n\tgetHexString: function () {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t},\n\n\tgetHSL: function ( optionalTarget ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n\n\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\tvar max = Math.max( r, g, b );\n\t\tvar min = Math.min( r, g, b );\n\n\t\tvar hue, saturation;\n\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tvar delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\thsl.h = hue;\n\t\thsl.s = saturation;\n\t\thsl.l = lightness;\n\n\t\treturn hsl;\n\n\t},\n\n\tgetStyle: function () {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t},\n\n\toffsetHSL: function ( h, s, l ) {\n\n\t\tvar hsl = this.getHSL();\n\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t},\n\n\taddColors: function ( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.r = array[ 0 ];\n\t\tthis.g = array[ 1 ];\n\t\tthis.b = array[ 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\treturn [ this.r, this.g, this.b ];\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Color().setRGB( this.r, this.g, this.b );\n\n\t}\n\n};\n\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n// File:src/math/Quaternion.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Quaternion = function ( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Quaternion.prototype = {\n\n\tconstructor: THREE.Quaternion,\n\n\t_x: 0,_y: 0, _z: 0, _w: 0,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget w () {\n\n\t\treturn this._w;\n\n\t},\n\n\tset w ( value ) {\n\n\t\tthis._w = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\t\t}\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar c1 = Math.cos( euler._x / 2 );\n\t\tvar c2 = Math.cos( euler._y / 2 );\n\t\tvar c3 = Math.cos( euler._z / 2 );\n\t\tvar s1 = Math.sin( euler._x / 2 );\n\t\tvar s2 = Math.sin( euler._y / 2 );\n\t\tvar s3 = Math.sin( euler._z / 2 );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function () {\n\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar v1, r;\n\n\t\tvar EPS = 0.000001;\n\n\t\treturn function ( vFrom, vTo ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\tif ( r < EPS ) {\n\n\t\t\t\tr = 0;\n\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t}\n\n\t\t\tthis._x = v1.x;\n\t\t\tthis._y = v1.y;\n\t\t\tthis._z = v1.z;\n\t\t\tthis._w = r;\n\n\t\t\tthis.normalize();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t}(),\n\n\tinverse: function () {\n\n\t\tthis.conjugate().normalize();\n\n\t\treturn this;\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar halfTheta = Math.acos( cosHalfTheta );\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\n\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\n\n\t\t\tthis._w = 0.5 * ( w + this._w );\n\t\t\tthis._x = 0.5 * ( x + this._x );\n\t\t\tthis._y = 0.5 * ( y + this._y );\n\t\t\tthis._z = 0.5 * ( z + this._z );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {},\n\n\tclone: function () {\n\n\t\treturn new THREE.Quaternion( this._x, this._y, this._z, this._w );\n\n\t}\n\n};\n\nTHREE.Quaternion.slerp = function ( qa, qb, qm, t ) {\n\n\treturn qm.copy( qa ).slerp( qb, t );\n\n}\n\n// File:src/math/Vector2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.Vector2 = function ( x, y ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\n};\n\nTHREE.Vector2.prototype = {\n\n\tconstructor: THREE.Vector2,\n\n\tset: function ( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tthis.x *= s;\n\t\tthis.y *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\tif ( scalar !== 0 ) {\n\n\t\t\tvar invScalar = 1 / scalar;\n\n\t\t\tthis.x *= invScalar;\n\t\t\tthis.y *= invScalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tif ( this.x > v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y > v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tif ( this.x < v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y < v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tif ( this.x < min.x ) {\n\n\t\t\tthis.x = min.x;\n\n\t\t} else if ( this.x > max.x ) {\n\n\t\t\tthis.x = max.x;\n\n\t\t}\n\n\t\tif ( this.y < min.y ) {\n\n\t\t\tthis.y = min.y;\n\n\t\t} else if ( this.y > max.y ) {\n\n\t\t\tthis.y = max.y;\n\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclampScalar: ( function () {\n\n\t\tvar min, max;\n\n\t\treturn function ( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector2();\n\t\t\t\tmax = new THREE.Vector2();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t} )(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t},\n\n\tsetLength: function ( l ) {\n\n\t\tvar oldLength = this.length();\n\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\n\n\t\t\tthis.multiplyScalar( l / oldLength );\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Vector2( this.x, this.y );\n\n\t}\n\n};\n\n// File:src/math/Vector3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector3 = function ( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n};\n\nTHREE.Vector3.prototype = {\n\n\tconstructor: THREE.Vector3,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function ( euler ) {\n\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion;\n\n\t\treturn function ( axis, angle ) {\n\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\n\n\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tapplyProjection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 projection matrix\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\n\t\tvar qx = q.x;\n\t\tvar qy = q.y;\n\t\tvar qz = q.z;\n\t\tvar qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix =  qw * x + qy * z - qz * y;\n\t\tvar iy =  qw * y + qz * x - qx * z;\n\t\tvar iz =  qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function ( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\tunproject: function () {\n\n\t\tvar matrix;\n\n\t\treturn function ( camera ) {\n\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\n\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\n\t\t\treturn this.applyProjection( matrix );\n\n\t\t};\n\n\t}(),\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\tthis.normalize();\n\n\t\treturn this;\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\tif ( scalar !== 0 ) {\n\n\t\t\tvar invScalar = 1 / scalar;\n\n\t\t\tthis.x *= invScalar;\n\t\t\tthis.y *= invScalar;\n\t\t\tthis.z *= invScalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tif ( this.x > v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y > v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\tif ( this.z > v.z ) {\n\n\t\t\tthis.z = v.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tif ( this.x < v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y < v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\tif ( this.z < v.z ) {\n\n\t\t\tthis.z = v.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tif ( this.x < min.x ) {\n\n\t\t\tthis.x = min.x;\n\n\t\t} else if ( this.x > max.x ) {\n\n\t\t\tthis.x = max.x;\n\n\t\t}\n\n\t\tif ( this.y < min.y ) {\n\n\t\t\tthis.y = min.y;\n\n\t\t} else if ( this.y > max.y ) {\n\n\t\t\tthis.y = max.y;\n\n\t\t}\n\n\t\tif ( this.z < min.z ) {\n\n\t\t\tthis.z = min.z;\n\n\t\t} else if ( this.z > max.z ) {\n\n\t\t\tthis.z = max.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: ( function () {\n\n\t\tvar min, max;\n\n\t\treturn function ( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector3();\n\t\t\t\tmax = new THREE.Vector3();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t} )(),\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( l ) {\n\n\t\tvar oldLength = this.length();\n\n\t\tif ( oldLength !== 0 && l !== oldLength  ) {\n\n\t\t\tthis.multiplyScalar( l / oldLength );\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\n\t\tthis.x = y * v.z - z * v.y;\n\t\tthis.y = z * v.x - x * v.z;\n\t\tthis.z = x * v.y - y * v.x;\n\n\t\treturn this;\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function () {\n\n\t\tvar v1, dot;\n\n\t\treturn function ( vector ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( vector ).normalize();\n\n\t\t\tdot = this.dot( v1 );\n\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\n\n\t\t};\n\n\t}(),\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1;\n\n\t\treturn function ( planeNormal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t}\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1;\n\n\t\treturn function ( normal ) {\n\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t}\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( this.length() * v.length() );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x;\n\t\tvar dy = this.y - v.y;\n\t\tvar dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tsetEulerFromRotationMatrix: function ( m, order ) {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t},\n\n\tsetEulerFromQuaternion: function ( q, order ) {\n\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t},\n\n\tgetPositionFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\n\t\treturn this.setFromMatrixPosition( m );\n\n\t},\n\n\tgetScaleFromMatrix: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\n\t\treturn this.setFromMatrixScale( m );\n\t},\n\n\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\n\t\treturn this.setFromMatrixColumn( index, matrix );\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tthis.x = m.elements[ 12 ];\n\t\tthis.y = m.elements[ 13 ];\n\t\tthis.z = m.elements[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();\n\t\tvar sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();\n\t\tvar sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\t},\n\n\tsetFromMatrixColumn: function ( index, matrix ) {\n\n\t\tvar offset = index * 4;\n\n\t\tvar me = matrix.elements;\n\n\t\tthis.x = me[ offset ];\n\t\tthis.y = me[ offset + 1 ];\n\t\tthis.z = me[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Vector3( this.x, this.y, this.z );\n\n\t}\n\n};\n\n// File:src/math/Vector4.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Vector4 = function ( x, y, z, w ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\tthis.w = ( w !== undefined ) ? w : 1;\n\n};\n\nTHREE.Vector4.prototype = {\n\n\tconstructor: THREE.Vector4,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetW: function ( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x;\n\t\tvar y = this.y;\n\t\tvar z = this.z;\n\t\tvar w = this.w;\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\tif ( scalar !== 0 ) {\n\n\t\t\tvar invScalar = 1 / scalar;\n\n\t\t\tthis.x *= invScalar;\n\t\t\tthis.y *= invScalar;\n\t\t\tthis.z *= invScalar;\n\t\t\tthis.w *= invScalar;\n\n\t\t} else {\n\n\t\t\tthis.x = 0;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\t\t\tthis.w = 1;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\t this.x = 1;\n\t\t\t this.y = 0;\n\t\t\t this.z = 0;\n\n\t\t} else {\n\n\t\t\t this.x = q.x / s;\n\t\t\t this.y = q.y / s;\n\t\t\t this.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\n\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\n\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\n\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) { // m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else { // m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\n\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\n\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tif ( this.x > v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y > v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\tif ( this.z > v.z ) {\n\n\t\t\tthis.z = v.z;\n\n\t\t}\n\n\t\tif ( this.w > v.w ) {\n\n\t\t\tthis.w = v.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tif ( this.x < v.x ) {\n\n\t\t\tthis.x = v.x;\n\n\t\t}\n\n\t\tif ( this.y < v.y ) {\n\n\t\t\tthis.y = v.y;\n\n\t\t}\n\n\t\tif ( this.z < v.z ) {\n\n\t\t\tthis.z = v.z;\n\n\t\t}\n\n\t\tif ( this.w < v.w ) {\n\n\t\t\tthis.w = v.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n\t\tif ( this.x < min.x ) {\n\n\t\t\tthis.x = min.x;\n\n\t\t} else if ( this.x > max.x ) {\n\n\t\t\tthis.x = max.x;\n\n\t\t}\n\n\t\tif ( this.y < min.y ) {\n\n\t\t\tthis.y = min.y;\n\n\t\t} else if ( this.y > max.y ) {\n\n\t\t\tthis.y = max.y;\n\n\t\t}\n\n\t\tif ( this.z < min.z ) {\n\n\t\t\tthis.z = min.z;\n\n\t\t} else if ( this.z > max.z ) {\n\n\t\t\tthis.z = max.z;\n\n\t\t}\n\n\t\tif ( this.w < min.w ) {\n\n\t\t\tthis.w = min.w;\n\n\t\t} else if ( this.w > max.w ) {\n\n\t\t\tthis.w = max.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: ( function () {\n\n\t\tvar min, max;\n\n\t\treturn function ( minVal, maxVal ) {\n\n\t\t\tif ( min === undefined ) {\n\n\t\t\t\tmin = new THREE.Vector4();\n\t\t\t\tmax = new THREE.Vector4();\n\n\t\t\t}\n\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t} )(),\n\n    floor: function () {\n\n        this.x = Math.floor( this.x );\n        this.y = Math.floor( this.y );\n        this.z = Math.floor( this.z );\n        this.w = Math.floor( this.w );\n\n        return this;\n\n    },\n\n    ceil: function () {\n\n        this.x = Math.ceil( this.x );\n        this.y = Math.ceil( this.y );\n        this.z = Math.ceil( this.z );\n        this.w = Math.ceil( this.w );\n\n        return this;\n\n    },\n\n    round: function () {\n\n        this.x = Math.round( this.x );\n        this.y = Math.round( this.y );\n        this.z = Math.round( this.z );\n        this.w = Math.round( this.w );\n\n        return this;\n\n    },\n\n    roundToZero: function () {\n\n        this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n        this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n        this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n        this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n        return this;\n\n    },\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t},\n\n\tlengthManhattan: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() );\n\n\t},\n\n\tsetLength: function ( l ) {\n\n\t\tvar oldLength = this.length();\n\n\t\tif ( oldLength !== 0 && l !== oldLength ) {\n\n\t\t\tthis.multiplyScalar( l / oldLength );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Vector4( this.x, this.y, this.z, this.w );\n\n\t}\n\n};\n\n// File:src/math/Euler.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Euler = function ( x, y, z, order ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._order = order || THREE.Euler.DefaultOrder;\n\n};\n\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nTHREE.Euler.DefaultOrder = 'XYZ';\n\nTHREE.Euler.prototype = {\n\n\tconstructor: THREE.Euler,\n\n\t_x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,\n\n\tget x () {\n\n\t\treturn this._x;\n\n\t},\n\n\tset x ( value ) {\n\n\t\tthis._x = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget y () {\n\n\t\treturn this._y;\n\n\t},\n\n\tset y ( value ) {\n\n\t\tthis._y = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget z () {\n\n\t\treturn this._z;\n\n\t},\n\n\tset z ( value ) {\n\n\t\tthis._z = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tget order () {\n\n\t\treturn this._order;\n\n\t},\n\n\tset order ( value ) {\n\n\t\tthis._order = value;\n\t\tthis.onChangeCallback();\n\n\t},\n\n\tset: function ( x, y, z, order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order || this._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m, order ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements;\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\tthis._z = 0;\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t}\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\tthis._y = 0;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromQuaternion: function ( q, order, update ) {\n\n\t\tvar clamp = THREE.Math.clamp;\n\n\t\t// q is assumed to be normalized\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n\n\t\tvar sqx = q.x * q.x;\n\t\tvar sqy = q.y * q.y;\n\t\tvar sqz = q.z * q.z;\n\t\tvar sqw = q.w * q.w;\n\n\t\torder = order || this._order;\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\n\t\t\tthis._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ), - 1, 1 ) );\n\t\t\tthis._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\n\n\t\t} else if ( order ===  'YXZ' ) {\n\n\t\t\tthis._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ), - 1, 1 ) );\n\t\t\tthis._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\n\t\t\tthis._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ), - 1, 1 ) );\n\t\t\tthis._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\n\t\t\tthis._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\n\t\t\tthis._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ), - 1, 1 ) );\n\t\t\tthis._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\n\t\t\tthis._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\n\t\t\tthis._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ), - 1, 1 ) );\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\n\t\t\tthis._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\n\t\t\tthis._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ), - 1, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Euler: .setFromQuaternion() given unsupported order: ' + order )\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\treorder: function () {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\tvar q = new THREE.Quaternion();\n\n\t\treturn function ( newOrder ) {\n\n\t\t\tq.setFromEuler( this );\n\t\t\tthis.setFromQuaternion( q, newOrder );\n\n\t\t};\n\n\n\t}(),\n\n\tequals: function ( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\treturn [ this._x, this._y, this._z, this._order ];\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {},\n\n\tclone: function () {\n\n\t\treturn new THREE.Euler( this._x, this._y, this._z, this._order );\n\n\t}\n\n};\n\n// File:src/math/Line3.js\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Line3 = function ( start, end ) {\n\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\n\n};\n\nTHREE.Line3.prototype = {\n\n\tconstructor: THREE.Line3,\n\n\tset: function ( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t},\n\n\tdelta: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.end, this.start );\n\n\t},\n\n\tdistanceSq: function () {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t},\n\n\tdistance: function () {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tclosestPointToPointParameter: function () {\n\n\t\tvar startP = new THREE.Vector3();\n\t\tvar startEnd = new THREE.Vector3();\n\n\t\treturn function ( point, clampToLine ) {\n\n\t\t\tstartP.subVectors( point, this.start );\n\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif ( clampToLine ) {\n\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\n\n\t\t\t}\n\n\t\t\treturn t;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\n\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Line3().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Box2.js\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Box2 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\n\n};\n\nTHREE.Box2.prototype = {\n\n\tconstructor: THREE.Box2,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] )\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function ( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t},\n\n\tisIntersectionBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector2();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector2();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Box2().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Box3.js\n\n/**\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Box3 = function ( min, max ) {\n\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\n\n};\n\nTHREE.Box3.prototype = {\n\n\tconstructor: THREE.Box3,\n\n\tset: function ( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPoints: function ( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] )\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCenterAndSize: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( center, size ) {\n\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tsetFromObject: function () {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and childrens', world transforms\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( object ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tobject.traverse( function ( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\n\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\tv1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tcopy: function ( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tmakeEmpty: function () {\n\n\t\tthis.min.x = this.min.y = this.min.z = Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t},\n\n\tcenter: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t},\n\n\tsize: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.subVectors( this.max, this.min );\n\n\t},\n\n\texpandByPoint: function ( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t},\n\n\texpandByVector: function ( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t},\n\n\texpandByScalar: function ( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\n\t\t     point.y < this.min.y || point.y > this.max.y ||\n\t\t     point.z < this.min.z || point.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsBox: function ( box ) {\n\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tgetParameter: function ( point, optionalTarget ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t},\n\n\tisIntersectionBox: function ( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t     box.max.z < this.min.z || box.min.z > this.max.z ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( point ).clamp( this.min, this.max );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t};\n\n\t}(),\n\n\tgetBoundingSphere: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\n\n\t\t\tresult.center = this.center();\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\n\n\t\t\treturn result;\n\n\t\t};\n\n\t}(),\n\n\tintersect: function ( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tunion: function ( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar points = [\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3(),\n\t\t\tnew THREE.Vector3()\n\t\t];\n\n\t\treturn function ( matrix ) {\n\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111\n\n\t\t\tthis.makeEmpty();\n\t\t\tthis.setFromPoints( points );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Box3().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Matrix3.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Matrix3 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0,\n\t\t0, 1, 0,\n\t\t0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix3.prototype = {\n\n\tconstructor: THREE.Matrix3,\n\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;\n\t\tte[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;\n\t\tte[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tvar me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\treturn vector.applyMatrix3( this );\n\n\t},\n\n\tmultiplyVector3Array: function ( a ) {\n\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( array, offset, length ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.x = array[ j ];\n\t\t\t\tv1.y = array[ j + 1 ];\n\t\t\t\tv1.z = array[ j + 2 ];\n\n\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\tarray[ j ]     = v1.x;\n\t\t\t\tarray[ j + 1 ] = v1.y;\n\t\t\t\tarray[ j + 2 ] = v1.z;\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t},\n\n\tgetInverse: function ( matrix, throwOnInvertible ) {\n\n\t\t// input: THREE.Matrix4\n\t\t// ( based on http://code.google.com/p/webgl-mjs/ )\n\n\t\tvar me = matrix.elements;\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];\n\t\tte[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];\n\t\tte[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];\n\t\tte[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];\n\t\tte[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];\n\t\tte[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];\n\t\tte[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];\n\t\tte[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];\n\t\tte[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];\n\n\t\tvar det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];\n\n\t\t// no inverse\n\n\t\tif ( det === 0 ) {\n\n\t\t\tvar msg = \"Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnInvertible || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\tthis.identity();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.multiplyScalar( 1.0 / det );\n\n\t\treturn this;\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar tmp, m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset     ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\n\t\treturn array;\n\n\t},\n\n\tgetNormalMatrix: function ( m ) {\n\n\t\t// input: THREE.Matrix4\n\n\t\tthis.getInverse( m ).transpose();\n\n\t\treturn this;\n\n\t},\n\n\ttransposeIntoArray: function ( r ) {\n\n\t\tvar m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\tvar te = this.elements;\n\n\t\treturn [\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\n\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\n\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\n\t\t];\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix3().fromArray( this.elements );\n\n\t}\n\n};\n\n// File:src/math/Matrix4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Matrix4 = function () {\n\n\tthis.elements = new Float32Array( [\n\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 1\n\n\t] );\n\n\tif ( arguments.length > 0 ) {\n\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t}\n\n};\n\nTHREE.Matrix4.prototype = {\n\n\tconstructor: THREE.Matrix4,\n\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t},\n\n\tidentity: function () {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( m ) {\n\n\t\tthis.elements.set( m.elements );\n\n\t\treturn this;\n\n\t},\n\n\textractPosition: function ( m ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\treturn this.copyPosition( m );\n\n\t},\n\n\tcopyPosition: function ( m ) {\n\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\textractRotation: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();\n\t\t\tvar scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();\n\t\t\tvar scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();\n\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeRotationFromEuler: function ( euler ) {\n\n\t\tif ( euler instanceof THREE.Euler === false ) {\n\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar te = this.elements;\n\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\n\t\treturn this.makeRotationFromQuaternion( q );\n\n\t},\n\n\tmakeRotationFromQuaternion: function ( q ) {\n\n\t\tvar te = this.elements;\n\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tte[ 0 ] = 1 - ( yy + zz );\n\t\tte[ 4 ] = xy - wz;\n\t\tte[ 8 ] = xz + wy;\n\n\t\tte[ 1 ] = xy + wz;\n\t\tte[ 5 ] = 1 - ( xx + zz );\n\t\tte[ 9 ] = yz - wx;\n\n\t\tte[ 2 ] = xz - wy;\n\t\tte[ 6 ] = yz + wx;\n\t\tte[ 10 ] = 1 - ( xx + yy );\n\n\t\t// last column\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// bottom row\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tlookAt: function () {\n\n\t\tvar x = new THREE.Vector3();\n\t\tvar y = new THREE.Vector3();\n\t\tvar z = new THREE.Vector3();\n\n\t\treturn function ( eye, target, up ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tz.subVectors( eye, target ).normalize();\n\n\t\t\tif ( z.length() === 0 ) {\n\n\t\t\t\tz.z = 1;\n\n\t\t\t}\n\n\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\tif ( x.length() === 0 ) {\n\n\t\t\t\tz.x += 0.0001;\n\t\t\t\tx.crossVectors( up, z ).normalize();\n\n\t\t\t}\n\n\t\t\ty.crossVectors( z, x );\n\n\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmultiply: function ( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t},\n\n\tmultiplyMatrices: function ( a, b ) {\n\n\t\tvar ae = a.elements;\n\t\tvar be = b.elements;\n\t\tvar te = this.elements;\n\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyToArray: function ( a, b, r ) {\n\n\t\tvar te = this.elements;\n\n\t\tthis.multiplyMatrices( a, b );\n\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( s ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVector3: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\n\t\treturn vector.applyProjection( this );\n\n\t},\n\n\tmultiplyVector4: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\n\tmultiplyVector3Array: function ( a ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\n\t\treturn this.applyToVector3Array( a );\n\n\t},\n\n\tapplyToVector3Array: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( array, offset, length ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\t\t\tif ( length === undefined ) length = array.length;\n\n\t\t\tfor ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {\n\n\t\t\t\tv1.x = array[ j ];\n\t\t\t\tv1.y = array[ j + 1 ];\n\t\t\t\tv1.z = array[ j + 2 ];\n\n\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\tarray[ j ]     = v1.x;\n\t\t\t\tarray[ j + 1 ] = v1.y;\n\t\t\t\tarray[ j + 2 ] = v1.z;\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t};\n\n\t}(),\n\n\trotateAxis: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\n\t\tv.transformDirection( this );\n\n\t},\n\n\tcrossVector: function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\treturn vector.applyMatrix4( this );\n\n\t},\n\n\tdeterminant: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t},\n\n\ttranspose: function () {\n\n\t\tvar te = this.elements;\n\t\tvar tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t},\n\n\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\tvar te = this.elements;\n\n\t\tarray[ offset     ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ]  = te[ 8 ];\n\t\tarray[ offset + 9 ]  = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t},\n\n\tgetPosition: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\n\t\t\tvar te = this.elements;\n\t\t\treturn v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );\n\n\t\t};\n\n\t}(),\n\n\tsetPosition: function ( v ) {\n\n\t\tvar te = this.elements;\n\n\t\tte[ 12 ] = v.x;\n\t\tte[ 13 ] = v.y;\n\t\tte[ 14 ] = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tgetInverse: function ( m, throwOnInvertible ) {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tvar te = this.elements;\n\t\tvar me = m.elements;\n\n\t\tvar n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];\n\t\tvar n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];\n\t\tvar n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];\n\t\tvar n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];\n\n\t\tte[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\n\t\tte[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\n\t\tte[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\n\t\tte[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\n\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\n\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\n\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\n\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\n\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\n\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\n\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\n\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\n\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\n\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\n\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\n\n\t\tvar det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];\n\n\t\tif ( det == 0 ) {\n\n\t\t\tvar msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n\t\t\tif ( throwOnInvertible || false ) {\n\n\t\t\t\tthrow new Error( msg );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( msg );\n\n\t\t\t}\n\n\t\t\tthis.identity();\n\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.multiplyScalar( 1 / det );\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( v ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t},\n\n\trotateX: function ( angle ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t},\n\n\trotateY: function ( angle ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t},\n\n\trotateZ: function ( angle ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t},\n\n\trotateByAxis: function ( axis, angle ) {\n\n\t\tconsole.warn( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t},\n\n\tscale: function ( v ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t},\n\n\tgetMaxScaleOnAxis: function () {\n\n\t\tvar te = this.elements;\n\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );\n\n\t},\n\n\tmakeTranslation: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationX: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0,  0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s,  c, 0,\n\t\t\t0, 0,  0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationY: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationZ: function ( theta ) {\n\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts,  c, 0, 0,\n\t\t\t0,  0, 1, 0,\n\t\t\t0,  0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tvar c = Math.cos( angle );\n\t\tvar s = Math.sin( angle );\n\t\tvar t = 1 - c;\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\tvar tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\t return this;\n\n\t},\n\n\tmakeScale: function ( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t},\n\n\tcompose: function ( position, quaternion, scale ) {\n\n\t\tthis.makeRotationFromQuaternion( quaternion );\n\t\tthis.scale( scale );\n\t\tthis.setPosition( position );\n\n\t\treturn this;\n\n\t},\n\n\tdecompose: function () {\n\n\t\tvar vector = new THREE.Vector3();\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t// if determine is negative, we need to invert one scale\n\t\t\tvar det = this.determinant();\n\t\t\tif ( det < 0 ) {\n\t\t\t\tsx = - sx;\n\t\t\t}\n\n\t\t\tposition.x = te[ 12 ];\n\t\t\tposition.y = te[ 13 ];\n\t\t\tposition.z = te[ 14 ];\n\n\t\t\t// scale the rotation part\n\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\n\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar x = 2 * near / ( right - left );\n\t\tvar y = 2 * near / ( top - bottom );\n\n\t\tvar a = ( right + left ) / ( right - left );\n\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\tvar c = - ( far + near ) / ( far - near );\n\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t},\n\n\tmakePerspective: function ( fov, aspect, near, far ) {\n\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\n\t\tvar ymin = - ymax;\n\t\tvar xmin = ymin * aspect;\n\t\tvar xmax = ymax * aspect;\n\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\n\n\t},\n\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\tvar te = this.elements;\n\t\tvar w = right - left;\n\t\tvar h = top - bottom;\n\t\tvar p = far - near;\n\n\t\tvar x = ( right + left ) / w;\n\t\tvar y = ( top + bottom ) / h;\n\t\tvar z = ( far + near ) / p;\n\n\t\tte[ 0 ] = 2 / w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 / h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 / p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t},\n\n\tfromArray: function ( array ) {\n\n\t\tthis.elements.set( array );\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function () {\n\n\t\tvar te = this.elements;\n\n\t\treturn [\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\n\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\n\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\n\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\n\t\t];\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\n\n\t}\n\n};\n\n// File:src/math/Ray.js\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Ray = function ( origin, direction ) {\n\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\n\n};\n\nTHREE.Ray.prototype = {\n\n\tconstructor: THREE.Ray,\n\n\tset: function ( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t},\n\n\tat: function ( t, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t},\n\n\trecast: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( t ) {\n\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\tclosestPointToPoint: function ( point, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.subVectors( point, this.origin );\n\t\tvar directionDistance = result.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn result.copy( this.origin );\n\n\t\t}\n\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t},\n\n\tdistanceToPoint: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( point ) {\n\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t// point behind the ray\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn this.origin.distanceTo( point );\n\n\t\t\t}\n\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\treturn v1.distanceTo( point );\n\n\t\t};\n\n\t}(),\n\n\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\tvar segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );\n\t\tvar segDir = v1.clone().sub( v0 ).normalize();\n\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tvar diff = this.origin.clone().sub( segCenter );\n\t\tvar a01 = - this.direction.dot( segDir );\n\t\tvar b0 = diff.dot( this.direction );\n\t\tvar b1 = - diff.dot( segDir );\n\t\tvar c = diff.lengthSq();\n\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\tvar s0, s1, sqrDist, extDet;\n\n\t\tif ( det >= 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t},\n\n\tisIntersectionSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t},\n\n\tintersectSphere: function () {\n\n\t\t// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( sphere, optionalTarget ) {\n\n\t\t\tv1.subVectors( sphere.center, this.origin );\n\n\t\t\tvar tca = v1.dot( this.direction );\n\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\tvar t0 = tca - thc;\n\n\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\tvar t1 = tca + thc;\n\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t// test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\n\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0 \n\t\t\treturn this.at( t0, optionalTarget );\n\n\t\t}\n\n\t}(),\n\n\tisIntersectionPlane: function ( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t},\n\n\tdistanceToPlane: function ( plane ) {\n\n\t\tvar denominator = plane.normal.dot( this.direction );\n\t\tif ( denominator == 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) == 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t :  null;\n\n\t},\n\n\tintersectPlane: function ( plane, optionalTarget ) {\n\n\t\tvar t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.at( t, optionalTarget );\n\n\t},\n\n\tisIntersectionBox: function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function ( box ) {\n\n\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t};\n\n\t}(),\n\n\tintersectBox: function ( box , optionalTarget ) {\n\n\t\t// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/\n\n\t\tvar tmin,tmax,tymin,tymax,tzmin,tzmax;\n\n\t\tvar invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tvar origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\n\n\t},\n\n\tintersectTriangle: function () {\n\n\t\t// Compute the offset origin, edges, and normal.\n\t\tvar diff = new THREE.Vector3();\n\t\tvar edge1 = new THREE.Vector3();\n\t\tvar edge2 = new THREE.Vector3();\n\t\tvar normal = new THREE.Vector3();\n\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\n\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\n\n\t\t\tedge1.subVectors( b, a );\n\t\t\tedge2.subVectors( c, a );\n\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\tvar sign;\n\n\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\tsign = 1;\n\n\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\tsign = - 1;\n\t\t\t\tDdN = - DdN;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tdiff.subVectors( this.origin, a );\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t// b1 < 0, no intersection\n\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t// b2 < 0, no intersection\n\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// b1+b2 > 1, no intersection\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Line intersects triangle, check if ray does.\n\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t// t < 0, no intersection\n\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Ray intersects triangle.\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix4: function ( matrix4 ) {\n\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.sub( this.origin );\n\t\tthis.direction.normalize();\n\n\t\treturn this;\n\t},\n\n\tequals: function ( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Ray().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Sphere.js\n\n/**\n * @author bhouston / http://exocortex.com\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Sphere = function ( center, radius ) {\n\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n};\n\nTHREE.Sphere.prototype = {\n\n\tconstructor: THREE.Sphere,\n\n\tset: function ( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\t},\n\n\tsetFromPoints: function () {\n\n\t\tvar box = new THREE.Box3();\n\n\t\treturn function ( points, optionalCenter )  {\n\n\t\t\tvar center = this.center;\n\n\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t} else {\n\n\t\t\t\tbox.setFromPoints( points ).center( center );\n\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\treturn this;\n\n \t\t};\n\n\t}(),\n\n\tcopy: function ( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t},\n\n\tempty: function () {\n\n\t\treturn ( this.radius <= 0 );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t},\n\n\tclampPoint: function ( point, optionalTarget ) {\n\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\tresult.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tresult.sub( this.center ).normalize();\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\tgetBoundingBox: function ( optionalTarget ) {\n\n\t\tvar box = optionalTarget || new THREE.Box3();\n\n\t\tbox.set( this.center, this.center );\n\t\tbox.expandByScalar( this.radius );\n\n\t\treturn box;\n\n\t},\n\n\tapplyMatrix4: function ( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t},\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Sphere().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Frustum.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\n\n\t];\n\n};\n\nTHREE.Frustum.prototype = {\n\n\tconstructor: THREE.Frustum,\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function () {\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\treturn function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\tsphere.applyMatrix4( object.matrixWorld );\n\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t};\n\n\t}(),\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function () {\n\n\t\tvar p1 = new THREE.Vector3(),\n\t\t\tp2 = new THREE.Vector3();\n\n\t\treturn function ( box ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\n\n\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\n\n\t\t\t\t// if both outside plane, no intersection\n\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t}(),\n\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Frustum().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Plane.js\n\n/**\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Plane = function ( normal, constant ) {\n\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n};\n\nTHREE.Plane.prototype = {\n\n\tconstructor: THREE.Plane,\n\n\tset: function ( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponents: function ( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCoplanarPoints: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\n\t\treturn function ( a, b, c ) {\n\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\n\tcopy: function ( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t},\n\n\tnormalize: function () {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t},\n\n\tdistanceToPoint: function ( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t},\n\n\tdistanceToSphere: function ( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t},\n\n\tprojectPoint: function ( point, optionalTarget ) {\n\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\n\n\t},\n\n\torthoPoint: function ( point, optionalTarget ) {\n\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\n\n\t},\n\n\tisIntersectionLine: function ( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tvar startSign = this.distanceToPoint( line.start );\n\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t},\n\n\tintersectLine: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( line, optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tvar direction = line.delta( v1 );\n\n\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\tif ( denominator == 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( this.distanceToPoint( line.start ) == 0 ) {\n\n\t\t\t\t\treturn result.copy( line.start );\n\n\t\t\t\t}\n\n\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t};\n\n\t}(),\n\n\n\tcoplanarPoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t},\n\n\tapplyMatrix4: function () {\n\n\t\tvar v1 = new THREE.Vector3();\n\t\tvar v2 = new THREE.Vector3();\n\t\tvar m1 = new THREE.Matrix3();\n\n\t\treturn function ( matrix, optionalNormalMatrix ) {\n\n\t\t\t// compute new normal based on theory here:\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\n\n\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\n\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\n\n\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t}(),\n\n\ttranslate: function ( offset ) {\n\n\t\tthis.constant = this.constant - offset.dot( this.normal );\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant == this.constant );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Plane().copy( this );\n\n\t}\n\n};\n\n// File:src/math/Math.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Math = {\n\n\tgenerateUUID: function () {\n\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\n\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\n\t\tvar uuid = new Array( 36 );\n\t\tvar rnd = 0, r;\n\n\t\treturn function () {\n\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\n\n\t\t\t\tif ( i == 8 || i == 13 || i == 18 || i == 23 ) {\n\n\t\t\t\t\tuuid[ i ] = '-';\n\n\t\t\t\t} else if ( i == 14 ) {\n\n\t\t\t\t\tuuid[ i ] = '4';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n\t\t\t\t\tr = rnd & 0xf;\n\t\t\t\t\trnd = rnd >> 4;\n\t\t\t\t\tuuid[ i ] = chars[ ( i == 19 ) ? ( r & 0x3 ) | 0x8 : r ];\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn uuid.join( '' );\n\n\t\t};\n\n\t}(),\n\n\t// Clamp value to range <a, b>\n\n\tclamp: function ( x, a, b ) {\n\n\t\treturn ( x < a ) ? a : ( ( x > b ) ? b : x );\n\n\t},\n\n\t// Clamp value to range <a, inf)\n\n\tclampBottom: function ( x, a ) {\n\n\t\treturn x < a ? a : x;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random float from <0, 1> with 16 bits of randomness\n\t// (standard Math.random() creates repetitive patterns when applied over larger space)\n\n\trandom16: function () {\n\n\t\treturn ( 65280 * Math.random() + 255 * Math.random() ) / 65535;\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function () {\n\n\t\tvar degreeToRadiansFactor = Math.PI / 180;\n\n\t\treturn function ( degrees ) {\n\n\t\t\treturn degrees * degreeToRadiansFactor;\n\n\t\t};\n\n\t}(),\n\n\tradToDeg: function () {\n\n\t\tvar radianToDegreesFactor = 180 / Math.PI;\n\n\t\treturn function ( radians ) {\n\n\t\t\treturn radians * radianToDegreesFactor;\n\n\t\t};\n\n\t}(),\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t}\n\n};\n\n// File:src/math/Spline.js\n\n/**\n * Spline from Tween.js, slightly optimized (and trashed)\n * http://sole.github.com/tween.js/examples/05_spline.html\n *\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Spline = function ( points ) {\n\n\tthis.points = points;\n\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\n\tpoint, intPoint, weight, w2, w3,\n\tpa, pb, pc, pd;\n\n\tthis.initFromArray = function ( a ) {\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\n\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\n\n\t\t}\n\n\t};\n\n\tthis.getPoint = function ( k ) {\n\n\t\tpoint = ( this.points.length - 1 ) * k;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n\n\t\tpa = this.points[ c[ 0 ] ];\n\t\tpb = this.points[ c[ 1 ] ];\n\t\tpc = this.points[ c[ 2 ] ];\n\t\tpd = this.points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tthis.getControlPointsArray = function () {\n\n\t\tvar i, p, l = this.points.length,\n\t\t\tcoords = [];\n\n\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\tp = this.points[ i ];\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\n\n\t\t}\n\n\t\treturn coords;\n\n\t};\n\n\t// approximate length by summing linear segments\n\n\tthis.getLength = function ( nSubDivisions ) {\n\n\t\tvar i, index, nSamples, position,\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\n\t\t\toldPosition = new THREE.Vector3(),\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tchunkLengths = [],\n\t\t\ttotalLength = 0;\n\n\t\t// first point has 0 length\n\n\t\tchunkLengths[ 0 ] = 0;\n\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\n\n\t\tnSamples = this.points.length * nSubDivisions;\n\n\t\toldPosition.copy( this.points[ 0 ] );\n\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\n\n\t\t\tindex = i / nSamples;\n\n\t\t\tposition = this.getPoint( index );\n\t\t\ttmpVec.copy( position );\n\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\n\n\t\t\toldPosition.copy( position );\n\n\t\t\tpoint = ( this.points.length - 1 ) * index;\n\t\t\tintPoint = Math.floor( point );\n\n\t\t\tif ( intPoint != oldIntPoint ) {\n\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\n\t\t\t\toldIntPoint = intPoint;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// last point ends with total length\n\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\n\n\t\treturn { chunks: chunkLengths, total: totalLength };\n\n\t};\n\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\n\n\t\tvar i, j,\n\t\t\tindex, indexCurrent, indexNext,\n\t\t\tlinearDistance, realDistance,\n\t\t\tsampling, position,\n\t\t\tnewpoints = [],\n\t\t\ttmpVec = new THREE.Vector3(),\n\t\t\tsl = this.getLength();\n\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\n\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\n\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\n\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\n\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\n\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\n\t\t\tindexNext = i / ( this.points.length - 1 );\n\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\n\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\n\n\t\t\t\tposition = this.getPoint( index );\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\n\n\t\t\t}\n\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\n\n\t\t}\n\n\t\tthis.points = newpoints;\n\n\t};\n\n\t// Catmull-Rom\n\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t};\n\n};\n\n// File:src/math/Triangle.js\n\n/**\n * @author bhouston / http://exocortex.com\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Triangle = function ( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\n\n};\n\nTHREE.Triangle.normal = function () {\n\n\tvar v0 = new THREE.Vector3();\n\n\treturn function ( a, b, c, optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tresult.subVectors( c, b );\n\t\tv0.subVectors( a, b );\n\t\tresult.cross( v0 );\n\n\t\tvar resultLengthSq = result.lengthSq();\n\t\tif ( resultLengthSq > 0 ) {\n\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\n\n\t\t}\n\n\t\treturn result.set( 0, 0, 0 );\n\n\t};\n\n}();\n\n// static/instance method to calculate barycoordinates\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\nTHREE.Triangle.barycoordFromPoint = function () {\n\n\tvar v0 = new THREE.Vector3();\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function ( point, a, b, c, optionalTarget ) {\n\n\t\tv0.subVectors( c, a );\n\t\tv1.subVectors( b, a );\n\t\tv2.subVectors( point, a );\n\n\t\tvar dot00 = v0.dot( v0 );\n\t\tvar dot01 = v0.dot( v1 );\n\t\tvar dot02 = v0.dot( v2 );\n\t\tvar dot11 = v1.dot( v1 );\n\t\tvar dot12 = v1.dot( v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t// colinear or singular triangle\n\t\tif ( denom == 0 ) {\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn result.set( - 2, - 1, - 1 );\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycoordinates must always sum to 1\n\t\treturn result.set( 1 - u - v, v, u );\n\n\t};\n\n}();\n\nTHREE.Triangle.containsPoint = function () {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function ( point, a, b, c ) {\n\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\n\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\n\n\t};\n\n}();\n\nTHREE.Triangle.prototype = {\n\n\tconstructor: THREE.Triangle,\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tarea: function () {\n\n\t\tvar v0 = new THREE.Vector3();\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tv0.subVectors( this.c, this.b );\n\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t};\n\n\t}(),\n\n\tmidpoint: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tnormal: function ( optionalTarget ) {\n\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tplane: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Plane();\n\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\n\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.Triangle().copy( this );\n\n\t}\n\n};\n\n// File:src/core/Clock.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Clock = function ( autoStart ) {\n\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\tthis.startTime = 0;\n\tthis.oldTime = 0;\n\tthis.elapsedTime = 0;\n\n\tthis.running = false;\n\n};\n\nTHREE.Clock.prototype = {\n\n\tconstructor: THREE.Clock,\n\n\tstart: function () {\n\n\t\tthis.startTime = self.performance !== undefined && self.performance.now !== undefined\n\t\t\t\t\t ? self.performance.now()\n\t\t\t\t\t : Date.now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.running = true;\n\t},\n\n\tstop: function () {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\n\t},\n\n\tgetElapsedTime: function () {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t},\n\n\tgetDelta: function () {\n\n\t\tvar diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tvar newTime = self.performance !== undefined && self.performance.now !== undefined\n\t\t\t\t\t ? self.performance.now()\n\t\t\t\t\t : Date.now();\n\n\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n};\n\n// File:src/core/EventDispatcher.js\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nTHREE.EventDispatcher = function () {}\n\nTHREE.EventDispatcher.prototype = {\n\n\tconstructor: THREE.EventDispatcher,\n\n\tapply: function ( object ) {\n\n\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\n\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\n\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\n\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\n\n\t},\n\n\taddEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t},\n\n\thasEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tvar listeners = this._listeners;\n\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tremoveEventListener: function ( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\tdispatchEvent: function ( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tvar listeners = this._listeners;\n\t\tvar listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\tvar array = [];\n\t\t\tvar length = listenerArray.length;\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ] = listenerArray[ i ];\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/core/Raycaster.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://exocortex.com/\n * @author stephomi / http://stephaneginier.com/\n */\n\n( function ( THREE ) {\n\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\n\n\t\tthis.ray = new THREE.Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tSprite: {},\n\t\t\tMesh: {},\n\t\t\tPointCloud: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tLine: {}\n\t\t};\n\n\t};\n\n\tvar descSort = function ( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t};\n\n\tvar intersectObject = function ( object, raycaster, intersects, recursive ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t//\n\n\tTHREE.Raycaster.prototype = {\n\n\t\tconstructor: THREE.Raycaster,\n\n\t\tprecision: 0.0001,\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.ray.set( origin, direction );\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( descSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive ) {\n\n\t\t\tvar intersects = [];\n\n\t\t\tif ( objects instanceof Array === false ) {\n\n\t\t\t\tconsole.log( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( descSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t};\n\n}( THREE ) );\n\n// File:src/core/Object3D.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.Object3D = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Object3D';\n\n\tthis.parent = undefined;\n\tthis.children = [];\n\n\tthis.up = THREE.Object3D.DefaultUp.clone();\n\n\tvar scope = this;\n\n\tvar position = new THREE.Vector3();\n\tvar rotation = new THREE.Euler();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\n\n\tvar onRotationChange = function () {\n\t\tquaternion.setFromEuler( rotation, false );\n\t};\n\n\tvar onQuaternionChange = function () {\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\t};\n\n\trotation.onChange( onRotationChange );\n\tquaternion.onChange( onQuaternionChange );\n\n\tObject.defineProperties( this, {\n\t\tposition: {\n\t\t\tenumerable: true,\n\t\t\tvalue: position\n\t\t},\n\t\trotation: {\n\t\t\tenumerable: true,\n\t\t\tvalue: rotation\n\t\t},\n\t\tquaternion: {\n\t\t\tenumerable: true,\n\t\t\tvalue: quaternion\n\t\t},\n\t\tscale: {\n\t\t\tenumerable: true,\n\t\t\tvalue: scale\n\t\t},\n\t} );\n\n\tthis.renderDepth = null;\n\n\tthis.rotationAutoUpdate = true;\n\n\tthis.matrix = new THREE.Matrix4();\n\tthis.matrixWorld = new THREE.Matrix4();\n\n\tthis.matrixAutoUpdate = true;\n\tthis.matrixWorldNeedsUpdate = false;\n\n\tthis.visible = true;\n\n\tthis.castShadow = false;\n\tthis.receiveShadow = false;\n\n\tthis.frustumCulled = true;\n\n\tthis.userData = {};\n\n};\n\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\n\nTHREE.Object3D.prototype = {\n\n\tconstructor: THREE.Object3D,\n\n\tget eulerOrder () {\n\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );\n\n\t\treturn this.rotation.order;\n\n\t},\n\n\tset eulerOrder ( value ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );\n\n\t\tthis.rotation.order = value;\n\n\t},\n\n\tget useQuaternion () {\n\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t},\n\n\tset useQuaternion ( value ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t},\n\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t},\n\n\tsetRotationFromEuler: function ( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t},\n\n\tsetRotationFromMatrix: function ( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t},\n\n\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t},\n\n\trotateOnAxis: function () {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar q1 = new THREE.Quaternion();\n\n\t\treturn function ( axis, angle ) {\n\n\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t}(),\n\n\trotateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\trotateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function ( angle ) {\n\n\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t};\n\n\t}(),\n\n\ttranslateOnAxis: function () {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\tvar v1 = new THREE.Vector3();\n\n\t\treturn function ( axis, distance ) {\n\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t}(),\n\n\ttranslate: function ( distance, axis ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\treturn this.translateOnAxis( axis, distance );\n\n\t},\n\n\ttranslateX: function () {\n\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateY: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\ttranslateZ: function () {\n\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\n\n\t\treturn function ( distance ) {\n\n\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t};\n\n\t}(),\n\n\tlocalToWorld: function ( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t},\n\n\tworldToLocal: function () {\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t};\n\n\t}(),\n\n\tlookAt: function () {\n\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\n\n\t\tvar m1 = new THREE.Matrix4();\n\n\t\treturn function ( vector ) {\n\n\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t};\n\n\t}(),\n\n\tadd: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( \"THREE.Object3D.add:\", object, \"can't be added as a child of itself.\" );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object instanceof THREE.Object3D ) {\n\n\t\t\tif ( object.parent !== undefined ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\tthis.children.push( object );\n\n\t\t} else {\n\n\t\t\tconsole.error( \"THREE.Object3D.add:\", object, \"is not an instance of THREE.Object3D.\" );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tremove: function ( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( var i = 0; i < arguments.length; i++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = undefined;\n\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tgetChildByName: function ( name, recursive ) {\n\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\treturn this.getObjectByName( name, recursive );\n\n\t},\n\n\tgetObjectById: function ( id, recursive ) {\n\n\t\tif ( this.id === id ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectById( id, recursive );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetObjectByName: function ( name, recursive ) {\n\n\t\tif ( this.name === name ) return this;\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tvar child = this.children[ i ];\n\t\t\tvar object = child.getObjectByName( name, recursive );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t},\n\n\tgetWorldPosition: function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\n\n\t},\n\n\tgetWorldQuaternion: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar scale = new THREE.Vector3();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t}(),\n\n\tgetWorldRotation: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Euler();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\n\n\t\t}\n\n\t}(),\n\n\tgetWorldScale: function () {\n\n\t\tvar position = new THREE.Vector3();\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t}(),\n\n\tgetWorldDirection: function () {\n\n\t\tvar quaternion = new THREE.Quaternion();\n\n\t\treturn function ( optionalTarget ) {\n\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\t\tthis.getWorldQuaternion( quaternion );\n\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t}\n\n\t}(),\n\n\traycast: function () {},\n\n\ttraverse: function ( callback ) {\n\n\t\tcallback( this );\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].traverse( callback );\n\n\t\t}\n\n\t},\n\n\ttraverseVisible: function ( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t},\n\n\tupdateMatrix: function () {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\n\n\t\t\tif ( this.parent === undefined ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.3,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'ObjectExporter'\n\t\t\t}\n\t\t};\n\n\t\t//\n\n\t\tvar geometries = {};\n\n\t\tvar parseGeometry = function ( geometry ) {\n\n\t\t\tif ( output.geometries === undefined ) {\n\n\t\t\t\toutput.geometries = [];\n\n\t\t\t}\n\n\t\t\tif ( geometries[ geometry.uuid ] === undefined ) {\n\n\t\t\t\tvar json = geometry.toJSON();\n\n\t\t\t\tdelete json.metadata;\n\n\t\t\t\tgeometries[ geometry.uuid ] = json;\n\n\t\t\t\toutput.geometries.push( json );\n\n\t\t\t}\n\n\t\t\treturn geometry.uuid;\n\n\t\t};\n\n\t\t//\n\n\t\tvar materials = {};\n\n\t\tvar parseMaterial = function ( material ) {\n\n\t\t\tif ( output.materials === undefined ) {\n\n\t\t\t\toutput.materials = [];\n\n\t\t\t}\n\n\t\t\tif ( materials[ material.uuid ] === undefined ) {\n\n\t\t\t\tvar json = material.toJSON();\n\n\t\t\t\tdelete json.metadata;\n\n\t\t\t\tmaterials[ material.uuid ] = json;\n\n\t\t\t\toutput.materials.push( json );\n\n\t\t\t}\n\n\t\t\treturn material.uuid;\n\n\t\t};\n\n\t\t//\n\n\t\tvar parseObject = function ( object ) {\n\n\t\t\tvar data = {};\n\n\t\t\tdata.uuid = object.uuid;\n\t\t\tdata.type = object.type;\n\n\t\t\tif ( object.name !== '' ) data.name = object.name;\n\t\t\tif ( JSON.stringify( object.userData ) !== '{}' ) data.userData = object.userData;\n\t\t\tif ( object.visible !== true ) data.visible = object.visible;\n\n\t\t\tif ( object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tdata.fov = object.fov;\n\t\t\t\tdata.aspect = object.aspect;\n\t\t\t\tdata.near = object.near;\n\t\t\t\tdata.far = object.far;\n\n\t\t\t} else if ( object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tdata.left = object.left;\n\t\t\t\tdata.right = object.right;\n\t\t\t\tdata.top = object.top;\n\t\t\t\tdata.bottom = object.bottom;\n\t\t\t\tdata.near = object.near;\n\t\t\t\tdata.far = object.far;\n\n\t\t\t} else if ( object instanceof THREE.AmbientLight ) {\n\n\t\t\t\tdata.color = object.color.getHex();\n\n\t\t\t} else if ( object instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tdata.color = object.color.getHex();\n\t\t\t\tdata.intensity = object.intensity;\n\n\t\t\t} else if ( object instanceof THREE.PointLight ) {\n\n\t\t\t\tdata.color = object.color.getHex();\n\t\t\t\tdata.intensity = object.intensity;\n\t\t\t\tdata.distance = object.distance;\n\n\t\t\t} else if ( object instanceof THREE.SpotLight ) {\n\n\t\t\t\tdata.color = object.color.getHex();\n\t\t\t\tdata.intensity = object.intensity;\n\t\t\t\tdata.distance = object.distance;\n\t\t\t\tdata.angle = object.angle;\n\t\t\t\tdata.exponent = object.exponent;\n\n\t\t\t} else if ( object instanceof THREE.HemisphereLight ) {\n\n\t\t\t\tdata.color = object.color.getHex();\n\t\t\t\tdata.groundColor = object.groundColor.getHex();\n\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tdata.geometry = parseGeometry( object.geometry );\n\t\t\t\tdata.material = parseMaterial( object.material );\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tdata.geometry = parseGeometry( object.geometry );\n\t\t\t\tdata.material = parseMaterial( object.material );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tdata.material = parseMaterial( object.material );\n\n\t\t\t}\n\n\t\t\tdata.matrix = object.matrix.toArray();\n\n\t\t\tif ( object.children.length > 0 ) {\n\n\t\t\t\tdata.children = [];\n\n\t\t\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\t\t\tdata.children.push( parseObject( object.children[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\toutput.object = parseObject( this );\n\n\t\treturn output;\n\n\t},\n\n\tclone: function ( object, recursive ) {\n\n\t\tif ( object === undefined ) object = new THREE.Object3D();\n\t\tif ( recursive === undefined ) recursive = true;\n\n\t\tobject.name = this.name;\n\n\t\tobject.up.copy( this.up );\n\n\t\tobject.position.copy( this.position );\n\t\tobject.quaternion.copy( this.quaternion );\n\t\tobject.scale.copy( this.scale );\n\n\t\tobject.renderDepth = this.renderDepth;\n\n\t\tobject.rotationAutoUpdate = this.rotationAutoUpdate;\n\n\t\tobject.matrix.copy( this.matrix );\n\t\tobject.matrixWorld.copy( this.matrixWorld );\n\n\t\tobject.matrixAutoUpdate = this.matrixAutoUpdate;\n\t\tobject.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;\n\n\t\tobject.visible = this.visible;\n\n\t\tobject.castShadow = this.castShadow;\n\t\tobject.receiveShadow = this.receiveShadow;\n\n\t\tobject.frustumCulled = this.frustumCulled;\n\n\t\tobject.userData = JSON.parse( JSON.stringify( this.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tobject.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\n\nTHREE.Object3DIdCount = 0;\n\n// File:src/core/Projector.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Projector = function () {\n\n\tconsole.warn( 'THREE.Projector has been moved to /examples/renderers/Projector.js.' );\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function ( vector, camera ) {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() has been removed.' );\n\n\t};\n\n};\n\n// File:src/core/Face3.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\n\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n\tthis.vertexNormals = normal instanceof Array ? normal : [];\n\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\n\tthis.vertexColors = color instanceof Array ? color : [];\n\n\tthis.vertexTangents = [];\n\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n};\n\nTHREE.Face3.prototype = {\n\n\tconstructor: THREE.Face3,\n\n\tclone: function () {\n\n\t\tvar face = new THREE.Face3( this.a, this.b, this.c );\n\n\t\tface.normal.copy( this.normal );\n\t\tface.color.copy( this.color );\n\n\t\tface.materialIndex = this.materialIndex;\n\n\t\tfor ( var i = 0, il = this.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tface.vertexNormals[ i ] = this.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tface.vertexColors[ i ] = this.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.vertexTangents.length; i < il; i ++ ) {\n\n\t\t\tface.vertexTangents[ i ] = this.vertexTangents[ i ].clone();\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n};\n\n// File:src/core/Face4.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\n\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' )\n\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\n\n};\n\n// File:src/core/BufferAttribute.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferAttribute = function ( array, itemSize ) {\n\n\tthis.array = array;\n\tthis.itemSize = itemSize;\n\n\tthis.needsUpdate = false;\n\n};\n\nTHREE.BufferAttribute.prototype = {\n\n\tconstructor: THREE.BufferAttribute,\n\n\tget length () {\n\n\t\treturn this.array.length;\n\n\t},\n\n\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t},\n\n\tset: function ( value ) {\n\n\t\tthis.array.set( value );\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXY: function ( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index     ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZ: function ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index     ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index     ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new THREE.BufferAttribute( new this.array.constructor( this.array ), this.itemSize );\n\n\t}\n\n};\n\n//\n\nTHREE.Int8Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Uint8Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Uint8ClampedAttribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n\n};\n\nTHREE.Int16Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Uint16Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Int32Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Uint32Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Float32Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\nTHREE.Float64Attribute = function ( data, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );\n\treturn new THREE.BufferAttribute( data, itemSize );\n\n};\n\n// File:src/core/BufferGeometry.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'BufferGeometry';\n\n\tthis.attributes = {};\n\tthis.attributesKeys = [];\n\n\tthis.drawcalls = [];\n\tthis.offsets = this.drawcalls; // backwards compatibility\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n};\n\nTHREE.BufferGeometry.prototype = {\n\n\tconstructor: THREE.BufferGeometry,\n\n\taddAttribute: function ( name, attribute ) {\n\n\t\tif ( attribute instanceof THREE.BufferAttribute === false ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\tthis.attributes[ name ] = { array: arguments[ 1 ], itemSize: arguments[ 2 ] };\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.attributes[ name ] = attribute;\n\t\tthis.attributesKeys = Object.keys( this.attributes );\n\n\t},\n\n\tgetAttribute: function ( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t},\n\n\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\tthis.drawcalls.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tindex: indexOffset !== undefined ? indexOffset : 0\n\n\t\t} );\n\n\t},\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tmatrix.applyToVector3Array( position.array );\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tvar normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcenter: function () {\n\n\t\t// TODO\n\n\t},\n\n\tfromGeometry: function ( geometry, settings ) {\n\n\t\tsettings = settings || { 'vertexColors': THREE.NoColors };\n\n\t\tvar vertices = geometry.vertices;\n\t\tvar faces = geometry.faces;\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\t\tvar vertexColors = settings.vertexColors;\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ].length > 0;\n\t\tvar hasFaceVertexNormals = faces[ 0 ].vertexNormals.length == 3;\n\n\t\tvar positions = new Float32Array( faces.length * 3 * 3 );\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\tvar normals = new Float32Array( faces.length * 3 * 3 );\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\n\t\tif ( vertexColors !== THREE.NoColors ) {\n\n\t\t\tvar colors = new Float32Array( faces.length * 3 * 3 );\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\t\t}\n\n\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\tvar uvs = new Float32Array( faces.length * 3 * 2 );\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0, i2 = 0, i3 = 0; i < faces.length; i ++, i2 += 6, i3 += 9 ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tvar a = vertices[ face.a ];\n\t\t\tvar b = vertices[ face.b ];\n\t\t\tvar c = vertices[ face.c ];\n\n\t\t\tpositions[ i3     ] = a.x;\n\t\t\tpositions[ i3 + 1 ] = a.y;\n\t\t\tpositions[ i3 + 2 ] = a.z;\n\n\t\t\tpositions[ i3 + 3 ] = b.x;\n\t\t\tpositions[ i3 + 4 ] = b.y;\n\t\t\tpositions[ i3 + 5 ] = b.z;\n\n\t\t\tpositions[ i3 + 6 ] = c.x;\n\t\t\tpositions[ i3 + 7 ] = c.y;\n\t\t\tpositions[ i3 + 8 ] = c.z;\n\n\t\t\tif ( hasFaceVertexNormals === true ) {\n\n\t\t\t\tvar na = face.vertexNormals[ 0 ];\n\t\t\t\tvar nb = face.vertexNormals[ 1 ];\n\t\t\t\tvar nc = face.vertexNormals[ 2 ];\n\n\t\t\t\tnormals[ i3     ] = na.x;\n\t\t\t\tnormals[ i3 + 1 ] = na.y;\n\t\t\t\tnormals[ i3 + 2 ] = na.z;\n\n\t\t\t\tnormals[ i3 + 3 ] = nb.x;\n\t\t\t\tnormals[ i3 + 4 ] = nb.y;\n\t\t\t\tnormals[ i3 + 5 ] = nb.z;\n\n\t\t\t\tnormals[ i3 + 6 ] = nc.x;\n\t\t\t\tnormals[ i3 + 7 ] = nc.y;\n\t\t\t\tnormals[ i3 + 8 ] = nc.z;\n\n\t\t\t} else {\n\n\t\t\t\tvar n = face.normal;\n\n\t\t\t\tnormals[ i3     ] = n.x;\n\t\t\t\tnormals[ i3 + 1 ] = n.y;\n\t\t\t\tnormals[ i3 + 2 ] = n.z;\n\n\t\t\t\tnormals[ i3 + 3 ] = n.x;\n\t\t\t\tnormals[ i3 + 4 ] = n.y;\n\t\t\t\tnormals[ i3 + 5 ] = n.z;\n\n\t\t\t\tnormals[ i3 + 6 ] = n.x;\n\t\t\t\tnormals[ i3 + 7 ] = n.y;\n\t\t\t\tnormals[ i3 + 8 ] = n.z;\n\n\t\t\t}\n\n\t\t\tif ( vertexColors === THREE.FaceColors ) {\n\n\t\t\t\tvar fc = face.color;\n\n\t\t\t\tcolors[ i3     ] = fc.r;\n\t\t\t\tcolors[ i3 + 1 ] = fc.g;\n\t\t\t\tcolors[ i3 + 2 ] = fc.b;\n\n\t\t\t\tcolors[ i3 + 3 ] = fc.r;\n\t\t\t\tcolors[ i3 + 4 ] = fc.g;\n\t\t\t\tcolors[ i3 + 5 ] = fc.b;\n\n\t\t\t\tcolors[ i3 + 6 ] = fc.r;\n\t\t\t\tcolors[ i3 + 7 ] = fc.g;\n\t\t\t\tcolors[ i3 + 8 ] = fc.b;\n\n\t\t\t} else if ( vertexColors === THREE.VertexColors ) {\n\n\t\t\t\tvar vca = face.vertexColors[ 0 ];\n\t\t\t\tvar vcb = face.vertexColors[ 1 ];\n\t\t\t\tvar vcc = face.vertexColors[ 2 ];\n\n\t\t\t\tcolors[ i3     ] = vca.r;\n\t\t\t\tcolors[ i3 + 1 ] = vca.g;\n\t\t\t\tcolors[ i3 + 2 ] = vca.b;\n\n\t\t\t\tcolors[ i3 + 3 ] = vcb.r;\n\t\t\t\tcolors[ i3 + 4 ] = vcb.g;\n\t\t\t\tcolors[ i3 + 5 ] = vcb.b;\n\n\t\t\t\tcolors[ i3 + 6 ] = vcc.r;\n\t\t\t\tcolors[ i3 + 7 ] = vcc.g;\n\t\t\t\tcolors[ i3 + 8 ] = vcc.b;\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tvar uva = faceVertexUvs[ 0 ][ i ][ 0 ];\n\t\t\t\tvar uvb = faceVertexUvs[ 0 ][ i ][ 1 ];\n\t\t\t\tvar uvc = faceVertexUvs[ 0 ][ i ][ 2 ];\n\n\t\t\t\tuvs[ i2     ] = uva.x;\n\t\t\t\tuvs[ i2 + 1 ] = uva.y;\n\n\t\t\t\tuvs[ i2 + 2 ] = uvb.x;\n\t\t\t\tuvs[ i2 + 3 ] = uvb.y;\n\n\t\t\t\tuvs[ i2 + 4 ] = uvc.x;\n\t\t\t\tuvs[ i2 + 5 ] = uvc.y;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeBoundingSphere()\n\n\t\treturn this;\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tvar bb = this.boundingBox;\n\t\t\t\tbb.makeEmpty();\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\t\t\t\tbb.expandByPoint( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( positions === undefined || positions.length === 0 ) {\n\n\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\n\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}(),\n\n\tcomputeBoundingSphere: function () {\n\n\t\tvar box = new THREE.Box3();\n\t\tvar vector = new THREE.Vector3();\n\n\t\treturn function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t\t}\n\n\t\t\tvar positions = this.attributes.position.array;\n\n\t\t\tif ( positions ) {\n\n\t\t\t\tbox.makeEmpty();\n\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\t\t\t\tbox.expandByPoint( vector );\n\n\t\t\t\t}\n\n\t\t\t\tbox.center( center );\n\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox:  sqrt(3) smaller in the best case\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\n\n\t\t\t\t\tvector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}(),\n\n\tcomputeFaceNormals: function () {\n\n\t\t// backwards compatibility\n\n\t},\n\n\tcomputeVertexNormals: function () {\n\n\t\tvar attributes = this.attributes;\n\n\t\tif ( attributes.position ) {\n\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tfor ( var i = 0, il = normals.length; i < il; i ++ ) {\n\n\t\t\t\t\tnormals[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar normals = attributes.normal.array;\n\n\t\t\tvar vA, vB, vC,\n\n\t\t\tpA = new THREE.Vector3(),\n\t\t\tpB = new THREE.Vector3(),\n\t\t\tpC = new THREE.Vector3(),\n\n\t\t\tcb = new THREE.Vector3(),\n\t\t\tab = new THREE.Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( attributes.index ) {\n\n\t\t\t\tvar indices = attributes.index.array;\n\n\t\t\t\tvar offsets = ( this.offsets.length > 0 ? this.offsets : [ { start: 0, count: indices.length, index: 0 } ] );\n\n\t\t\t\tfor ( var j = 0, jl = offsets.length; j < jl; ++ j ) {\n\n\t\t\t\t\tvar start = offsets[ j ].start;\n\t\t\t\t\tvar count = offsets[ j ].count;\n\t\t\t\t\tvar index = offsets[ j ].index;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = ( index + indices[ i     ] ) * 3;\n\t\t\t\t\t\tvB = ( index + indices[ i + 1 ] ) * 3;\n\t\t\t\t\t\tvC = ( index + indices[ i + 2 ] ) * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA     ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB     ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC     ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormals[ i     ] = cb.x;\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( this.attributes.index === undefined ||\n\t\t\t this.attributes.position === undefined ||\n\t\t\t this.attributes.normal === undefined ||\n\t\t\t this.attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = this.attributes.index.array;\n\t\tvar positions = this.attributes.position.array;\n\t\tvar normals = this.attributes.normal.array;\n\t\tvar uvs = this.attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( this.attributes.tangent === undefined ) {\n\n\t\t\tthis.addAttribute( 'tangent', new THREE.BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = this.attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var k = 0; k < nVertices; k ++ ) {\n\n\t\t\ttan1[ k ] = new THREE.Vector3();\n\t\t\ttan2[ k ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tvar vA = new THREE.Vector3(),\n\t\t\tvB = new THREE.Vector3(),\n\t\t\tvC = new THREE.Vector3(),\n\n\t\t\tuvA = new THREE.Vector2(),\n\t\t\tuvB = new THREE.Vector2(),\n\t\t\tuvC = new THREE.Vector2(),\n\n\t\t\tx1, x2, y1, y2, z1, z2,\n\t\t\ts1, s2, t1, t2, r;\n\n\t\tvar sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tx1 = vB.x - vA.x;\n\t\t\tx2 = vC.x - vA.x;\n\n\t\t\ty1 = vB.y - vA.y;\n\t\t\ty2 = vC.y - vA.y;\n\n\t\t\tz1 = vB.z - vA.z;\n\t\t\tz2 = vC.z - vA.z;\n\n\t\t\ts1 = uvB.x - uvA.x;\n\t\t\ts2 = uvC.x - uvA.x;\n\n\t\t\tt1 = uvB.y - uvA.y;\n\t\t\tt2 = uvC.y - uvA.y;\n\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\n\n\t\t\tsdir.set(\n\t\t\t\t( t2 * x1 - t1 * x2 ) * r,\n\t\t\t\t( t2 * y1 - t1 * y2 ) * r,\n\t\t\t\t( t2 * z1 - t1 * z2 ) * r\n\t\t\t);\n\n\t\t\ttdir.set(\n\t\t\t\t( s1 * x2 - s2 * x1 ) * r,\n\t\t\t\t( s1 * y2 - s2 * y1 ) * r,\n\t\t\t\t( s1 * z2 - s2 * z1 ) * r\n\t\t\t);\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar i, il;\n\t\tvar j, jl;\n\t\tvar iA, iB, iC;\n\n\t\tif ( this.drawcalls.length === 0 ) {\n\n\t\t\tthis.addDrawCall( 0, indices.length, 0 );\n\n\t\t}\n\n\t\tvar drawcalls = this.drawcalls;\n\n\t\tfor ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {\n\n\t\t\tvar start = drawcalls[ j ].start;\n\t\t\tvar count = drawcalls[ j ].count;\n\t\t\tvar index = drawcalls[ j ].index;\n\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\tiA = index + indices[ i ];\n\t\t\t\tiB = index + indices[ i + 1 ];\n\t\t\t\tiC = index + indices[ i + 2 ];\n\n\t\t\t\thandleTriangle( iA, iB, iC );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\n\t\tvar n = new THREE.Vector3(), n2 = new THREE.Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4     ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {\n\n\t\t\tvar start = drawcalls[ j ].start;\n\t\t\tvar count = drawcalls[ j ].count;\n\t\t\tvar index = drawcalls[ j ].index;\n\n\t\t\tfor ( i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\tiA = index + indices[ i ];\n\t\t\t\tiB = index + indices[ i + 1 ];\n\t\t\t\tiC = index + indices[ i + 2 ];\n\n\t\t\t\thandleVertex( iA );\n\t\t\t\thandleVertex( iB );\n\t\t\t\thandleVertex( iC );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/*\n\t\tcomputeOffsets\n\t\tCompute the draw offset for large models by chunking the index buffer into chunks of 65k addressable vertices.\n\t\tThis method will effectively rewrite the index buffer and remap all attributes to match the new indices.\n\t\tWARNING: This method will also expand the vertex count to prevent sprawled triangles across draw offsets.\n\t\tindexBufferSize - Defaults to 65535, but allows for larger or smaller chunks.\n\t*/\n\tcomputeOffsets: function ( indexBufferSize ) {\n\n\t\tvar size = indexBufferSize;\n\t\tif ( indexBufferSize === undefined )\n\t\t\tsize = 65535; //WebGL limits type of index buffer values to 16-bit.\n\n\t\tvar s = Date.now();\n\n\t\tvar indices = this.attributes.index.array;\n\t\tvar vertices = this.attributes.position.array;\n\n\t\tvar verticesCount = ( vertices.length / 3 );\n\t\tvar facesCount = ( indices.length / 3 );\n\n\t\t/*\n\t\tconsole.log(\"Computing buffers in offsets of \"+size+\" -> indices:\"+indices.length+\" vertices:\"+vertices.length);\n\t\tconsole.log(\"Faces to process: \"+(indices.length/3));\n\t\tconsole.log(\"Reordering \"+verticesCount+\" vertices.\");\n\t\t*/\n\n\t\tvar sortedIndices = new Uint16Array( indices.length ); //16-bit buffers\n\t\tvar indexPtr = 0;\n\t\tvar vertexPtr = 0;\n\n\t\tvar offsets = [ { start:0, count:0, index:0 } ];\n\t\tvar offset = offsets[ 0 ];\n\n\t\tvar duplicatedVertices = 0;\n\t\tvar newVerticeMaps = 0;\n\t\tvar faceVertices = new Int32Array( 6 );\n\t\tvar vertexMap = new Int32Array( vertices.length );\n\t\tvar revVertexMap = new Int32Array( vertices.length );\n\t\tfor ( var j = 0; j < vertices.length; j ++ ) { vertexMap[ j ] = - 1; revVertexMap[ j ] = - 1; }\n\n\t\t/*\n\t\t\tTraverse every face and reorder vertices in the proper offsets of 65k.\n\t\t\tWe can have more than 65k entries in the index buffer per offset, but only reference 65k values.\n\t\t*/\n\t\tfor ( var findex = 0; findex < facesCount; findex ++ ) {\n\t\t\tnewVerticeMaps = 0;\n\n\t\t\tfor ( var vo = 0; vo < 3; vo ++ ) {\n\t\t\t\tvar vid = indices[ findex * 3 + vo ];\n\t\t\t\tif ( vertexMap[ vid ] == - 1 ) {\n\t\t\t\t\t//Unmapped vertice\n\t\t\t\t\tfaceVertices[ vo * 2 ] = vid;\n\t\t\t\t\tfaceVertices[ vo * 2 + 1 ] = - 1;\n\t\t\t\t\tnewVerticeMaps ++;\n\t\t\t\t} else if ( vertexMap[ vid ] < offset.index ) {\n\t\t\t\t\t//Reused vertices from previous block (duplicate)\n\t\t\t\t\tfaceVertices[ vo * 2 ] = vid;\n\t\t\t\t\tfaceVertices[ vo * 2 + 1 ] = - 1;\n\t\t\t\t\tduplicatedVertices ++;\n\t\t\t\t} else {\n\t\t\t\t\t//Reused vertice in the current block\n\t\t\t\t\tfaceVertices[ vo * 2 ] = vid;\n\t\t\t\t\tfaceVertices[ vo * 2 + 1 ] = vertexMap[ vid ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar faceMax = vertexPtr + newVerticeMaps;\n\t\t\tif ( faceMax > ( offset.index + size ) ) {\n\t\t\t\tvar new_offset = { start:indexPtr, count:0, index:vertexPtr };\n\t\t\t\toffsets.push( new_offset );\n\t\t\t\toffset = new_offset;\n\n\t\t\t\t//Re-evaluate reused vertices in light of new offset.\n\t\t\t\tfor ( var v = 0; v < 6; v += 2 ) {\n\t\t\t\t\tvar new_vid = faceVertices[ v + 1 ];\n\t\t\t\t\tif ( new_vid > - 1 && new_vid < offset.index )\n\t\t\t\t\t\tfaceVertices[ v + 1 ] = - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Reindex the face.\n\t\t\tfor ( var v = 0; v < 6; v += 2 ) {\n\t\t\t\tvar vid = faceVertices[ v ];\n\t\t\t\tvar new_vid = faceVertices[ v + 1 ];\n\n\t\t\t\tif ( new_vid === - 1 )\n\t\t\t\t\tnew_vid = vertexPtr ++;\n\n\t\t\t\tvertexMap[ vid ] = new_vid;\n\t\t\t\trevVertexMap[ new_vid ] = vid;\n\t\t\t\tsortedIndices[ indexPtr ++ ] = new_vid - offset.index; //XXX overflows at 16bit\n\t\t\t\toffset.count ++;\n\t\t\t}\n\t\t}\n\n\t\t/* Move all attribute values to map to the new computed indices , also expand the vertice stack to match our new vertexPtr. */\n\t\tthis.reorderBuffers( sortedIndices, revVertexMap, vertexPtr );\n\t\tthis.offsets = offsets;\n\n\t\t/*\n\t\tvar orderTime = Date.now();\n\t\tconsole.log(\"Reorder time: \"+(orderTime-s)+\"ms\");\n\t\tconsole.log(\"Duplicated \"+duplicatedVertices+\" vertices.\");\n\t\tconsole.log(\"Compute Buffers time: \"+(Date.now()-s)+\"ms\");\n\t\tconsole.log(\"Draw offsets: \"+offsets.length);\n\t\t*/\n\n\t\treturn offsets;\n\t},\n\n\tmerge: function () {\n\n\t\tconsole.log( 'BufferGeometry.merge(): TODO' );\n\n\t},\n\n\tnormalizeNormals: function () {\n\n\t\tvar normals = this.attributes.normal.array;\n\n\t\tvar x, y, z, n;\n\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\n\n\t\t\tx = normals[ i ];\n\t\t\ty = normals[ i + 1 ];\n\t\t\tz = normals[ i + 2 ];\n\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tnormals[ i     ] *= n;\n\t\t\tnormals[ i + 1 ] *= n;\n\t\t\tnormals[ i + 2 ] *= n;\n\n\t\t}\n\n\t},\n\n\t/*\n\t\treoderBuffers:\n\t\tReorder attributes based on a new indexBuffer and indexMap.\n\t\tindexBuffer - Uint16Array of the new ordered indices.\n\t\tindexMap - Int32Array where the position is the new vertex ID and the value the old vertex ID for each vertex.\n\t\tvertexCount - Amount of total vertices considered in this reordering (in case you want to grow the vertice stack).\n\t*/\n\treorderBuffers: function ( indexBuffer, indexMap, vertexCount ) {\n\n\t\t/* Create a copy of all attributes for reordering. */\n\t\tvar sortedAttributes = {};\n\t\tfor ( var attr in this.attributes ) {\n\t\t\tif ( attr == 'index' )\n\t\t\t\tcontinue;\n\t\t\tvar sourceArray = this.attributes[ attr ].array;\n\t\t\tsortedAttributes[ attr ] = new sourceArray.constructor( this.attributes[ attr ].itemSize * vertexCount );\n\t\t}\n\n\t\t/* Move attribute positions based on the new index map */\n\t\tfor ( var new_vid = 0; new_vid < vertexCount; new_vid ++ ) {\n\t\t\tvar vid = indexMap[ new_vid ];\n\t\t\tfor ( var attr in this.attributes ) {\n\t\t\t\tif ( attr == 'index' )\n\t\t\t\t\tcontinue;\n\t\t\t\tvar attrArray = this.attributes[ attr ].array;\n\t\t\t\tvar attrSize = this.attributes[ attr ].itemSize;\n\t\t\t\tvar sortedAttr = sortedAttributes[ attr ];\n\t\t\t\tfor ( var k = 0; k < attrSize; k ++ )\n\t\t\t\t\tsortedAttr[ new_vid * attrSize + k ] = attrArray[ vid * attrSize + k ];\n\t\t\t}\n\t\t}\n\n\t\t/* Carry the new sorted buffers locally */\n\t\tthis.attributes[ 'index' ].array = indexBuffer;\n\t\tfor ( var attr in this.attributes ) {\n\t\t\tif ( attr == 'index' )\n\t\t\t\tcontinue;\n\t\t\tthis.attributes[ attr ].array = sortedAttributes[ attr ];\n\t\t\tthis.attributes[ attr ].numItems = this.attributes[ attr ].itemSize * vertexCount;\n\t\t}\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.0,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometryExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tdata: {\n\t\t\t\tattributes: {}\n\t\t\t}\n\t\t};\n\n\t\tvar attributes = this.attributes;\n\t\tvar offsets = this.offsets;\n\t\tvar boundingSphere = this.boundingSphere;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tvar array = [], typeArray = attribute.array;\n\n\t\t\tfor ( var i = 0, l = typeArray.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = typeArray[ i ];\n\n\t\t\t}\n\n\t\t\toutput.data.attributes[ key ] = {\n\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\tarray: array\n\t\t\t}\n\n\t\t}\n\n\t\tif ( offsets.length > 0 ) {\n\n\t\t\toutput.data.offsets = JSON.parse( JSON.stringify( offsets ) );\n\n\t\t}\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\toutput.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t}\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tfor ( var attr in this.attributes ) {\n\n\t\t\tvar sourceAttr = this.attributes[ attr ];\n\t\t\tgeometry.addAttribute( attr, sourceAttr.clone() );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.offsets.length; i < il; i ++ ) {\n\n\t\t\tvar offset = this.offsets[ i ];\n\n\t\t\tgeometry.offsets.push( {\n\n\t\t\t\tstart: offset.start,\n\t\t\t\tindex: offset.index,\n\t\t\t\tcount: offset.count\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\n\n// File:src/core/Geometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://exocortex.com\n */\n\nTHREE.Geometry = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Geometry';\n\n\tthis.vertices = [];\n\tthis.colors = [];  // one-to-one vertex colors, used in Points and Line\n\n\tthis.faces = [];\n\n\tthis.faceVertexUvs = [ [] ];\n\n\tthis.morphTargets = [];\n\tthis.morphColors = [];\n\tthis.morphNormals = [];\n\n\tthis.skinWeights = [];\n\tthis.skinIndices = [];\n\n\tthis.lineDistances = [];\n\n\tthis.boundingBox = null;\n\tthis.boundingSphere = null;\n\n\tthis.hasTangents = false;\n\n\tthis.dynamic = true; // the intermediate typed arrays will be deleted when set to false\n\n\t// update flags\n\n\tthis.verticesNeedUpdate = false;\n\tthis.elementsNeedUpdate = false;\n\tthis.uvsNeedUpdate = false;\n\tthis.normalsNeedUpdate = false;\n\tthis.tangentsNeedUpdate = false;\n\tthis.colorsNeedUpdate = false;\n\tthis.lineDistancesNeedUpdate = false;\n\n\tthis.groupsNeedUpdate = false;\n\n};\n\nTHREE.Geometry.prototype = {\n\n\tconstructor: THREE.Geometry,\n\n\tapplyMatrix: function ( matrix ) {\n\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox instanceof THREE.Box3 ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere instanceof THREE.Sphere ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t},\n\n\tfromBufferGeometry: function ( geometry ) {\n\n\t\tvar scope = this;\n\n\t\tvar attributes = geometry.attributes;\n\n\t\tvar vertices = attributes.position.array;\n\t\tvar indices = attributes.index !== undefined ? attributes.index.array : undefined;\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\n\t\tvar tempNormals = [];\n\t\tvar tempUVs = [];\n\n\t\tfor ( var i = 0, j = 0; i < vertices.length; i += 3, j += 2 ) {\n\n\t\t\tscope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar addFace = function ( a, b, c ) {\n\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\tscope.faces.push( new THREE.Face3( a, b, c, vertexNormals, vertexColors ) );\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ], tempUVs[ b ], tempUVs[ c ] ] );\n\n\t\t};\n\n\t\tif ( indices !== undefined ) {\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < vertices.length / 3; i += 3 ) {\n\n\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t}\n\n\t\t}\n\t\t\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tcenter: function () {\n\n\t\tthis.computeBoundingBox();\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\toffset.addVectors( this.boundingBox.min, this.boundingBox.max );\n\t\toffset.multiplyScalar( - 0.5 );\n\n\t\tthis.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );\n\t\tthis.computeBoundingBox();\n\n\t\treturn offset;\n\n\t},\n\n\tcomputeFaceNormals: function () {\n\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\n\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = this.faces[ f ];\n\n\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t},\n\n\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\tvar v, vl, f, fl, face, vertices;\n\n\t\tvertices = new Array( this.vertices.length );\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tvar vA, vB, vC, vD;\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3(),\n\t\t\t\tdb = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.vertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\tface.vertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\tface.vertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t}\n\n\t},\n\n\tcomputeMorphNormals: function () {\n\n\t\tvar i, il, f, fl, face;\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tvar tmpGeo = new THREE.Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t},\n\n\tcomputeTangents: function () {\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// tangents go to vertices\n\n\t\tvar f, fl, v, vl, i, il, vertexIndex,\n\t\t\tface, uv, vA, vB, vC, uvA, uvB, uvC,\n\t\t\tx1, x2, y1, y2, z1, z2,\n\t\t\ts1, s2, t1, t2, r, t, test,\n\t\t\ttan1 = [], tan2 = [],\n\t\t\tsdir = new THREE.Vector3(), tdir = new THREE.Vector3(),\n\t\t\ttmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),\n\t\t\tn = new THREE.Vector3(), w;\n\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\ttan1[ v ] = new THREE.Vector3();\n\t\t\ttan2[ v ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tfunction handleTriangle( context, a, b, c, ua, ub, uc ) {\n\n\t\t\tvA = context.vertices[ a ];\n\t\t\tvB = context.vertices[ b ];\n\t\t\tvC = context.vertices[ c ];\n\n\t\t\tuvA = uv[ ua ];\n\t\t\tuvB = uv[ ub ];\n\t\t\tuvC = uv[ uc ];\n\n\t\t\tx1 = vB.x - vA.x;\n\t\t\tx2 = vC.x - vA.x;\n\t\t\ty1 = vB.y - vA.y;\n\t\t\ty2 = vC.y - vA.y;\n\t\t\tz1 = vB.z - vA.z;\n\t\t\tz2 = vC.z - vA.z;\n\n\t\t\ts1 = uvB.x - uvA.x;\n\t\t\ts2 = uvC.x - uvA.x;\n\t\t\tt1 = uvB.y - uvA.y;\n\t\t\tt2 = uvC.y - uvA.y;\n\n\t\t\tr = 1.0 / ( s1 * t2 - s2 * t1 );\n\t\t\tsdir.set( ( t2 * x1 - t1 * x2 ) * r,\n\t\t\t\t\t  ( t2 * y1 - t1 * y2 ) * r,\n\t\t\t\t\t  ( t2 * z1 - t1 * z2 ) * r );\n\t\t\ttdir.set( ( s1 * x2 - s2 * x1 ) * r,\n\t\t\t\t\t  ( s1 * y2 - s2 * y1 ) * r,\n\t\t\t\t\t  ( s1 * z2 - s2 * z1 ) * r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\t\t\tuv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents\n\n\t\t\thandleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );\n\n\t\t}\n\n\t\tvar faceIndex = [ 'a', 'b', 'c', 'd' ];\n\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tface = this.faces[ f ];\n\n\t\t\tfor ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i ++ ) {\n\n\t\t\t\tn.copy( face.vertexNormals[ i ] );\n\n\t\t\t\tvertexIndex = face[ faceIndex[ i ] ];\n\n\t\t\t\tt = tan1[ vertexIndex ];\n\n\t\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy( t );\n\t\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t\t// Calculate handedness\n\n\t\t\t\ttmp2.crossVectors( face.vertexNormals[ i ], t );\n\t\t\t\ttest = tmp2.dot( tan2[ vertexIndex ] );\n\t\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\t\tface.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.hasTangents = true;\n\n\t},\n\n\tcomputeLineDistances: function () {\n\n\t\tvar d = 0;\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.lineDistances[ i ] = d;\n\n\t\t}\n\n\t},\n\n\tcomputeBoundingBox: function () {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new THREE.Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t},\n\n\tcomputeBoundingSphere: function () {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new THREE.Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t},\n\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar normalMatrix,\n\t\tvertexOffset = this.vertices.length,\n\t\tvertices1 = this.vertices,\n\t\tvertices2 = geometry.vertices,\n\t\tfaces1 = this.faces,\n\t\tfaces2 = geometry.faces,\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\n\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\tif ( uv === undefined ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\n\n\t\t\t}\n\n\t\t\tuvs1.push( uvCopy );\n\n\t\t}\n\n\t},\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices: function () {\n\n\t\tvar verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)\n\t\tvar unique = [], changes = [];\n\n\t\tvar v, key;\n\t\tvar precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001\n\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\tvar i,il, face;\n\t\tvar indices, k, j, jl, u;\n\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tv = this.vertices[ i ];\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t};\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tvar faceIndicesToRemove = [];\n\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tface = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\tvar dupIndex = - 1;\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\t\t\t\tif ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tdupIndex = n;\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tvar diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.0,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometryExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type\n\t\t};\n\n\t\tif ( this.name !== \"\" ) output.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tvar parameters = this.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) output[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tvar vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tvar faces = [];\n\t\tvar normals = [];\n\t\tvar normalsHash = {};\n\t\tvar colors = [];\n\t\tvar colorsHash = {};\n\t\tvar uvs = [];\n\t\tvar uvsHash = {};\n\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tvar face = this.faces[ i ];\n\n\t\t\tvar hasMaterial = false; // face.materialIndex !== undefined;\n\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tvar faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 );\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\n\n\t\t\t/*\n\t\t\tif ( hasMaterial ) {\n\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t}\n\t\t\t*/\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\toutput.data = {};\n\n\t\toutput.data.vertices = vertices;\n\t\toutput.data.normals = normals;\n\t\tif ( colors.length > 0 ) output.data.colors = colors;\n\t\tif ( uvs.length > 0 ) output.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\toutput.data.faces = faces;\n\n\t\t//\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar geometry = new THREE.Geometry();\n\n\t\tvar vertices = this.vertices;\n\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tgeometry.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\tvar faces = this.faces;\n\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tgeometry.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\t\tfor ( var i = 0, il = uvs.length; i < il; i ++ ) {\n\n\t\t\tvar uv = uvs[ i ], uvCopy = [];\n\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\tuvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );\n\n\t\t\t}\n\n\t\t\tgeometry.faceVertexUvs[ 0 ].push( uvCopy );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\n\nTHREE.GeometryIdCount = 0;\n\n// File:src/cameras/Camera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.Camera = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new THREE.Matrix4();\n\tthis.projectionMatrix = new THREE.Matrix4();\n\n};\n\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Camera.prototype.getWorldDirection = function () {\n\n\tvar quaternion = new THREE.Quaternion();\n\n\treturn function ( optionalTarget ) {\n\n\t\tvar result = optionalTarget || new THREE.Vector3();\n\n\t\tthis.getWorldQuaternion( quaternion );\n\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t}\n\n}();\n\nTHREE.Camera.prototype.lookAt = function () {\n\n\t// This routine does not support cameras with rotated and/or translated parent(s)\n\n\tvar m1 = new THREE.Matrix4();\n\n\treturn function ( vector ) {\n\n\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t};\n\n}();\n\nTHREE.Camera.prototype.clone = function ( camera ) {\n\n\tif ( camera === undefined ) camera = new THREE.Camera();\n\n\tTHREE.Object3D.prototype.clone.call( this, camera );\n\n\tcamera.matrixWorldInverse.copy( this.matrixWorldInverse );\n\tcamera.projectionMatrix.copy( this.projectionMatrix );\n\n\treturn camera;\n};\n\n// File:src/cameras/CubeCamera.js\n\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'CubeCamera';\n\n\tvar fov = 90, aspect = 1;\n\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPX.up.set( 0, - 1, 0 );\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\n\tthis.add( cameraPX );\n\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNX.up.set( 0, - 1, 0 );\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\n\tthis.add( cameraNX );\n\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPY.up.set( 0, 0, 1 );\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\n\tthis.add( cameraPY );\n\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNY.up.set( 0, 0, - 1 );\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\n\tthis.add( cameraNY );\n\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraPZ.up.set( 0, - 1, 0 );\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\n\tthis.add( cameraPZ );\n\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\n\tcameraNZ.up.set( 0, - 1, 0 );\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\n\tthis.add( cameraNZ );\n\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );\n\n\tthis.updateCubeMap = function ( renderer, scene ) {\n\n\t\tvar renderTarget = this.renderTarget;\n\t\tvar generateMipmaps = renderTarget.generateMipmaps;\n\n\t\trenderTarget.generateMipmaps = false;\n\n\t\trenderTarget.activeCubeFace = 0;\n\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 1;\n\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 2;\n\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 3;\n\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\trenderTarget.activeCubeFace = 4;\n\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\trenderTarget.generateMipmaps = generateMipmaps;\n\n\t\trenderTarget.activeCubeFace = 5;\n\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t};\n\n};\n\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\n\n// File:src/cameras/OrthographicCamera.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'OrthographicCamera';\n\n\tthis.zoom = 1;\n\n\tthis.left = left;\n\tthis.right = right;\n\tthis.top = top;\n\tthis.bottom = bottom;\n\n\tthis.near = ( near !== undefined ) ? near : 0.1;\n\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\n\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\n\n\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\tvar cx = ( this.right + this.left ) / 2;\n\tvar cy = ( this.top + this.bottom ) / 2;\n\n\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\n\n};\n\nTHREE.OrthographicCamera.prototype.clone = function () {\n\n\tvar camera = new THREE.OrthographicCamera();\n\n\tTHREE.Camera.prototype.clone.call( this, camera );\n\n\tcamera.zoom = this.zoom;\n\n\tcamera.left = this.left;\n\tcamera.right = this.right;\n\tcamera.top = this.top;\n\tcamera.bottom = this.bottom;\n\n\tcamera.near = this.near;\n\tcamera.far = this.far;\n\n\tcamera.projectionMatrix.copy( this.projectionMatrix );\n\n\treturn camera;\n};\n\n// File:src/cameras/PerspectiveCamera.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\n\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\n\n\tTHREE.Camera.call( this );\n\n\tthis.type = 'PerspectiveCamera';\n\n\tthis.zoom = 1;\n\n\tthis.fov = fov !== undefined ? fov : 50;\n\tthis.aspect = aspect !== undefined ? aspect : 1;\n\tthis.near = near !== undefined ? near : 0.1;\n\tthis.far = far !== undefined ? far : 2000;\n\n\tthis.updateProjectionMatrix();\n\n};\n\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\n\n\n/**\n * Uses Focal Length (in mm) to estimate and set FOV\n * 35mm (fullframe) camera is used if frame size is not specified;\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\n */\n\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\n\n\tif ( frameHeight === undefined ) frameHeight = 24;\n\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\n\tthis.updateProjectionMatrix();\n\n}\n\n\n/**\n * Sets an offset in a larger frustum. This is useful for multi-window or\n * multi-monitor/multi-machine setups.\n *\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n * the monitors are in grid like this\n *\n *   +---+---+---+\n *   | A | B | C |\n *   +---+---+---+\n *   | D | E | F |\n *   +---+---+---+\n *\n * then for each monitor you would call it like this\n *\n *   var w = 1920;\n *   var h = 1080;\n *   var fullWidth = w * 3;\n *   var fullHeight = h * 2;\n *\n *   --A--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n *   --B--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n *   --C--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n *   --D--\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n *   --E--\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n *   --F--\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n *\n *   Note there is no reason monitors have to be the same size or in a grid.\n */\n\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\tthis.fullWidth = fullWidth;\n\tthis.fullHeight = fullHeight;\n\tthis.x = x;\n\tthis.y = y;\n\tthis.width = width;\n\tthis.height = height;\n\n\tthis.updateProjectionMatrix();\n\n};\n\n\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\n\n\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\n\n\tif ( this.fullWidth ) {\n\n\t\tvar aspect = this.fullWidth / this.fullHeight;\n\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\n\t\tvar bottom = - top;\n\t\tvar left = aspect * bottom;\n\t\tvar right = aspect * top;\n\t\tvar width = Math.abs( right - left );\n\t\tvar height = Math.abs( top - bottom );\n\n\t\tthis.projectionMatrix.makeFrustum(\n\t\t\tleft + this.x * width / this.fullWidth,\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\n\t\t\ttop - this.y * height / this.fullHeight,\n\t\t\tthis.near,\n\t\t\tthis.far\n\t\t);\n\n\t} else {\n\n\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\n\n\t}\n\n};\n\nTHREE.PerspectiveCamera.prototype.clone = function () {\n\n\tvar camera = new THREE.PerspectiveCamera();\n\n\tTHREE.Camera.prototype.clone.call( this, camera );\n\n\tcamera.zoom = this.zoom;\n\n\tcamera.fov = this.fov;\n\tcamera.aspect = this.aspect;\n\tcamera.near = this.near;\n\tcamera.far = this.far;\n\n\tcamera.projectionMatrix.copy( this.projectionMatrix );\n\n\treturn camera;\n\n};\n\n// File:src/lights/Light.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Light = function ( color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Light';\n\t\n\tthis.color = new THREE.Color( color );\n\n};\n\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Light.prototype.clone = function ( light ) {\n\n\tif ( light === undefined ) light = new THREE.Light();\n\n\tTHREE.Object3D.prototype.clone.call( this, light );\n\n\tlight.color.copy( this.color );\n\n\treturn light;\n\n};\n\n// File:src/lights/AmbientLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AmbientLight = function ( color ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'AmbientLight';\n\n};\n\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.AmbientLight.prototype.clone = function () {\n\n\tvar light = new THREE.AmbientLight();\n\n\tTHREE.Light.prototype.clone.call( this, light );\n\n\treturn light;\n\n};\n\n// File:src/lights/AreaLight.js\n\n/**\n * @author MPanknin / http://www.redplant.de/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.AreaLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'AreaLight';\n\n\tthis.normal = new THREE.Vector3( 0, - 1, 0 );\n\tthis.right = new THREE.Vector3( 1, 0, 0 );\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n\tthis.width = 1.0;\n\tthis.height = 1.0;\n\n\tthis.constantAttenuation = 1.5;\n\tthis.linearAttenuation = 0.5;\n\tthis.quadraticAttenuation = 0.1;\n\n};\n\nTHREE.AreaLight.prototype = Object.create( THREE.Light.prototype );\n\n\n// File:src/lights/DirectionalLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DirectionalLight = function ( color, intensity ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'DirectionalLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.target = new THREE.Object3D();\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n\tthis.castShadow = false;\n\tthis.onlyShadow = false;\n\n\t//\n\n\tthis.shadowCameraNear = 50;\n\tthis.shadowCameraFar = 5000;\n\n\tthis.shadowCameraLeft = - 500;\n\tthis.shadowCameraRight = 500;\n\tthis.shadowCameraTop = 500;\n\tthis.shadowCameraBottom = - 500;\n\n\tthis.shadowCameraVisible = false;\n\n\tthis.shadowBias = 0;\n\tthis.shadowDarkness = 0.5;\n\n\tthis.shadowMapWidth = 512;\n\tthis.shadowMapHeight = 512;\n\n\t//\n\n\tthis.shadowCascade = false;\n\n\tthis.shadowCascadeOffset = new THREE.Vector3( 0, 0, - 1000 );\n\tthis.shadowCascadeCount = 2;\n\n\tthis.shadowCascadeBias = [ 0, 0, 0 ];\n\tthis.shadowCascadeWidth = [ 512, 512, 512 ];\n\tthis.shadowCascadeHeight = [ 512, 512, 512 ];\n\n\tthis.shadowCascadeNearZ = [ - 1.000, 0.990, 0.998 ];\n\tthis.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];\n\n\tthis.shadowCascadeArray = [];\n\n\t//\n\n\tthis.shadowMap = null;\n\tthis.shadowMapSize = null;\n\tthis.shadowCamera = null;\n\tthis.shadowMatrix = null;\n\n};\n\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.DirectionalLight.prototype.clone = function () {\n\n\tvar light = new THREE.DirectionalLight();\n\n\tTHREE.Light.prototype.clone.call( this, light );\n\n\tlight.target = this.target.clone();\n\n\tlight.intensity = this.intensity;\n\n\tlight.castShadow = this.castShadow;\n\tlight.onlyShadow = this.onlyShadow;\n\n\t//\n\n\tlight.shadowCameraNear = this.shadowCameraNear;\n\tlight.shadowCameraFar = this.shadowCameraFar;\n\n\tlight.shadowCameraLeft = this.shadowCameraLeft;\n\tlight.shadowCameraRight = this.shadowCameraRight;\n\tlight.shadowCameraTop = this.shadowCameraTop;\n\tlight.shadowCameraBottom = this.shadowCameraBottom;\n\n\tlight.shadowCameraVisible = this.shadowCameraVisible;\n\n\tlight.shadowBias = this.shadowBias;\n\tlight.shadowDarkness = this.shadowDarkness;\n\n\tlight.shadowMapWidth = this.shadowMapWidth;\n\tlight.shadowMapHeight = this.shadowMapHeight;\n\n\t//\n\n\tlight.shadowCascade = this.shadowCascade;\n\n\tlight.shadowCascadeOffset.copy( this.shadowCascadeOffset );\n\tlight.shadowCascadeCount = this.shadowCascadeCount;\n\n\tlight.shadowCascadeBias = this.shadowCascadeBias.slice( 0 );\n\tlight.shadowCascadeWidth = this.shadowCascadeWidth.slice( 0 );\n\tlight.shadowCascadeHeight = this.shadowCascadeHeight.slice( 0 );\n\n\tlight.shadowCascadeNearZ = this.shadowCascadeNearZ.slice( 0 );\n\tlight.shadowCascadeFarZ  = this.shadowCascadeFarZ.slice( 0 );\n\n\treturn light;\n\n};\n\n// File:src/lights/HemisphereLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\n\n\tTHREE.Light.call( this, skyColor );\n\n\tthis.type = 'HemisphereLight';\n\n\tthis.position.set( 0, 100, 0 );\n\n\tthis.groundColor = new THREE.Color( groundColor );\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\n};\n\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.HemisphereLight.prototype.clone = function () {\n\n\tvar light = new THREE.HemisphereLight();\n\n\tTHREE.Light.prototype.clone.call( this, light );\n\n\tlight.groundColor.copy( this.groundColor );\n\tlight.intensity = this.intensity;\n\n\treturn light;\n\n};\n\n// File:src/lights/PointLight.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLight = function ( color, intensity, distance ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'PointLight';\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\n};\n\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.PointLight.prototype.clone = function () {\n\n\tvar light = new THREE.PointLight();\n\n\tTHREE.Light.prototype.clone.call( this, light );\n\n\tlight.intensity = this.intensity;\n\tlight.distance = this.distance;\n\n\treturn light;\n\n};\n\n// File:src/lights/SpotLight.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpotLight = function ( color, intensity, distance, angle, exponent ) {\n\n\tTHREE.Light.call( this, color );\n\n\tthis.type = 'SpotLight';\n\n\tthis.position.set( 0, 1, 0 );\n\tthis.target = new THREE.Object3D();\n\n\tthis.intensity = ( intensity !== undefined ) ? intensity : 1;\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\tthis.exponent = ( exponent !== undefined ) ? exponent : 10;\n\n\tthis.castShadow = false;\n\tthis.onlyShadow = false;\n\n\t//\n\n\tthis.shadowCameraNear = 50;\n\tthis.shadowCameraFar = 5000;\n\tthis.shadowCameraFov = 50;\n\n\tthis.shadowCameraVisible = false;\n\n\tthis.shadowBias = 0;\n\tthis.shadowDarkness = 0.5;\n\n\tthis.shadowMapWidth = 512;\n\tthis.shadowMapHeight = 512;\n\n\t//\n\n\tthis.shadowMap = null;\n\tthis.shadowMapSize = null;\n\tthis.shadowCamera = null;\n\tthis.shadowMatrix = null;\n\n};\n\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\n\nTHREE.SpotLight.prototype.clone = function () {\n\n\tvar light = new THREE.SpotLight();\n\n\tTHREE.Light.prototype.clone.call( this, light );\n\n\tlight.target = this.target.clone();\n\n\tlight.intensity = this.intensity;\n\tlight.distance = this.distance;\n\tlight.angle = this.angle;\n\tlight.exponent = this.exponent;\n\n\tlight.castShadow = this.castShadow;\n\tlight.onlyShadow = this.onlyShadow;\n\n\t//\n\n\tlight.shadowCameraNear = this.shadowCameraNear;\n\tlight.shadowCameraFar = this.shadowCameraFar;\n\tlight.shadowCameraFov = this.shadowCameraFov;\n\n\tlight.shadowCameraVisible = this.shadowCameraVisible;\n\n\tlight.shadowBias = this.shadowBias;\n\tlight.shadowDarkness = this.shadowDarkness;\n\n\tlight.shadowMapWidth = this.shadowMapWidth;\n\tlight.shadowMapHeight = this.shadowMapHeight;\n\n\treturn light;\n\n};\n\n// File:src/loaders/Cache.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Cache = function () {\n\n\tthis.files = {};\n\n};\n\nTHREE.Cache.prototype = {\n\n\tconstructor: THREE.Cache,\n\n\tadd: function ( key, file ) {\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {}\n\n\t}\n\n};\n\n// File:src/loaders/Loader.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Loader = function ( showStatus ) {\n\n\tthis.showStatus = showStatus;\n\tthis.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;\n\n\tthis.imageLoader = new THREE.ImageLoader();\n\n\tthis.onLoadStart = function () {};\n\tthis.onLoadProgress = function () {};\n\tthis.onLoadComplete = function () {};\n\n};\n\nTHREE.Loader.prototype = {\n\n\tconstructor: THREE.Loader,\n\n\tcrossOrigin: undefined,\n\n\taddStatusElement: function () {\n\n\t\tvar e = document.createElement( 'div' );\n\n\t\te.style.position = 'absolute';\n\t\te.style.right = '0px';\n\t\te.style.top = '0px';\n\t\te.style.fontSize = '0.8em';\n\t\te.style.textAlign = 'left';\n\t\te.style.background = 'rgba(0,0,0,0.25)';\n\t\te.style.color = '#fff';\n\t\te.style.width = '120px';\n\t\te.style.padding = '0.5em 0.5em 0.5em 0.5em';\n\t\te.style.zIndex = 1000;\n\n\t\te.innerHTML = 'Loading ...';\n\n\t\treturn e;\n\n\t},\n\n\tupdateProgress: function ( progress ) {\n\n\t\tvar message = 'Loaded ';\n\n\t\tif ( progress.total ) {\n\n\t\t\tmessage += ( 100 * progress.loaded / progress.total ).toFixed( 0 ) + '%';\n\n\n\t\t} else {\n\n\t\t\tmessage += ( progress.loaded / 1024 ).toFixed( 2 ) + ' KB';\n\n\t\t}\n\n\t\tthis.statusDomElement.innerHTML = message;\n\n\t},\n\n\textractUrlBase: function ( url ) {\n\n\t\tvar parts = url.split( '/' );\n\n\t\tif ( parts.length === 1 ) return './';\n\n\t\tparts.pop();\n\n\t\treturn parts.join( '/' ) + '/';\n\n\t},\n\n\tinitMaterials: function ( materials, texturePath ) {\n\n\t\tvar array = [];\n\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath );\n\n\t\t}\n\n\t\treturn array;\n\n\t},\n\n\tneedsTangents: function ( materials ) {\n\n\t\tfor ( var i = 0, il = materials.length; i < il; i ++ ) {\n\n\t\t\tvar m = materials[ i ];\n\n\t\t\tif ( m instanceof THREE.ShaderMaterial ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t},\n\n\tcreateMaterial: function ( m, texturePath ) {\n\n\t\tvar scope = this;\n\n\t\tfunction nearest_pow2( n ) {\n\n\t\t\tvar l = Math.log( n ) / Math.LN2;\n\t\t\treturn Math.pow( 2, Math.round(  l ) );\n\n\t\t}\n\n\t\tfunction create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {\n\n\t\t\tvar fullPath = texturePath + sourceFile;\n\n\t\t\tvar texture;\n\n\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\n\n\t\t\tif ( loader !== null ) {\n\n\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t} else {\n\n\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\tloader = scope.imageLoader;\n\t\t\t\tloader.crossOrigin = scope.crossOrigin;\n\t\t\t\tloader.load( fullPath, function ( image ) {\n\n\t\t\t\t\tif ( THREE.Math.isPowerOfTwo( image.width ) === false ||\n\t\t\t\t\t\t THREE.Math.isPowerOfTwo( image.height ) === false ) {\n\n\t\t\t\t\t\tvar width = nearest_pow2( image.width );\n\t\t\t\t\t\tvar height = nearest_pow2( image.height );\n\n\t\t\t\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\t\tcanvas.height = height;\n\n\t\t\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\t\t\ttexture.image = canvas;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\ttexture.sourceFile = sourceFile;\n\n\t\t\tif ( repeat ) {\n\n\t\t\t\ttexture.repeat.set( repeat[ 0 ], repeat[ 1 ] );\n\n\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\n\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\n\n\t\t\t}\n\n\t\t\tif ( offset ) {\n\n\t\t\t\ttexture.offset.set( offset[ 0 ], offset[ 1 ] );\n\n\t\t\t}\n\n\t\t\tif ( wrap ) {\n\n\t\t\t\tvar wrapMap = {\n\t\t\t\t\t'repeat': THREE.RepeatWrapping,\n\t\t\t\t\t'mirror': THREE.MirroredRepeatWrapping\n\t\t\t\t}\n\n\t\t\t\tif ( wrapMap[ wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ wrap[ 0 ] ];\n\t\t\t\tif ( wrapMap[ wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ wrap[ 1 ] ];\n\n\t\t\t}\n\n\t\t\tif ( anisotropy ) {\n\n\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t}\n\n\t\t\twhere[ name ] = texture;\n\n\t\t}\n\n\t\tfunction rgb2hex( rgb ) {\n\n\t\t\treturn ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;\n\n\t\t}\n\n\t\t// defaults\n\n\t\tvar mtype = 'MeshLambertMaterial';\n\t\tvar mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };\n\n\t\t// parameters from model file\n\n\t\tif ( m.shading ) {\n\n\t\t\tvar shading = m.shading.toLowerCase();\n\n\t\t\tif ( shading === 'phong' ) mtype = 'MeshPhongMaterial';\n\t\t\telse if ( shading === 'basic' ) mtype = 'MeshBasicMaterial';\n\n\t\t}\n\n\t\tif ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {\n\n\t\t\tmpars.blending = THREE[ m.blending ];\n\n\t\t}\n\n\t\tif ( m.transparent !== undefined || m.opacity < 1.0 ) {\n\n\t\t\tmpars.transparent = m.transparent;\n\n\t\t}\n\n\t\tif ( m.depthTest !== undefined ) {\n\n\t\t\tmpars.depthTest = m.depthTest;\n\n\t\t}\n\n\t\tif ( m.depthWrite !== undefined ) {\n\n\t\t\tmpars.depthWrite = m.depthWrite;\n\n\t\t}\n\n\t\tif ( m.visible !== undefined ) {\n\n\t\t\tmpars.visible = m.visible;\n\n\t\t}\n\n\t\tif ( m.flipSided !== undefined ) {\n\n\t\t\tmpars.side = THREE.BackSide;\n\n\t\t}\n\n\t\tif ( m.doubleSided !== undefined ) {\n\n\t\t\tmpars.side = THREE.DoubleSide;\n\n\t\t}\n\n\t\tif ( m.wireframe !== undefined ) {\n\n\t\t\tmpars.wireframe = m.wireframe;\n\n\t\t}\n\n\t\tif ( m.vertexColors !== undefined ) {\n\n\t\t\tif ( m.vertexColors === 'face' ) {\n\n\t\t\t\tmpars.vertexColors = THREE.FaceColors;\n\n\t\t\t} else if ( m.vertexColors ) {\n\n\t\t\t\tmpars.vertexColors = THREE.VertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// colors\n\n\t\tif ( m.colorDiffuse ) {\n\n\t\t\tmpars.color = rgb2hex( m.colorDiffuse );\n\n\t\t} else if ( m.DbgColor ) {\n\n\t\t\tmpars.color = m.DbgColor;\n\n\t\t}\n\n\t\tif ( m.colorSpecular ) {\n\n\t\t\tmpars.specular = rgb2hex( m.colorSpecular );\n\n\t\t}\n\n\t\tif ( m.colorAmbient ) {\n\n\t\t\tmpars.ambient = rgb2hex( m.colorAmbient );\n\n\t\t}\n\n\t\tif ( m.colorEmissive ) {\n\n\t\t\tmpars.emissive = rgb2hex( m.colorEmissive );\n\n\t\t}\n\n\t\t// modifiers\n\n\t\tif ( m.transparency ) {\n\n\t\t\tmpars.opacity = m.transparency;\n\n\t\t}\n\n\t\tif ( m.specularCoef ) {\n\n\t\t\tmpars.shininess = m.specularCoef;\n\n\t\t}\n\n\t\t// textures\n\n\t\tif ( m.mapDiffuse && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'map', m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\n\t\t}\n\n\t\tif ( m.mapLight && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'lightMap', m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\n\t\t}\n\n\t\tif ( m.mapBump && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'bumpMap', m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\n\t\t}\n\n\t\tif ( m.mapNormal && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'normalMap', m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\n\t\t}\n\n\t\tif ( m.mapSpecular && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'specularMap', m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\n\t\t}\n\n\t\tif ( m.mapAlpha && texturePath ) {\n\n\t\t\tcreate_texture( mpars, 'alphaMap', m.mapAlpha, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( m.mapBumpScale ) {\n\n\t\t\tmpars.bumpScale = m.mapBumpScale;\n\n\t\t}\n\n\t\t// special case for normal mapped material\n\n\t\tif ( m.mapNormal ) {\n\n\t\t\tvar shader = THREE.ShaderLib[ 'normalmap' ];\n\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\tuniforms[ 'tNormal' ].value = mpars.normalMap;\n\n\t\t\tif ( m.mapNormalFactor ) {\n\n\t\t\t\tuniforms[ 'uNormalScale' ].value.set( m.mapNormalFactor, m.mapNormalFactor );\n\n\t\t\t}\n\n\t\t\tif ( mpars.map ) {\n\n\t\t\t\tuniforms[ 'tDiffuse' ].value = mpars.map;\n\t\t\t\tuniforms[ 'enableDiffuse' ].value = true;\n\n\t\t\t}\n\n\t\t\tif ( mpars.specularMap ) {\n\n\t\t\t\tuniforms[ 'tSpecular' ].value = mpars.specularMap;\n\t\t\t\tuniforms[ 'enableSpecular' ].value = true;\n\n\t\t\t}\n\n\t\t\tif ( mpars.lightMap ) {\n\n\t\t\t\tuniforms[ 'tAO' ].value = mpars.lightMap;\n\t\t\t\tuniforms[ 'enableAO' ].value = true;\n\n\t\t\t}\n\n\t\t\t// for the moment don't handle displacement texture\n\n\t\t\tuniforms[ 'diffuse' ].value.setHex( mpars.color );\n\t\t\tuniforms[ 'specular' ].value.setHex( mpars.specular );\n\t\t\tuniforms[ 'ambient' ].value.setHex( mpars.ambient );\n\n\t\t\tuniforms[ 'shininess' ].value = mpars.shininess;\n\n\t\t\tif ( mpars.opacity !== undefined ) {\n\n\t\t\t\tuniforms[ 'opacity' ].value = mpars.opacity;\n\n\t\t\t}\n\n\t\t\tvar parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };\n\t\t\tvar material = new THREE.ShaderMaterial( parameters );\n\n\t\t\tif ( mpars.transparent ) {\n\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar material = new THREE[ mtype ]( mpars );\n\n\t\t}\n\n\t\tif ( m.DbgName !== undefined ) material.name = m.DbgName;\n\n\t\treturn material;\n\n\t}\n\n};\n\nTHREE.Loader.Handlers = {\n\n\thandlers: [],\n\n\tadd: function ( regex, loader ) {\n\n\t\tthis.handlers.push( regex, loader );\n\n\t},\n\n\tget: function ( file ) {\n\n\t\tfor ( var i = 0, l = this.handlers.length; i < l; i += 2 ) {\n\n\t\t\tvar regex = this.handlers[ i ];\n\t\t\tvar loader  = this.handlers[ i + 1 ];\n\n\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\treturn loader;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n};\n\n// File:src/loaders/XHRLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.XHRLoader = function ( manager ) {\n\n\tthis.cache = new THREE.Cache();\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.XHRLoader.prototype = {\n\n\tconstructor: THREE.XHRLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar cached = scope.cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tif ( onLoad ) onLoad( cached );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open( 'GET', url, true );\n\n\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\tscope.cache.add( url, this.response );\n\n\t\t\tif ( onLoad ) onLoad( this.response );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}, false );\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\tif ( onError !== undefined ) {\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tonError( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\tif ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\n\t\trequest.send( null );\n\n\t\tscope.manager.itemStart( url );\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/ImageLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ImageLoader = function ( manager ) {\n\n\tthis.cache = new THREE.Cache();\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ImageLoader.prototype = {\n\n\tconstructor: THREE.ImageLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar cached = scope.cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tonLoad( cached );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar image = document.createElement( 'img' );\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\timage.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tscope.cache.add( url, this );\n\n\t\t\t\tonLoad( this );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\tif ( onProgress !== undefined ) {\n\n\t\t\timage.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tonProgress( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\tif ( onError !== undefined ) {\n\n\t\t\timage.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tonError( event );\n\n\t\t\t}, false );\n\n\t\t}\n\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\timage.src = url;\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn image;\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n}\n\n// File:src/loaders/JSONLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.JSONLoader = function ( showStatus ) {\n\n\tTHREE.Loader.call( this, showStatus );\n\n\tthis.withCredentials = false;\n\n};\n\nTHREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );\n\nTHREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {\n\n\tvar scope = this;\n\n\t// todo: unify load API to for easier SceneLoader use\n\n\ttexturePath = texturePath && ( typeof texturePath === 'string' ) ? texturePath : this.extractUrlBase( url );\n\n\tthis.onLoadStart();\n\tthis.loadAjaxJSON( this, url, callback, texturePath );\n\n};\n\nTHREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {\n\n\tvar xhr = new XMLHttpRequest();\n\n\tvar length = 0;\n\n\txhr.onreadystatechange = function () {\n\n\t\tif ( xhr.readyState === xhr.DONE ) {\n\n\t\t\tif ( xhr.status === 200 || xhr.status === 0 ) {\n\n\t\t\t\tif ( xhr.responseText ) {\n\n\t\t\t\t\tvar json = JSON.parse( xhr.responseText );\n\n\t\t\t\t\tif ( json.metadata !== undefined && json.metadata.type === 'scene' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: \"' + url + '\" seems to be a Scene. Use THREE.SceneLoader instead.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = context.parse( json, texturePath );\n\t\t\t\t\tcallback( result.geometry, result.materials );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.JSONLoader: \"' + url + '\" seems to be unreachable or the file is empty.' );\n\n\t\t\t\t}\n\n\t\t\t\t// in context of more complex asset initialization\n\t\t\t\t// do not block on single failed file\n\t\t\t\t// maybe should go even one more level up\n\n\t\t\t\tcontext.onLoadComplete();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.JSONLoader: Couldn\\'t load \"' + url + '\" (' + xhr.status + ')' );\n\n\t\t\t}\n\n\t\t} else if ( xhr.readyState === xhr.LOADING ) {\n\n\t\t\tif ( callbackProgress ) {\n\n\t\t\t\tif ( length === 0 ) {\n\n\t\t\t\t\tlength = xhr.getResponseHeader( 'Content-Length' );\n\n\t\t\t\t}\n\n\t\t\t\tcallbackProgress( { total: length, loaded: xhr.responseText.length } );\n\n\t\t\t}\n\n\t\t} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {\n\n\t\t\tif ( callbackProgress !== undefined ) {\n\n\t\t\t\tlength = xhr.getResponseHeader( 'Content-Length' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\txhr.open( 'GET', url, true );\n\txhr.withCredentials = this.withCredentials;\n\txhr.send( null );\n\n};\n\nTHREE.JSONLoader.prototype.parse = function ( json, texturePath ) {\n\n\tvar scope = this,\n\tgeometry = new THREE.Geometry(),\n\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\n\n\tparseModel( scale );\n\n\tparseSkin();\n\tparseMorphing( scale );\n\n\tgeometry.computeFaceNormals();\n\tgeometry.computeBoundingSphere();\n\n\tfunction parseModel( scale ) {\n\n\t\tfunction isBitSet( value, position ) {\n\n\t\t\treturn value & ( 1 << position );\n\n\t\t}\n\n\t\tvar i, j, fi,\n\n\t\toffset, zLength,\n\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\ttype,\n\t\tisQuad,\n\t\thasMaterial,\n\t\thasFaceVertexUv,\n\t\thasFaceNormal, hasFaceVertexNormal,\n\t\thasFaceColor, hasFaceVertexColor,\n\n\t\tvertex, face, faceA, faceB, color, hex, normal,\n\n\t\tuvLayer, uv, u, v,\n\n\t\tfaces = json.faces,\n\t\tvertices = json.vertices,\n\t\tnormals = json.normals,\n\t\tcolors = json.colors,\n\n\t\tnUvLayers = 0;\n\n\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t// disregard empty arrays\n\n\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t}\n\n\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t}\n\n\t\toffset = 0;\n\t\tzLength = vertices.length;\n\n\t\twhile ( offset < zLength ) {\n\n\t\t\tvertex = new THREE.Vector3();\n\n\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\tgeometry.vertices.push( vertex );\n\n\t\t}\n\n\t\toffset = 0;\n\t\tzLength = faces.length;\n\n\t\twhile ( offset < zLength ) {\n\n\t\t\ttype = faces[ offset ++ ];\n\n\n\t\t\tisQuad              = isBitSet( type, 0 );\n\t\t\thasMaterial         = isBitSet( type, 1 );\n\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\n\t\t\thasFaceNormal       = isBitSet( type, 4 );\n\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\thasFaceColor\t     = isBitSet( type, 6 );\n\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\n\n\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\tif ( isQuad ) {\n\n\t\t\t\tfaceA = new THREE.Face3();\n\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\tfaceB = new THREE.Face3();\n\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\toffset += 4;\n\n\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = []\n\n\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t);\n\n\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\n\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t} else {\n\n\t\t\t\tface = new THREE.Face3();\n\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\n\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\tnormal = new THREE.Vector3(\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction parseSkin() {\n\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\tif ( json.skinWeights ) {\n\n\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\tvar x =                               json.skinWeights[ i     ];\n\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.skinIndices ) {\n\n\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\tvar a =                               json.skinIndices[ i     ];\n\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.bones = json.bones;\n\n\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t}\n\n\n\t\t// could change this to json.animations[0] or remove completely\n\n\t\tgeometry.animation = json.animation;\n\t\tgeometry.animations = json.animations;\n\n\t};\n\n\tfunction parseMorphing( scale ) {\n\n\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\tvar i, l, v, vl, dstVertices, srcVertices;\n\n\t\t\tfor ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\tdstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\tsrcVertices = json.morphTargets [ i ].vertices;\n\n\t\t\t\tfor ( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\tvar vertex = new THREE.Vector3();\n\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.morphColors !== undefined ) {\n\n\t\t\tvar i, l, c, cl, dstColors, srcColors, color;\n\n\t\t\tfor ( i = 0, l = json.morphColors.length; i < l; i ++ ) {\n\n\t\t\t\tgeometry.morphColors[ i ] = {};\n\t\t\t\tgeometry.morphColors[ i ].name = json.morphColors[ i ].name;\n\t\t\t\tgeometry.morphColors[ i ].colors = [];\n\n\t\t\t\tdstColors = geometry.morphColors[ i ].colors;\n\t\t\t\tsrcColors = json.morphColors [ i ].colors;\n\n\t\t\t\tfor ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {\n\n\t\t\t\t\tcolor = new THREE.Color( 0xffaa00 );\n\t\t\t\t\tcolor.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );\n\t\t\t\t\tdstColors.push( color );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\treturn { geometry: geometry };\n\n\t} else {\n\n\t\tvar materials = this.initMaterials( json.materials, texturePath );\n\n\t\tif ( this.needsTangents( materials ) ) {\n\n\t\t\tgeometry.computeTangents();\n\n\t\t}\n\n\t\treturn { geometry: geometry, materials: materials };\n\n\t}\n\n};\n\n// File:src/loaders/LoadingManager.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\n\n\tvar scope = this;\n\n\tvar loaded = 0, total = 0;\n\n\tthis.onLoad = onLoad;\n\tthis.onProgress = onProgress;\n\tthis.onError = onError;\n\n\tthis.itemStart = function ( url ) {\n\n\t\ttotal ++;\n\n\t};\n\n\tthis.itemEnd = function ( url ) {\n\n\t\tloaded ++;\n\n\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\tscope.onProgress( url, loaded, total );\n\n\t\t}\n\n\t\tif ( loaded === total && scope.onLoad !== undefined ) {\n\n\t\t\tscope.onLoad();\n\n\t\t}\n\n\t};\n\n};\n\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\n\n// File:src/loaders/BufferGeometryLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BufferGeometryLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.BufferGeometryLoader.prototype = {\n\n\tconstructor: THREE.BufferGeometryLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometry = new THREE.BufferGeometry();\n\n\t\tvar attributes = json.attributes;\n\n\t\tfor ( var key in attributes ) {\n\n\t\t\tvar attribute = attributes[ key ];\n\t\t\tvar typedArray = new self[ attribute.type ]( attribute.array );\n\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\n\n\t\t}\n\n\t\tvar offsets = json.offsets;\n\n\t\tif ( offsets !== undefined ) {\n\n\t\t\tgeometry.offsets = JSON.parse( JSON.stringify( offsets ) );\n\n\t\t}\n\n\t\tvar boundingSphere = json.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tvar center = new THREE.Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n};\n\n// File:src/loaders/MaterialLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MaterialLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.MaterialLoader.prototype = {\n\n\tconstructor: THREE.MaterialLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar material = new THREE[ json.type ];\n\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\t\t\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\n\t\tif ( json.materials !== undefined ) {\n\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\n\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/loaders/ObjectLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.ObjectLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ObjectLoader.prototype = {\n\n\tconstructor: THREE.ObjectLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar geometries = this.parseGeometries( json.geometries );\n\t\tvar materials = this.parseMaterials( json.materials );\n\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\treturn object;\n\n\t},\n\n\tparseGeometries: function ( json ) {\n\n\t\tvar geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar geometry;\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'PlaneGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.PlaneGeometry(\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\tgeometry = new THREE.BoxGeometry(\n\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CircleGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.CircleGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.segments\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'CylinderGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.CylinderGeometry(\n\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.openEnded\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SphereGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.SphereGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'IcosahedronGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.TorusGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TorusKnotGeometry':\n\n\t\t\t\t\t\tgeometry = new THREE.TorusKnotGeometry(\n\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\tdata.q,\n\t\t\t\t\t\t\tdata.heightScale\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data.data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data ).geometry;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t},\n\n\tparseMaterials: function ( json ) {\n\n\t\tvar materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tvar loader = new THREE.MaterialLoader();\n\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\t\t\t\tvar material = loader.parse( data );\n\n\t\t\t\tmaterial.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) material.name = data.name;\n\n\t\t\t\tmaterials[ data.uuid ] = material;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t},\n\n\tparseObject: function () {\n\n\t\tvar matrix = new THREE.Matrix4();\n\n\t\treturn function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new THREE.Scene();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = geometries[ data.geometry ];\n\t\t\t\t\tvar material = materials[ data.material ];\n\n\t\t\t\t\tif ( geometry === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', data.material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tvar geometry = geometries[ data.geometry ];\n\t\t\t\t\tvar material = materials[ data.material ];\n\n\t\t\t\t\tif ( geometry === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', data.material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new THREE.Line( geometry, material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tvar material = materials[ data.material ];\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', data.material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new THREE.Sprite( material );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new THREE.Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( data.matrix );\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tfor ( var child in data.children ) {\n\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t}()\n\n};\n\n// File:src/loaders/TextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.TextureLoader = function ( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.TextureLoader.prototype = {\n\n\tconstructor: THREE.TextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.ImageLoader( scope.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.load( url, function ( image ) {\n\n\t\t\tvar texture = new THREE.Texture( image );\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t}\n\n};\n\n// File:src/loaders/CompressedTextureLoader.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\n\nTHREE.CompressedTextureLoader = function () {\n\n\t// override in sub classes\n\tthis._parser = null;\n\n};\n\n\nTHREE.CompressedTextureLoader.prototype = {\n\n\tconstructor: THREE.CompressedTextureLoader,\n\n\tload: function ( url, onLoad, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar images = [];\n\n\t\tvar texture = new THREE.CompressedTexture();\n\t\ttexture.image = images;\n\n\t\tvar loader = new THREE.XHRLoader();\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( url instanceof Array ) {\n\n\t\t\tvar loaded = 0;\n\n\t\t\tvar loadTexture = function ( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n \t\t\t\t\t\tif (texDatas.mipmapCount == 1)\n \t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\n\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n};\n\n// File:src/materials/Material.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Material = function () {\n\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\tthis.type = 'Material';\n\n\tthis.side = THREE.FrontSide;\n\n\tthis.opacity = 1;\n\tthis.transparent = false;\n\n\tthis.blending = THREE.NormalBlending;\n\n\tthis.blendSrc = THREE.SrcAlphaFactor;\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\n\tthis.blendEquation = THREE.AddEquation;\n\n\tthis.depthTest = true;\n\tthis.depthWrite = true;\n\n\tthis.polygonOffset = false;\n\tthis.polygonOffsetFactor = 0;\n\tthis.polygonOffsetUnits = 0;\n\n\tthis.alphaTest = 0;\n\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\tthis.visible = true;\n\n\tthis.needsUpdate = true;\n\n};\n\nTHREE.Material.prototype = {\n\n\tconstructor: THREE.Material,\n\n\tsetValues: function ( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( var key in values ) {\n\n\t\t\tvar newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( key in this ) {\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue instanceof THREE.Color ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key == 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatable with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type\n\t\t};\n\n\t\tif ( this.name !== \"\" ) output.name = this.name;\n\n\t\tif ( this instanceof THREE.MeshBasicMaterial ) {\n\n\t\t\toutput.color = this.color.getHex();\n\t\t\tif ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;\n\t\t\tif ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;\n\t\t\tif ( this.side !== THREE.FrontSide ) output.side = this.side;\n\n\t\t} else if ( this instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\toutput.color = this.color.getHex();\n\t\t\toutput.ambient = this.ambient.getHex();\n\t\t\toutput.emissive = this.emissive.getHex();\n\t\t\tif ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;\n\t\t\tif ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;\n\t\t\tif ( this.side !== THREE.FrontSide ) output.side = this.side;\n\n\t\t} else if ( this instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\toutput.color = this.color.getHex();\n\t\t\toutput.ambient = this.ambient.getHex();\n\t\t\toutput.emissive = this.emissive.getHex();\n\t\t\toutput.specular = this.specular.getHex();\n\t\t\toutput.shininess = this.shininess;\n\t\t\tif ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;\n\t\t\tif ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;\n\t\t\tif ( this.side !== THREE.FrontSide ) output.side = this.side;\n\n\t\t} else if ( this instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\tif ( this.shading !== THREE.FlatShading ) output.shading = this.shading;\n\t\t\tif ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;\n\t\t\tif ( this.side !== THREE.FrontSide ) output.side = this.side;\n\n\t\t} else if ( this instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\tif ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;\n\t\t\tif ( this.side !== THREE.FrontSide ) output.side = this.side;\n\n\t\t} else if ( this instanceof THREE.ShaderMaterial ) {\n\n\t\t\toutput.uniforms = this.uniforms;\n\t\t\toutput.vertexShader = this.vertexShader;\n\t\t\toutput.fragmentShader = this.fragmentShader;\n\n\t\t} else if ( this instanceof THREE.SpriteMaterial ) {\n\n\t\t\toutput.color = this.color.getHex();\n\n\t\t}\n\n\t\tif ( this.opacity < 1 ) output.opacity = this.opacity;\n\t\tif ( this.transparent !== false ) output.transparent = this.transparent;\n\t\tif ( this.wireframe !== false ) output.wireframe = this.wireframe;\n\n\t\treturn output;\n\n\t},\n\n\tclone: function ( material ) {\n\n\t\tif ( material === undefined ) material = new THREE.Material();\n\n\t\tmaterial.name = this.name;\n\n\t\tmaterial.side = this.side;\n\n\t\tmaterial.opacity = this.opacity;\n\t\tmaterial.transparent = this.transparent;\n\n\t\tmaterial.blending = this.blending;\n\n\t\tmaterial.blendSrc = this.blendSrc;\n\t\tmaterial.blendDst = this.blendDst;\n\t\tmaterial.blendEquation = this.blendEquation;\n\n\t\tmaterial.depthTest = this.depthTest;\n\t\tmaterial.depthWrite = this.depthWrite;\n\n\t\tmaterial.polygonOffset = this.polygonOffset;\n\t\tmaterial.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tmaterial.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tmaterial.alphaTest = this.alphaTest;\n\n\t\tmaterial.overdraw = this.overdraw;\n\n\t\tmaterial.visible = this.visible;\n\n\t\treturn material;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\n\nTHREE.MaterialIdCount = 0;\n\n// File:src/materials/LineBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\",\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\tthis.linecap = 'round';\n\tthis.linejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.LineBasicMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.LineBasicMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\n\tmaterial.linewidth = this.linewidth;\n\tmaterial.linecap = this.linecap;\n\tmaterial.linejoin = this.linejoin;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.fog = this.fog;\n\n\treturn material;\n\n};\n\n// File:src/materials/LineDashedMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>,\n *\n *  vertexColors: <bool>\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.LineDashedMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'LineDashedMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.linewidth = 1;\n\n\tthis.scale = 1;\n\tthis.dashSize = 3;\n\tthis.gapSize = 1;\n\n\tthis.vertexColors = false;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.LineDashedMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.LineDashedMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\n\tmaterial.linewidth = this.linewidth;\n\n\tmaterial.scale = this.scale;\n\tmaterial.dashSize = this.dashSize;\n\tmaterial.gapSize = this.gapSize;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.fog = this.fog;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshBasicMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.MeshBasicMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshBasicMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshBasicMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.MeshBasicMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\n\tmaterial.map = this.map;\n\n\tmaterial.lightMap = this.lightMap;\n\n\tmaterial.specularMap = this.specularMap;\n\n\tmaterial.alphaMap = this.alphaMap;\n\n\tmaterial.envMap = this.envMap;\n\tmaterial.combine = this.combine;\n\tmaterial.reflectivity = this.reflectivity;\n\tmaterial.refractionRatio = this.refractionRatio;\n\n\tmaterial.fog = this.fog;\n\n\tmaterial.shading = this.shading;\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.skinning = this.skinning;\n\tmaterial.morphTargets = this.morphTargets;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshLambertMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  ambient: <hex>,\n *  emissive: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshLambertMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshLambertMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.ambient = new THREE.Color( 0xffffff );\n\tthis.emissive = new THREE.Color( 0x000000 );\n\n\tthis.wrapAround = false;\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshLambertMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.MeshLambertMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\tmaterial.ambient.copy( this.ambient );\n\tmaterial.emissive.copy( this.emissive );\n\n\tmaterial.wrapAround = this.wrapAround;\n\tmaterial.wrapRGB.copy( this.wrapRGB );\n\n\tmaterial.map = this.map;\n\n\tmaterial.lightMap = this.lightMap;\n\n\tmaterial.specularMap = this.specularMap;\n\n\tmaterial.alphaMap = this.alphaMap;\n\n\tmaterial.envMap = this.envMap;\n\tmaterial.combine = this.combine;\n\tmaterial.reflectivity = this.reflectivity;\n\tmaterial.refractionRatio = this.refractionRatio;\n\n\tmaterial.fog = this.fog;\n\n\tmaterial.shading = this.shading;\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.skinning = this.skinning;\n\tmaterial.morphTargets = this.morphTargets;\n\tmaterial.morphNormals = this.morphNormals;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshPhongMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  ambient: <hex>,\n *  emissive: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.MeshPhongMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshPhongMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\n\tthis.ambient = new THREE.Color( 0xffffff );\n\tthis.emissive = new THREE.Color( 0x000000 );\n\tthis.specular = new THREE.Color( 0x111111 );\n\tthis.shininess = 30;\n\n\tthis.metal = false;\n\n\tthis.wrapAround = false;\n\tthis.wrapRGB = new THREE.Vector3( 1, 1, 1 );\n\n\tthis.map = null;\n\n\tthis.lightMap = null;\n\n\tthis.bumpMap = null;\n\tthis.bumpScale = 1;\n\n\tthis.normalMap = null;\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\n\n\tthis.specularMap = null;\n\n\tthis.alphaMap = null;\n\n\tthis.envMap = null;\n\tthis.combine = THREE.MultiplyOperation;\n\tthis.reflectivity = 1;\n\tthis.refractionRatio = 0.98;\n\n\tthis.fog = true;\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\tthis.wireframeLinecap = 'round';\n\tthis.wireframeLinejoin = 'round';\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.skinning = false;\n\tthis.morphTargets = false;\n\tthis.morphNormals = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshPhongMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.MeshPhongMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\tmaterial.ambient.copy( this.ambient );\n\tmaterial.emissive.copy( this.emissive );\n\tmaterial.specular.copy( this.specular );\n\tmaterial.shininess = this.shininess;\n\n\tmaterial.metal = this.metal;\n\n\tmaterial.wrapAround = this.wrapAround;\n\tmaterial.wrapRGB.copy( this.wrapRGB );\n\n\tmaterial.map = this.map;\n\n\tmaterial.lightMap = this.lightMap;\n\n\tmaterial.bumpMap = this.bumpMap;\n\tmaterial.bumpScale = this.bumpScale;\n\n\tmaterial.normalMap = this.normalMap;\n\tmaterial.normalScale.copy( this.normalScale );\n\n\tmaterial.specularMap = this.specularMap;\n\n\tmaterial.alphaMap = this.alphaMap;\n\n\tmaterial.envMap = this.envMap;\n\tmaterial.combine = this.combine;\n\tmaterial.reflectivity = this.reflectivity;\n\tmaterial.refractionRatio = this.refractionRatio;\n\n\tmaterial.fog = this.fog;\n\n\tmaterial.shading = this.shading;\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\tmaterial.wireframeLinecap = this.wireframeLinecap;\n\tmaterial.wireframeLinejoin = this.wireframeLinejoin;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.skinning = this.skinning;\n\tmaterial.morphTargets = this.morphTargets;\n\tmaterial.morphNormals = this.morphNormals;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshDepthMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshDepthMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'MeshDepthMaterial';\n\n\tthis.morphTargets = false;\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshDepthMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.MeshDepthMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshNormalMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  shading: THREE.FlatShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nTHREE.MeshNormalMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this, parameters );\n\n\tthis.type = 'MeshNormalMaterial';\n\n\tthis.shading = THREE.FlatShading;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.morphTargets = false;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.MeshNormalMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.MeshNormalMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.shading = this.shading;\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\n\treturn material;\n\n};\n\n// File:src/materials/MeshFaceMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.MeshFaceMaterial = function ( materials ) {\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.type = 'MeshFaceMaterial';\n\t\n\tthis.materials = materials instanceof Array ? materials : [];\n\n};\n\nTHREE.MeshFaceMaterial.prototype = {\n\n\tconstructor: THREE.MeshFaceMaterial,\n\n\ttoJSON: function () {\n\n\t\tvar output = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.2,\n\t\t\t\ttype: 'material',\n\t\t\t\tgenerator: 'MaterialExporter'\n\t\t\t},\n\t\t\tuuid: this.uuid,\n\t\t\ttype: this.type,\n\t\t\tmaterials: []\n\t\t};\n\n\t\tfor ( var i = 0, l = this.materials.length; i < l; i ++ ) {\n\n\t\t\toutput.materials.push( this.materials[ i ].toJSON() );\n\n\t\t}\n\n\t\treturn output;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar material = new THREE.MeshFaceMaterial();\n\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\n\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\n\n\t\t}\n\n\t\treturn material;\n\n\t}\n\n};\n\n// File:src/materials/PointCloudMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  vertexColors: <bool>,\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.PointCloudMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'PointCloudMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\n\tthis.map = null;\n\n\tthis.size = 1;\n\tthis.sizeAttenuation = true;\n\n\tthis.vertexColors = THREE.NoColors;\n\n\tthis.fog = true;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.PointCloudMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.PointCloudMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.PointCloudMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\n\tmaterial.map = this.map;\n\n\tmaterial.size = this.size;\n\tmaterial.sizeAttenuation = this.sizeAttenuation;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.fog = this.fog;\n\n\treturn material;\n\n};\n\n// backwards compatibility\n\nTHREE.ParticleBasicMaterial = function ( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.' );\n\treturn new THREE.PointCloudMaterial( parameters );\n\n};\n\nTHREE.ParticleSystemMaterial = function ( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.' );\n\treturn new THREE.PointCloudMaterial( parameters );\n\n};\n\n// File:src/materials/ShaderMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  shading: THREE.SmoothShading,\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>,\n *\n *\tfog: <bool>\n * }\n */\n\nTHREE.ShaderMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'ShaderMaterial';\n\n\tthis.defines = {};\n\tthis.uniforms = {};\n\tthis.attributes = null;\n\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\tthis.shading = THREE.SmoothShading;\n\n\tthis.linewidth = 1;\n\n\tthis.wireframe = false;\n\tthis.wireframeLinewidth = 1;\n\n\tthis.fog = false; // set to use scene fog\n\n\tthis.lights = false; // set to use scene lights\n\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\n\n\tthis.skinning = false; // set to use skinning attribute streams\n\n\tthis.morphTargets = false; // set to use morph targets\n\tthis.morphNormals = false; // set to use morph normals\n\n\t// When rendered geometry doesn't include these attributes but the material does,\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\tthis.defaultAttributeValues = {\n\t\t'color': [ 1, 1, 1 ],\n\t\t'uv': [ 0, 0 ],\n\t\t'uv2': [ 0, 0 ]\n\t};\n\n\tthis.index0AttributeName = undefined;\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.ShaderMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.ShaderMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.fragmentShader = this.fragmentShader;\n\tmaterial.vertexShader = this.vertexShader;\n\n\tmaterial.uniforms = THREE.UniformsUtils.clone( this.uniforms );\n\n\tmaterial.attributes = this.attributes;\n\tmaterial.defines = this.defines;\n\n\tmaterial.shading = this.shading;\n\n\tmaterial.wireframe = this.wireframe;\n\tmaterial.wireframeLinewidth = this.wireframeLinewidth;\n\n\tmaterial.fog = this.fog;\n\n\tmaterial.lights = this.lights;\n\n\tmaterial.vertexColors = this.vertexColors;\n\n\tmaterial.skinning = this.skinning;\n\n\tmaterial.morphTargets = this.morphTargets;\n\tmaterial.morphNormals = this.morphNormals;\n\n\treturn material;\n\n};\n\n// File:src/materials/RawShaderMaterial.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.RawShaderMaterial = function ( parameters ) {\n\n\tTHREE.ShaderMaterial.call( this, parameters );\n\n\tthis.type = 'RawShaderMaterial';\n\n};\n\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\n\nTHREE.RawShaderMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.RawShaderMaterial();\n\n\tTHREE.ShaderMaterial.prototype.clone.call( this, material );\n\n\treturn material;\n\n};\n\n// File:src/materials/SpriteMaterial.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  blending: THREE.NormalBlending,\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2(),\n *\n *  fog: <bool>\n * }\n */\n\nTHREE.SpriteMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.map = null;\n\n\tthis.rotation = 0;\n\n\tthis.fog = false;\n\n\t// set parameters\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\n\nTHREE.SpriteMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteMaterial();\n\n\tTHREE.Material.prototype.clone.call( this, material );\n\n\tmaterial.color.copy( this.color );\n\tmaterial.map = this.map;\n\n\tmaterial.rotation = this.rotation;\n\n\tmaterial.fog = this.fog;\n\n\treturn material;\n\n};\n\n// File:src/textures/Texture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\n\n\tthis.uuid = THREE.Math.generateUUID();\n\n\tthis.name = '';\n\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n\tthis.mipmaps = [];\n\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.generateMipmaps = true;\n\tthis.premultiplyAlpha = false;\n\tthis.flipY = true;\n\tthis.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\tthis._needsUpdate = false;\n\tthis.onUpdate = null;\n\n};\n\nTHREE.Texture.DEFAULT_IMAGE = undefined;\nTHREE.Texture.DEFAULT_MAPPING = new THREE.UVMapping();\n\nTHREE.Texture.prototype = {\n\n\tconstructor: THREE.Texture,\n\n\tget needsUpdate () {\n\n\t\treturn this._needsUpdate;\n\n\t},\n\n\tset needsUpdate ( value ) {\n\n\t\tif ( value === true ) this.update();\n\n\t\tthis._needsUpdate = value;\n\n\t},\n\n\tclone: function ( texture ) {\n\n\t\tif ( texture === undefined ) texture = new THREE.Texture();\n\n\t\ttexture.image = this.image;\n\t\ttexture.mipmaps = this.mipmaps.slice( 0 );\n\n\t\ttexture.mapping = this.mapping;\n\n\t\ttexture.wrapS = this.wrapS;\n\t\ttexture.wrapT = this.wrapT;\n\n\t\ttexture.magFilter = this.magFilter;\n\t\ttexture.minFilter = this.minFilter;\n\n\t\ttexture.anisotropy = this.anisotropy;\n\n\t\ttexture.format = this.format;\n\t\ttexture.type = this.type;\n\n\t\ttexture.offset.copy( this.offset );\n\t\ttexture.repeat.copy( this.repeat );\n\n\t\ttexture.generateMipmaps = this.generateMipmaps;\n\t\ttexture.premultiplyAlpha = this.premultiplyAlpha;\n\t\ttexture.flipY = this.flipY;\n\t\ttexture.unpackAlignment = this.unpackAlignment;\n\n\t\treturn texture;\n\n\t},\n\n\tupdate: function () {\n\n\t\tthis.dispatchEvent( { type: 'update' } );\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\n\nTHREE.TextureIdCount = 0;\n\n// File:src/textures/CubeTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.images = images;\n\n};\n\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\n\nTHREE.CubeTexture.clone = function ( texture ) {\n\n\tif ( texture === undefined ) texture = new THREE.CubeTexture();\n\n\tTHREE.Texture.prototype.clone.call( this, texture );\n\n\ttexture.images = this.images;\n\n\treturn texture;\n\n};\n\n// File:src/textures/CompressedTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n};\n\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\n\nTHREE.CompressedTexture.prototype.clone = function () {\n\n\tvar texture = new THREE.CompressedTexture();\n\n\tTHREE.Texture.prototype.clone.call( this, texture );\n\n\treturn texture;\n\n};\n\n// File:src/textures/DataTexture.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\n\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.image = { data: data, width: width, height: height };\n\n};\n\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\n\nTHREE.DataTexture.prototype.clone = function () {\n\n\tvar texture = new THREE.DataTexture();\n\n\tTHREE.Texture.prototype.clone.call( this, texture );\n\n\treturn texture;\n\n};\n\n// File:src/textures/VideoTexture.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\tthis.generateMipmaps = false;\n\n\tvar scope = this;\n\n\tvar update = function () {\n\n\t\trequestAnimationFrame( update );\n\n\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\n\n\t\t\tscope.needsUpdate = true;\n\n\t\t}\n\n\t};\n\n\tupdate();\n\n};\n\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\n\n// File:src/objects/Group.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Group = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Group';\n\n};\n\nTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\n\n// File:src/objects/PointCloud.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.PointCloud = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'PointCloud';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.PointCloudMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.sortParticles = false;\n\n};\n\nTHREE.PointCloud.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.PointCloud.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\n\treturn function ( raycaster, intersects ) {\n\n\t\tvar object = this;\n\t\tvar geometry = object.geometry;\n\t\tvar threshold = raycaster.params.PointCloud.threshold;\n\n\t\tinverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tvar position = new THREE.Vector3();\n\n\t\tvar testPoint = function ( point, index ) {\n\n\t\t\tvar rayPointDistance = ray.distanceToPoint( point );\n\n\t\t\tif ( rayPointDistance < localThreshold ) {\n\n\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\n\t\t\t\tintersectPoint.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tdistanceToRay: rayPointDistance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tindex: index,\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: object\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t};\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar positions = attributes.position.array;\n\n\t\t\tif ( attributes.index !== undefined ) {\n\n\t\t\t\tvar indices = attributes.index.array;\n\t\t\t\tvar offsets = geometry.offsets;\n\n\t\t\t\tif ( offsets.length === 0 ) {\n\n\t\t\t\t\tvar offset = {\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.length,\n\t\t\t\t\t\tindex: 0\n\t\t\t\t\t};\n\n\t\t\t\t\toffsets = [ offset ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {\n\n\t\t\t\t\tvar start = offsets[ oi ].start;\n\t\t\t\t\tvar count = offsets[ oi ].count;\n\t\t\t\t\tvar index = offsets[ oi ].index;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar a = index + indices[ i ];\n\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar pointCount = positions.length / 3;\n\n\t\t\t\tfor ( var i = 0; i < pointCount; i ++ ) {\n\n\t\t\t\t\tposition.set(\n\t\t\t\t\t\tpositions[ 3 * i ],\n\t\t\t\t\t\tpositions[ 3 * i + 1 ],\n\t\t\t\t\t\tpositions[ 3 * i + 2 ]\n\t\t\t\t\t);\n\n\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tvar vertices = this.geometry.vertices;\n\n\t\t\tfor ( var i = 0; i < vertices.length; i ++ ) {\n\n\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.PointCloud.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.PointCloud( this.geometry, this.material );\n\n\tobject.sortParticles = this.sortParticles;\n\n\tTHREE.Object3D.prototype.clone.call( this, object );\n\n\treturn object;\n\n};\n\n// Backwards compatibility\n\nTHREE.ParticleSystem = function ( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.PointCloud.' );\n\treturn new THREE.PointCloud( geometry, material );\n\n};\n\n// File:src/objects/Line.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Line = function ( geometry, material, mode ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Line';\n\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.mode = ( mode !== undefined ) ? mode : THREE.LineStrip;\n\n};\n\nTHREE.LineStrip = 0;\nTHREE.LinePieces = 1;\n\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Line.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\tvar sphere = new THREE.Sphere();\n\n\treturn function ( raycaster, intersects ) {\n\n\t\tvar precision = raycaster.linePrecision;\n\t\tvar precisionSq = precision * precision;\n\n\t\tvar geometry = this.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tsphere.copy( geometry.boundingSphere );\n\t\tsphere.applyMatrix4( this.matrixWorld );\n\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tinverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t/* if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t} else */ if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar nbVertices = vertices.length;\n\t\t\tvar interSegment = new THREE.Vector3();\n\t\t\tvar interRay = new THREE.Vector3();\n\t\t\tvar step = this.mode === THREE.LineStrip ? 1 : 2;\n\n\t\t\tfor ( var i = 0; i < nbVertices - 1; i = i + step ) {\n\n\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\tvar distance = ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.Line.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.mode );\n\n\tTHREE.Object3D.prototype.clone.call( this, object );\n\n\treturn object;\n\n};\n\n// File:src/objects/Mesh.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\n\nTHREE.Mesh = function ( geometry, material ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Mesh';\n\t\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\tthis.updateMorphTargets();\n\n};\n\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Mesh.prototype.updateMorphTargets = function () {\n\n\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\n\n\t\tthis.morphTargetBase = - 1;\n\t\tthis.morphTargetForcedOrder = [];\n\t\tthis.morphTargetInfluences = [];\n\t\tthis.morphTargetDictionary = {};\n\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\n\n\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\n\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\n\n\t\treturn this.morphTargetDictionary[ name ];\n\n\t}\n\n\tconsole.log( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\n\n\treturn 0;\n\n};\n\n\nTHREE.Mesh.prototype.raycast = ( function () {\n\n\tvar inverseMatrix = new THREE.Matrix4();\n\tvar ray = new THREE.Ray();\n\tvar sphere = new THREE.Sphere();\n\n\tvar vA = new THREE.Vector3();\n\tvar vB = new THREE.Vector3();\n\tvar vC = new THREE.Vector3();\n\n\treturn function ( raycaster, intersects ) {\n\n\t\tvar geometry = this.geometry;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\tsphere.copy( geometry.boundingSphere );\n\t\tsphere.applyMatrix4( this.matrixWorld );\n\n\t\tif ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check boundingBox before continuing\n\n\t\tinverseMatrix.getInverse( this.matrixWorld );\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( ray.isIntersectionBox( geometry.boundingBox ) === false )  {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tvar material = this.material;\n\n\t\t\tif ( material === undefined ) return;\n\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar a, b, c;\n\t\t\tvar precision = raycaster.precision;\n\n\t\t\tif ( attributes.index !== undefined ) {\n\n\t\t\t\tvar indices = attributes.index.array;\n\t\t\t\tvar positions = attributes.position.array;\n\t\t\t\tvar offsets = geometry.offsets;\n\n\t\t\t\tif ( offsets.length === 0 ) {\n\n\t\t\t\t\toffsets = [ { start: 0, count: indices.length, index: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {\n\n\t\t\t\t\tvar start = offsets[ oi ].start;\n\t\t\t\t\tvar count = offsets[ oi ].count;\n\t\t\t\t\tvar index = offsets[ oi ].index;\n\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\t\ta = index + indices[ i ];\n\t\t\t\t\t\tb = index + indices[ i + 1 ];\n\t\t\t\t\t\tc = index + indices[ i + 2 ];\n\n\t\t\t\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\t\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\t\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\t\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( intersectionPoint === null ) continue;\n\n\t\t\t\t\t\tintersectionPoint.applyMatrix4( this.matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n\t\t\t\t\t\tif ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tpoint: intersectionPoint,\n\t\t\t\t\t\t\tface: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tfor ( var i = 0, j = 0, il = positions.length; i < il; i += 3, j += 9 ) {\n\n\t\t\t\t\ta = i;\n\t\t\t\t\tb = i + 1;\n\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\tvA.fromArray( positions, j );\n\t\t\t\t\tvB.fromArray( positions, j + 3 );\n\t\t\t\t\tvC.fromArray( positions, j + 6 );\n\n\t\t\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( intersectionPoint === null ) continue;\n\n\t\t\t\t\tintersectionPoint.applyMatrix4( this.matrixWorld );\n\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n\t\t\t\t\tif ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\tpoint: intersectionPoint,\n\t\t\t\t\t\tface: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\tvar isFaceMaterial = this.material instanceof THREE.MeshFaceMaterial;\n\t\t\tvar objectMaterials = isFaceMaterial === true ? this.material.materials : null;\n\n\t\t\tvar a, b, c, d;\n\t\t\tvar precision = raycaster.precision;\n\n\t\t\tvar vertices = geometry.vertices;\n\n\t\t\tfor ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = geometry.faces[ f ];\n\n\t\t\t\tvar material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : this.material;\n\n\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\ta = vertices[ face.a ];\n\t\t\t\tb = vertices[ face.b ];\n\t\t\t\tc = vertices[ face.c ];\n\n\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\tvA.x += ( targets[ face.a ].x - a.x ) * influence;\n\t\t\t\t\t\tvA.y += ( targets[ face.a ].y - a.y ) * influence;\n\t\t\t\t\t\tvA.z += ( targets[ face.a ].z - a.z ) * influence;\n\n\t\t\t\t\t\tvB.x += ( targets[ face.b ].x - b.x ) * influence;\n\t\t\t\t\t\tvB.y += ( targets[ face.b ].y - b.y ) * influence;\n\t\t\t\t\t\tvB.z += ( targets[ face.b ].z - b.z ) * influence;\n\n\t\t\t\t\t\tvC.x += ( targets[ face.c ].x - c.x ) * influence;\n\t\t\t\t\t\tvC.y += ( targets[ face.c ].y - c.y ) * influence;\n\t\t\t\t\t\tvC.z += ( targets[ face.c ].z - c.z ) * influence;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvA.add( a );\n\t\t\t\t\tvB.add( b );\n\t\t\t\t\tvC.add( c );\n\n\t\t\t\t\ta = vA;\n\t\t\t\t\tb = vB;\n\t\t\t\t\tc = vC;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.side === THREE.BackSide ) {\n\n\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( c, b, a, true );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar intersectionPoint = ray.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersectionPoint === null ) continue;\n\n\t\t\t\tintersectionPoint.applyMatrix4( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPoint );\n\n\t\t\t\tif ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPoint,\n\t\t\t\t\tface: face,\n\t\t\t\t\tfaceIndex: f,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.Mesh.prototype.clone = function ( object, recursive ) {\n\n\tif ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );\n\n\tTHREE.Object3D.prototype.clone.call( this, object, recursive );\n\n\treturn object;\n\n};\n\n// File:src/objects/Bone.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.Bone = function ( belongsToSkin ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.skin = belongsToSkin;\n\n};\n\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\n\n\n// File:src/objects/Skeleton.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\n\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\n\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n\n\tthis.identityMatrix = new THREE.Matrix4();\n\n\t// copy the bone array\n\n\tbones = bones || [];\n\n\tthis.bones = bones.slice( 0 );\n\n\t// create a bone texture or an array of floats\n\n\tif ( this.useVertexTexture ) {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)\n\t\t//       16x16 pixel texture max   64 bones (16 * 16 / 4)\n\t\t//       32x32 pixel texture max  256 bones (32 * 32 / 4)\n\t\t//       64x64 pixel texture max 1024 bones (64 * 64 / 4)\n\n\t\tvar size;\n\n\t\tif ( this.bones.length > 256 )\n\t\t\tsize = 64;\n\t\telse if ( this.bones.length > 64 )\n\t\t\tsize = 32;\n\t\telse if ( this.bones.length > 16 )\n\t\t\tsize = 16;\n\t\telse\n\t\t\tsize = 8;\n\n\t\tthis.boneTextureWidth = size;\n\t\tthis.boneTextureHeight = size;\n\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\n\t\tthis.boneTexture.minFilter = THREE.NearestFilter;\n\t\tthis.boneTexture.magFilter = THREE.NearestFilter;\n\t\tthis.boneTexture.generateMipmaps = false;\n\t\tthis.boneTexture.flipY = false;\n\n\t} else {\n\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\n\n\t}\n\n\t// use the supplied bone inverses or calculate the inverses\n\n\tif ( boneInverses === undefined ) {\n\n\t\tthis.calculateInverses();\n\n\t} else {\n\n\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.calculateInverses = function () {\n\n\tthis.boneInverses = [];\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tvar inverse = new THREE.Matrix4();\n\n\t\tif ( this.bones[ b ] ) {\n\n\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\n\n\t\t}\n\n\t\tthis.boneInverses.push( inverse );\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.pose = function () {\n\n\tvar bone;\n\n\t// recover the bind-time world matrices\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tbone = this.bones[ b ];\n\n\t\tif ( bone ) {\n\n\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\n\n\t\t}\n\n\t}\n\n\t// compute the local matrices, positions, rotations and scales\n\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\tbone = this.bones[ b ];\n\n\t\tif ( bone ) {\n\n\t\t\tif ( bone.parent ) {\n\n\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t}\n\n\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Skeleton.prototype.update = ( function () {\n\n\tvar offsetMatrix = new THREE.Matrix4();\n\t\n\treturn function () {\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\n\n\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\n\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\n\n\t\t}\n\n\t\tif ( this.useVertexTexture ) {\n\n\t\t\tthis.boneTexture.needsUpdate = true;\n\n\t\t}\n\t\t\n\t};\n\n} )();\n\n\n// File:src/objects/SkinnedMesh.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'SkinnedMesh';\n\n\tthis.bindMode = \"attached\";\n\tthis.bindMatrix = new THREE.Matrix4();\n\tthis.bindMatrixInverse = new THREE.Matrix4();\n\n\t// init bones\n\n\t// TODO: remove bone creation as there is no reason (other than\n\t// convenience) for THREE.SkinnedMesh to do this.\n\n\tvar bones = [];\n\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\tvar bone, gbone, p, q, s;\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tp = gbone.pos;\n\t\t\tq = gbone.rotq;\n\t\t\ts = gbone.scl;\n\n\t\t\tbone = new THREE.Bone( this );\n\t\t\tbones.push( bone );\n\n\t\t\tbone.name = gbone.name;\n\t\t\tbone.position.set( p[ 0 ], p[ 1 ], p[ 2 ] );\n\t\t\tbone.quaternion.set( q[ 0 ], q[ 1 ], q[ 2 ], q[ 3 ] );\n\n\t\t\tif ( s !== undefined ) {\n\n\t\t\t\tbone.scale.set( s[ 0 ], s[ 1 ], s[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tbone.scale.set( 1, 1, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {\n\n\t\t\tgbone = this.geometry.bones[ b ];\n\n\t\t\tif ( gbone.parent !== - 1 ) {\n\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.add( bones[ b ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.normalizeSkinWeights();\n\n\tthis.updateMatrixWorld( true );\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ) );\n\n};\n\n\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\n\n\tthis.skeleton = skeleton;\n\n\tif ( bindMatrix === undefined ) {\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tbindMatrix = this.matrixWorld;\n\n\t}\n\n\tthis.bindMatrix.copy( bindMatrix );\n\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n};\n\nTHREE.SkinnedMesh.prototype.pose = function () {\n\n\tthis.skeleton.pose();\n\n};\n\nTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\n\n\tif ( this.geometry instanceof THREE.Geometry ) {\n\n\t\tfor ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {\n\n\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\tvar scale = 1.0 / sw.lengthManhattan();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tsw.set( 1 ); // this will be normalized by the shader anyway\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// skinning weights assumed to be normalized for THREE.BufferGeometry\n\n\t}\n\n};\n\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\n\n\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\n\n\tif ( this.bindMode === \"attached\" ) {\n\n\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t} else if ( this.bindMode === \"detached\" ) {\n\n\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t} else {\n\n\t\tconsole.warn( 'THREE.SkinnedMesh unreckognized bindMode: ' + this.bindMode );\n\n\t}\n\n};\n\nTHREE.SkinnedMesh.prototype.clone = function( object ) {\n\n\tif ( object === undefined ) {\n\n\t\tobject = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );\n\n\t}\n\n\tTHREE.Mesh.prototype.clone.call( this, object );\n\n\treturn object;\n\n};\n\n\n// File:src/objects/MorphAnimMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphAnimMesh = function ( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.type = 'MorphAnimMesh';\n\n\t// API\n\n\tthis.duration = 1000; // milliseconds\n\tthis.mirroredLoop = false;\n\tthis.time = 0;\n\n\t// internals\n\n\tthis.lastKeyframe = 0;\n\tthis.currentKeyframe = 0;\n\n\tthis.direction = 1;\n\tthis.directionBackwards = false;\n\n\tthis.setFrameRange( 0, this.geometry.morphTargets.length - 1 );\n\n};\n\nTHREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {\n\n\tthis.startKeyframe = start;\n\tthis.endKeyframe = end;\n\n\tthis.length = this.endKeyframe - this.startKeyframe + 1;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setDirectionForward = function () {\n\n\tthis.direction = 1;\n\tthis.directionBackwards = false;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setDirectionBackward = function () {\n\n\tthis.direction = - 1;\n\tthis.directionBackwards = true;\n\n};\n\nTHREE.MorphAnimMesh.prototype.parseAnimations = function () {\n\n\tvar geometry = this.geometry;\n\n\tif ( ! geometry.animations ) geometry.animations = {};\n\n\tvar firstAnimation, animations = geometry.animations;\n\n\tvar pattern = /([a-z]+)_?(\\d+)/;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar parts = morph.name.match( pattern );\n\n\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\tvar label = parts[ 1 ];\n\t\t\tvar num = parts[ 2 ];\n\n\t\t\tif ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar animation = animations[ label ];\n\n\t\t\tif ( i < animation.start ) animation.start = i;\n\t\t\tif ( i > animation.end ) animation.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = label;\n\n\t\t}\n\n\t}\n\n\tgeometry.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {\n\n\tif ( ! this.geometry.animations ) this.geometry.animations = {};\n\n\tthis.geometry.animations[ label ] = { start: start, end: end };\n\n};\n\nTHREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {\n\n\tvar animation = this.geometry.animations[ label ];\n\n\tif ( animation ) {\n\n\t\tthis.setFrameRange( animation.start, animation.end );\n\t\tthis.duration = 1000 * ( ( animation.end - animation.start ) / fps );\n\t\tthis.time = 0;\n\n\t} else {\n\n\t\tconsole.warn( 'animation[' + label + '] undefined' );\n\n\t}\n\n};\n\nTHREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {\n\n\tvar frameTime = this.duration / this.length;\n\n\tthis.time += this.direction * delta;\n\n\tif ( this.mirroredLoop ) {\n\n\t\tif ( this.time > this.duration || this.time < 0 ) {\n\n\t\t\tthis.direction *= - 1;\n\n\t\t\tif ( this.time > this.duration ) {\n\n\t\t\t\tthis.time = this.duration;\n\t\t\t\tthis.directionBackwards = true;\n\n\t\t\t}\n\n\t\t\tif ( this.time < 0 ) {\n\n\t\t\t\tthis.time = 0;\n\t\t\t\tthis.directionBackwards = false;\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tthis.time = this.time % this.duration;\n\n\t\tif ( this.time < 0 ) this.time += this.duration;\n\n\t}\n\n\tvar keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );\n\n\tif ( keyframe !== this.currentKeyframe ) {\n\n\t\tthis.morphTargetInfluences[ this.lastKeyframe ] = 0;\n\t\tthis.morphTargetInfluences[ this.currentKeyframe ] = 1;\n\n\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\tthis.lastKeyframe = this.currentKeyframe;\n\t\tthis.currentKeyframe = keyframe;\n\n\t}\n\n\tvar mix = ( this.time % frameTime ) / frameTime;\n\n\tif ( this.directionBackwards ) {\n\n\t\tmix = 1 - mix;\n\n\t}\n\n\tthis.morphTargetInfluences[ this.currentKeyframe ] = mix;\n\tthis.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;\n\n};\n\nTHREE.MorphAnimMesh.prototype.interpolateTargets = function ( a, b, t ) {\n\n\tvar influences = this.morphTargetInfluences;\n\n\tfor ( var i = 0, l = influences.length; i < l; i ++ ) {\n\n\t\tinfluences[ i ] = 0;\n\n\t}\n\n\tif ( a > -1 ) influences[ a ] = 1 - t;\n\tif ( b > -1 ) influences[ b ] = t;\n\n};\n\nTHREE.MorphAnimMesh.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );\n\n\tobject.duration = this.duration;\n\tobject.mirroredLoop = this.mirroredLoop;\n\tobject.time = this.time;\n\n\tobject.lastKeyframe = this.lastKeyframe;\n\tobject.currentKeyframe = this.currentKeyframe;\n\n\tobject.direction = this.direction;\n\tobject.directionBackwards = this.directionBackwards;\n\n\tTHREE.Mesh.prototype.clone.call( this, object );\n\n\treturn object;\n\n};\n\n// File:src/objects/LOD.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.LOD = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.objects = [];\n\n};\n\n\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.LOD.prototype.addLevel = function ( object, distance ) {\n\n\tif ( distance === undefined ) distance = 0;\n\n\tdistance = Math.abs( distance );\n\n\tfor ( var l = 0; l < this.objects.length; l ++ ) {\n\n\t\tif ( distance < this.objects[ l ].distance ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tthis.objects.splice( l, 0, { distance: distance, object: object } );\n\tthis.add( object );\n\n};\n\nTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\n\n\tfor ( var i = 1, l = this.objects.length; i < l; i ++ ) {\n\n\t\tif ( distance < this.objects[ i ].distance ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn this.objects[ i - 1 ].object;\n\n};\n\nTHREE.LOD.prototype.raycast = ( function () {\n\n\tvar matrixPosition = new THREE.Vector3();\n\n\treturn function ( raycaster, intersects ) {\n\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t};\n\n}() );\n\nTHREE.LOD.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\n\treturn function ( camera ) {\n\n\t\tif ( this.objects.length > 1 ) {\n\n\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\tthis.objects[ 0 ].object.visible = true;\n\n\t\t\tfor ( var i = 1, l = this.objects.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= this.objects[ i ].distance ) {\n\n\t\t\t\t\tthis.objects[ i - 1 ].object.visible = false;\n\t\t\t\t\tthis.objects[ i     ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tthis.objects[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n}();\n\nTHREE.LOD.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.LOD();\n\n\tTHREE.Object3D.prototype.clone.call( this, object );\n\n\tfor ( var i = 0, l = this.objects.length; i < l; i ++ ) {\n\t\tvar x = this.objects[ i ].object.clone();\n\t\tx.visible = i === 0;\n\t\tobject.addLevel( x, this.objects[ i ].distance );\n\t}\n\n\treturn object;\n\n};\n\n// File:src/objects/Sprite.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Sprite = ( function () {\n\n\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\n\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\n\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n\treturn function ( material ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\n\n\t};\n\n} )();\n\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Sprite.prototype.raycast = ( function () {\n\n\tvar matrixPosition = new THREE.Vector3();\n\n\treturn function ( raycaster, intersects ) {\n\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tvar distance = raycaster.ray.distanceToPoint( matrixPosition );\n\n\t\tif ( distance > this.scale.x ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: this.position,\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t};\n\n}() );\n\nTHREE.Sprite.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.Sprite( this.material );\n\n\tTHREE.Object3D.prototype.clone.call( this, object );\n\n\treturn object;\n\n};\n\n// Backwards compatibility\n\nTHREE.Particle = THREE.Sprite;\n\n// File:src/objects/LensFlare.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.lensFlares = [];\n\n\tthis.positionScreen = new THREE.Vector3();\n\tthis.customUpdateCallback = undefined;\n\n\tif( texture !== undefined ) {\n\n\t\tthis.add( texture, size, distance, blending, color );\n\n\t}\n\n};\n\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\n\n\n/*\n * Add: adds another flare\n */\n\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\n\n\tif ( size === undefined ) size = - 1;\n\tif ( distance === undefined ) distance = 0;\n\tif ( opacity === undefined ) opacity = 1;\n\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\n\tif ( blending === undefined ) blending = THREE.NormalBlending;\n\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\n\n\tthis.lensFlares.push( {\n\t\ttexture: texture, \t\t\t// THREE.Texture\n\t\tsize: size, \t\t\t\t// size in pixels (-1 = use texture.width)\n\t\tdistance: distance, \t\t// distance (0-1) from light source (0=at light source)\n\t\tx: 0, y: 0, z: 0,\t\t\t// screen position (-1 => 1) z = 0 is ontop z = 1 is back\n\t\tscale: 1, \t\t\t\t\t// scale\n\t\trotation: 1, \t\t\t\t// rotation\n\t\topacity: opacity,\t\t\t// opacity\n\t\tcolor: color,\t\t\t\t// color\n\t\tblending: blending\t\t\t// blending\n\t} );\n\n};\n\n/*\n * Update lens flares update positions on all flares based on the screen position\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n */\n\nTHREE.LensFlare.prototype.updateLensFlares = function () {\n\n\tvar f, fl = this.lensFlares.length;\n\tvar flare;\n\tvar vecX = - this.positionScreen.x * 2;\n\tvar vecY = - this.positionScreen.y * 2;\n\n\tfor( f = 0; f < fl; f ++ ) {\n\n\t\tflare = this.lensFlares[ f ];\n\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\n\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\n\n\t}\n\n};\n\n\n// File:src/scenes/Scene.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Scene = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Scene';\n\n\tthis.fog = null;\n\tthis.overrideMaterial = null;\n\n\tthis.autoUpdate = true; // checked by the renderer\n\n};\n\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Scene.prototype.clone = function ( object ) {\n\n\tif ( object === undefined ) object = new THREE.Scene();\n\n\tTHREE.Object3D.prototype.clone.call( this, object );\n\n\tif ( this.fog !== null ) object.fog = this.fog.clone();\n\tif ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();\n\n\tobject.autoUpdate = this.autoUpdate;\n\tobject.matrixAutoUpdate = this.matrixAutoUpdate;\n\n\treturn object;\n\n};\n\n// File:src/scenes/Fog.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Fog = function ( color, near, far ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\n\tthis.near = ( near !== undefined ) ? near : 1;\n\tthis.far = ( far !== undefined ) ? far : 1000;\n\n};\n\nTHREE.Fog.prototype.clone = function () {\n\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\n\n};\n\n// File:src/scenes/FogExp2.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.FogExp2 = function ( color, density ) {\n\n\tthis.name = '';\n\n\tthis.color = new THREE.Color( color );\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n};\n\nTHREE.FogExp2.prototype.clone = function () {\n\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\n\n};\n\n// File:src/renderers/shaders/ShaderChunk.js\n\nTHREE.ShaderChunk = {};\n\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphatest_fragment'] = \"#ifdef ALPHATEST\\n\\n\tif ( gl_FragColor.a < ALPHATEST ) discard;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_vertex'] = \"vLightFront = vec3( 0.0 );\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tvLightBack = vec3( 0.0 );\\n\\n#endif\\n\\ntransformedNormal = normalize( transformedNormal );\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\tfloat dotProduct = dot( transformedNormal, dirVector );\\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\\n\\n\t\t#ifdef WRAP_AROUND\\n\\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\\n\\n\t\t#endif\\n\\n\t#endif\\n\\n\t#ifdef WRAP_AROUND\\n\\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\\n\\n\t\t#endif\\n\\n\t#endif\\n\\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\\n\\n\t#endif\\n\\n}\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\\n\\n\t\tfloat lDistance = 1.0;\\n\t\tif ( pointLightDistance[ i ] > 0.0 )\\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\t\tlVector = normalize( lVector );\\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\\n\\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\\n\\n\t\t\t#ifdef WRAP_AROUND\\n\\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\\n\\n\t\t\t#endif\\n\\n\t\t#endif\\n\\n\t\t#ifdef WRAP_AROUND\\n\\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\\n\\n\t\t\t#endif\\n\\n\t\t#endif\\n\\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\\n\\n\t\t\tfloat lDistance = 1.0;\\n\t\t\tif ( spotLightDistance[ i ] > 0.0 )\\n\t\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\\n\\n\t\t\tlVector = normalize( lVector );\\n\\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\\n\\n\t\t\t\t#ifdef WRAP_AROUND\\n\\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\\n\\n\t\t\t\t#endif\\n\\n\t\t\t#endif\\n\\n\t\t\t#ifdef WRAP_AROUND\\n\\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\\n\\n\t\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\\n\\n\t\t\t\t#endif\\n\\n\t\t\t#endif\\n\\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\\n\\n\t\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\\n\\n\t\t\t#endif\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\\n\t\tvec3 lVector = normalize( lDirection.xyz );\\n\\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\\n\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\\n\\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\t#ifdef DOUBLE_SIDED\\n\\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\\n\\n\t\t#endif\\n\\n\t}\\n\\n#endif\\n\\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\\n\tuniform sampler2D map;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/default_vertex.glsl\n\nTHREE.ShaderChunk[ 'default_vertex'] = \"vec4 mvPosition;\\n\\n#ifdef USE_SKINNING\\n\\n\tmvPosition = modelViewMatrix * skinned;\\n\\n#endif\\n\\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\\n\\n\tmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\\n\\n#endif\\n\\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\\n\\n\tmvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\n#endif\\n\\ngl_Position = projectionMatrix * mvPosition;\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\\n\\n\tvarying vec2 vUv;\\n\\n#endif\\n\\n#ifdef USE_MAP\\n\\n\tuniform sampler2D map;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\n\t#ifdef USE_MORPHNORMALS\\n\\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\\n\\n\t#else\\n\\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n\tuniform float logDepthBufFC;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_vertex'] = \"#ifdef USE_LIGHTMAP\\n\\n\tvarying vec2 vUv2;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_fragment'] = \"vec3 normal = normalize( vNormal );\\nvec3 viewPosition = normalize( vViewPosition );\\n\\n#ifdef DOUBLE_SIDED\\n\\n\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\\n#endif\\n\\n#ifdef USE_NORMALMAP\\n\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\n#elif defined( USE_BUMPMAP )\\n\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tvec3 pointDiffuse = vec3( 0.0 );\\n\tvec3 pointSpecular = vec3( 0.0 );\\n\\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\t\tfloat lDistance = 1.0;\\n\t\tif ( pointLightDistance[ i ] > 0.0 )\\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\\n\\n\t\tlVector = normalize( lVector );\\n\\n\t\t\t\t// diffuse\\n\\n\t\tfloat dotProduct = dot( normal, lVector );\\n\\n\t\t#ifdef WRAP_AROUND\\n\\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\\n\\n\t\t#else\\n\\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\t\t#endif\\n\\n\t\tpointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\\n\\n\t\t\t\t// specular\\n\\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\\n\\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\\n\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tvec3 spotDiffuse = vec3( 0.0 );\\n\tvec3 spotSpecular = vec3( 0.0 );\\n\\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\\n\\n\t\tfloat lDistance = 1.0;\\n\t\tif ( spotLightDistance[ i ] > 0.0 )\\n\t\t\tlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\\n\\n\t\tlVector = normalize( lVector );\\n\\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\\n\\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\\n\\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\\n\\n\t\t\t\t\t// diffuse\\n\\n\t\t\tfloat dotProduct = dot( normal, lVector );\\n\\n\t\t\t#ifdef WRAP_AROUND\\n\\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\\n\\n\t\t\t#else\\n\\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\t\t\t#endif\\n\\n\t\t\tspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\\n\\n\t\t\t\t\t// specular\\n\\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\\n\\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\\n\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\\n\\n\t\t}\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tvec3 dirDiffuse = vec3( 0.0 );\\n\tvec3 dirSpecular = vec3( 0.0 );\\n\\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\\n\t\tvec3 dirVector = normalize( lDirection.xyz );\\n\\n\t\t\t\t// diffuse\\n\\n\t\tfloat dotProduct = dot( normal, dirVector );\\n\\n\t\t#ifdef WRAP_AROUND\\n\\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\\n\\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\\n\\n\t\t#else\\n\\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\\n\\n\t\t#endif\\n\\n\t\tdirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\\n\\n\t\t// specular\\n\\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\\n\\n\t\t/*\\n\t\t// fresnel term from skin shader\\n\t\tconst float F0 = 0.128;\\n\\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\\n\t\tfloat exponential = pow( base, 5.0 );\\n\\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\\n\t\t*/\\n\\n\t\t/*\\n\t\t// fresnel term from fresnel shader\\n\t\tconst float mFresnelBias = 0.08;\\n\t\tconst float mFresnelScale = 0.3;\\n\t\tconst float mFresnelPower = 5.0;\\n\\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\\n\t\t*/\\n\\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\\n\\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\\n\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\\n\\n\\n\t}\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tvec3 hemiDiffuse = vec3( 0.0 );\\n\tvec3 hemiSpecular = vec3( 0.0 );\\n\\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\\n\\n\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\\n\t\tvec3 lVector = normalize( lDirection.xyz );\\n\\n\t\t// diffuse\\n\\n\t\tfloat dotProduct = dot( normal, lVector );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\\n\\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\\n\\n\t\themiDiffuse += diffuse * hemiColor;\\n\\n\t\t// specular (sky light)\\n\\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\\n\\n\t\t// specular (ground light)\\n\\n\t\tvec3 lVectorGround = -lVector;\\n\\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\\n\\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\\n\\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\\n\\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\\n\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\\n\\n\t}\\n\\n#endif\\n\\nvec3 totalDiffuse = vec3( 0.0 );\\nvec3 totalSpecular = vec3( 0.0 );\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\ttotalDiffuse += dirDiffuse;\\n\ttotalSpecular += dirSpecular;\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\ttotalDiffuse += hemiDiffuse;\\n\ttotalSpecular += hemiSpecular;\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\ttotalDiffuse += pointDiffuse;\\n\ttotalSpecular += pointSpecular;\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\ttotalDiffuse += spotDiffuse;\\n\ttotalSpecular += spotSpecular;\\n\\n#endif\\n\\n#ifdef METAL\\n\\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\\n\\n#else\\n\\n\tgl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_pars_fragment'] = \"#ifdef USE_FOG\\n\\n\tuniform vec3 fogColor;\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tuniform float fogDensity;\\n\\n\t#else\\n\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\\n\tvec3 morphedNormal = vec3( 0.0 );\\n\\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n\\n\tmorphedNormal += normal;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\tuniform float reflectivity;\\n\tuniform samplerCube envMap;\\n\tuniform float flipEnvMap;\\n\tuniform int combine;\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tuniform bool useRefract;\\n\t\tuniform float refractionRatio;\\n\\n\t#else\\n\\n\t\tvarying vec3 vReflect;\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\\n\t\t\t// Per-Pixel Tangent Space Normal Mapping\\n\t\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\\n\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\\n\t}\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\tvarying vec2 vUv2;\\n\tuniform sampler2D lightMap;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_vertex'] = \"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\\n\\n\tvWorldPosition = worldPosition.xyz;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_fragment'] = \"#ifdef USE_MAP\\n\\n\tvec4 texelColor = texture2D( map, vUv );\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\ttexelColor.xyz *= texelColor.xyz;\\n\\n\t#endif\\n\\n\tgl_FragColor = gl_FragColor * texelColor;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'lightmap_vertex'] = \"#ifdef USE_LIGHTMAP\\n\\n\tvUv2 = uv2;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\nTHREE.ShaderChunk[ 'map_particle_fragment'] = \"#ifdef USE_MAP\\n\\n\tgl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_pars_fragment'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_vertex'] = \"#ifdef USE_COLOR\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\tvColor = color * color;\\n\\n\t#else\\n\\n\t\tvColor = color;\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_vertex'] = \"#ifdef USE_SKINNING\\n\\n\t#ifdef USE_MORPHTARGETS\\n\\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\\n\\n\t#else\\n\\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\\n\\n\t#endif\\n\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_pars_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvarying vec3 vReflect;\\n\\n\tuniform float refractionRatio;\\n\tuniform bool useRefract;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl\n\nTHREE.ShaderChunk[ 'linear_to_gamma_fragment'] = \"#ifdef GAMMA_OUTPUT\\n\\n\tgl_FragColor.xyz = sqrt( gl_FragColor.xyz );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'color_pars_vertex'] = \"#ifdef USE_COLOR\\n\\n\tvarying vec3 vColor;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = \"uniform vec3 ambient;\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\n\\nuniform vec3 ambientLightColor;\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\\n#ifdef WRAP_AROUND\\n\\n\tuniform vec3 wrapRGB;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/map_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'map_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\\n\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\\n\tvec3 reflectVec;\\n\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\n\t\t// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\\n\t\t// Transforming Normal Vectors with the Inverse Transformation\\n\\n\t\tvec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\\n\\n\t\tif ( useRefract ) {\\n\\n\t\t\treflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t\t} else { \\n\\n\t\t\treflectVec = reflect( cameraToVertex, worldNormal );\\n\\n\t\t}\\n\\n\t#else\\n\\n\t\treflectVec = vReflect;\\n\\n\t#endif\\n\\n\t#ifdef DOUBLE_SIDED\\n\\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t\tvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\t#else\\n\\n\t\tvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\n\t#endif\\n\\n\t#ifdef GAMMA_INPUT\\n\\n\t\tcubeColor.xyz *= cubeColor.xyz;\\n\\n\t#endif\\n\\n\tif ( combine == 1 ) {\\n\\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\\n\\n\t} else if ( combine == 2 ) {\\n\\n\t\tgl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\\n\\n\t} else {\\n\\n\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\\n\tuniform sampler2D specularMap;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tgl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\\n#else\\n\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\tuniform float morphTargetInfluences[ 8 ];\\n\\n\t#else\\n\\n\tuniform float morphTargetInfluences[ 4 ];\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'specularmap_fragment'] = \"float specularStrength;\\n\\n#ifdef USE_SPECULARMAP\\n\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n\\n#else\\n\\n\tspecularStrength = 1.0;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\nTHREE.ShaderChunk[ 'fog_fragment'] = \"#ifdef USE_FOG\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\\n\t#else\\n\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\\n\t#endif\\n\\n\t#ifdef FOG_EXP2\\n\\n\t\tconst float LOG2 = 1.442695;\\n\t\tfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\\n\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\\n\\n\t#else\\n\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\\n\t#endif\\n\t\\n\tgl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\\n\t\t\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\\n\t\t\t//\thttp://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\\n\\n\t\t\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\\n\\n\tvec2 dHdxy_fwd() {\\n\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\n\t\treturn vec2( dBx, dBy );\\n\\n\t}\\n\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\t\t// normalized\\n\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\nTHREE.ShaderChunk[ 'defaultnormal_vertex'] = \"vec3 objectNormal;\\n\\n#ifdef USE_SKINNING\\n\\n\tobjectNormal = skinnedNormal.xyz;\\n\\n#endif\\n\\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\\n\\n\tobjectNormal = morphedNormal;\\n\\n#endif\\n\\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\\n\\n\tobjectNormal = normal;\\n\\n#endif\\n\\n#ifdef FLIP_SIDED\\n\\n\tobjectNormal = -objectNormal;\\n\\n#endif\\n\\nvec3 transformedNormal = normalMatrix * objectNormal;\";\n\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment'] = \"uniform vec3 ambientLightColor;\\n\\n#if MAX_DIR_LIGHTS > 0\\n\\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_HEMI_LIGHTS > 0\\n\\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_POINT_LIGHTS > 0\\n\\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\\n\\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0\\n\\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\\n\\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\\n\\n#endif\\n\\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\\n\\n\tvarying vec3 vWorldPosition;\\n\\n#endif\\n\\n#ifdef WRAP_AROUND\\n\\n\tuniform vec3 wrapRGB;\\n\\n#endif\\n\\nvarying vec3 vViewPosition;\\nvarying vec3 vNormal;\";\n\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/map_vertex.glsl\n\nTHREE.ShaderChunk[ 'map_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\\n\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\\n\tgl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\nTHREE.ShaderChunk[ 'color_fragment'] = \"#ifdef USE_COLOR\\n\\n\tgl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\nTHREE.ShaderChunk[ 'morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\\n\tvec3 morphed = vec3( 0.0 );\\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\n\t#ifndef USE_MORPHNORMALS\\n\\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\n\t#endif\\n\\n\tmorphed += position;\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\nTHREE.ShaderChunk[ 'envmap_vertex'] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\\n\\n\tvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\\n\tworldNormal = normalize( worldNormal );\\n\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\n\tif ( useRefract ) {\\n\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\n\t} else {\\n\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\t#ifdef SHADOWMAP_DEBUG\\n\\n\t\tvec3 frustumColors[3];\\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\\n\\n\t#endif\\n\\n\t#ifdef SHADOWMAP_CASCADE\\n\\n\t\tint inFrustumCount = 0;\\n\\n\t#endif\\n\\n\tfloat fDepth;\\n\tvec3 shadowColor = vec3( 1.0 );\\n\\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\\n\\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\\n\\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\\n\t\t\t\t// if ( all( something, something ) ) using this instead\\n\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\\n\t\t\t\t// don't shadow pixels outside of light frustum\\n\t\t\t\t// use just first frustum (for cascades)\\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\\n\\n\t\t#ifdef SHADOWMAP_CASCADE\\n\\n\t\t\tinFrustumCount += int( inFrustum );\\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\\n\\n\t\t#else\\n\\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\n\t\t#endif\\n\\n\t\tbool frustumTest = all( frustumTestVec );\\n\\n\t\tif ( frustumTest ) {\\n\\n\t\t\tshadowCoord.z += shadowBias[ i ];\\n\\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\n\t\t\t\t\t\t// Percentage-close filtering\\n\t\t\t\t\t\t// (9 pixel kernel)\\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\\n\\n\t\t\t\tfloat shadow = 0.0;\\n\\n\t\t/*\\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\\n\t\t\t\t\t\t// must enroll loop manually\\n\\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\\n\\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\\n\\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\\n\\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\\n\t\t\t\t\t\t\tshadow += 1.0;\\n\\n\t\t\t\t}\\n\\n\t\t\t\tshadow /= 9.0;\\n\\n\t\t*/\\n\\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\\n\\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\\n\\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\\n\\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\\n\\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\n\t\t\t\t\t\t// Percentage-close filtering\\n\t\t\t\t\t\t// (9 pixel kernel)\\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\\n\\n\t\t\t\tfloat shadow = 0.0;\\n\\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\\n\\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\\n\\n\t\t\t\tmat3 shadowKernel;\\n\t\t\t\tmat3 depthKernel;\\n\\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\\n\\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\\n\\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\\n\\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\\n\\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\\n\\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\\n\\n\t\t\t\tvec4 shadowValues;\\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\\n\\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\\n\\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\\n\\n\t\t\t#else\\n\\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\\n\\n\t\t\t\tif ( fDepth < shadowCoord.z )\\n\\n\t\t// spot with multiple shadows is darker\\n\\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\\n\\n\t\t// spot with multiple shadows has the same color as single shadow spot\\n\\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\\n\\n\t\t\t#endif\\n\\n\t\t}\\n\\n\\n\t\t#ifdef SHADOWMAP_DEBUG\\n\\n\t\t\t#ifdef SHADOWMAP_CASCADE\\n\\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\\n\\n\t\t\t#else\\n\\n\t\t\t\tif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\\n\\n\t\t\t#endif\\n\\n\t\t#endif\\n\\n\t}\\n\\n\t#ifdef GAMMA_OUTPUT\\n\\n\t\tshadowColor *= shadowColor;\\n\\n\t#endif\\n\\n\tgl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\nTHREE.ShaderChunk[ 'worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\\n\t#ifdef USE_SKINNING\\n\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\\n\t#endif\\n\\n\t#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\\n\\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\\n\\n\t#endif\\n\\n\t#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\\n\\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\\n\\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\\n\tuniform float shadowBias[ MAX_SHADOWS ];\\n\\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\\n\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\tfloat depth = dot( rgba_depth, bit_shift );\\n\t\treturn depth;\\n\\n\t}\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\nTHREE.ShaderChunk[ 'skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\\n\t#ifdef BONE_TEXTURE\\n\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\\n\t\t\ty = dy * ( y + 0.5 );\\n\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#else\\n\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\\n\t\t}\\n\\n\t#endif\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\\n\tuniform float logDepthBufFC;\\n\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\n\t\t#extension GL_EXT_frag_depth : enable\\n\t\tvarying float vFragDepth;\\n\\n\t#endif\\n\\n#endif\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tgl_FragColor.a *= texture2D( alphaMap, vUv ).g;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\nTHREE.ShaderChunk[ 'alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\\n\tuniform sampler2D alphaMap;\\n\\n#endif\\n\";\n\n// File:src/renderers/shaders/UniformsUtils.js\n\n/**\n * Uniform Utilities\n */\n\nTHREE.UniformsUtils = {\n\n\tmerge: function ( uniforms ) {\n\n\t\tvar merged = {};\n\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn merged;\n\n\t},\n\n\tclone: function ( uniforms_src ) {\n\n\t\tvar uniforms_dst = {};\n\n\t\tfor ( var u in uniforms_src ) {\n\n\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t} else if ( parameter_src instanceof Array ) {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniforms_dst;\n\n\t}\n\n};\n\n// File:src/renderers/shaders/UniformsLib.js\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nTHREE.UniformsLib = {\n\n\tcommon: {\n\n\t\t\"diffuse\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\n\n\t\t\"map\" : { type: \"t\", value: null },\n\t\t\"offsetRepeat\" : { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\n\n\t\t\"lightMap\" : { type: \"t\", value: null },\n\t\t\"specularMap\" : { type: \"t\", value: null },\n\t\t\"alphaMap\" : { type: \"t\", value: null },\n\n\t\t\"envMap\" : { type: \"t\", value: null },\n\t\t\"flipEnvMap\" : { type: \"f\", value: - 1 },\n\t\t\"useRefract\" : { type: \"i\", value: 0 },\n\t\t\"reflectivity\" : { type: \"f\", value: 1.0 },\n\t\t\"refractionRatio\" : { type: \"f\", value: 0.98 },\n\t\t\"combine\" : { type: \"i\", value: 0 },\n\n\t\t\"morphTargetInfluences\" : { type: \"f\", value: 0 }\n\n\t},\n\n\tbump: {\n\n\t\t\"bumpMap\" : { type: \"t\", value: null },\n\t\t\"bumpScale\" : { type: \"f\", value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\t\"normalMap\" : { type: \"t\", value: null },\n\t\t\"normalScale\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\n\t},\n\n\tfog : {\n\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\t\"ambientLightColor\" : { type: \"fv\", value: [] },\n\n\t\t\"directionalLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"directionalLightColor\" : { type: \"fv\", value: [] },\n\n\t\t\"hemisphereLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"hemisphereLightSkyColor\" : { type: \"fv\", value: [] },\n\t\t\"hemisphereLightGroundColor\" : { type: \"fv\", value: [] },\n\n\t\t\"pointLightColor\" : { type: \"fv\", value: [] },\n\t\t\"pointLightPosition\" : { type: \"fv\", value: [] },\n\t\t\"pointLightDistance\" : { type: \"fv1\", value: [] },\n\n\t\t\"spotLightColor\" : { type: \"fv\", value: [] },\n\t\t\"spotLightPosition\" : { type: \"fv\", value: [] },\n\t\t\"spotLightDirection\" : { type: \"fv\", value: [] },\n\t\t\"spotLightDistance\" : { type: \"fv1\", value: [] },\n\t\t\"spotLightAngleCos\" : { type: \"fv1\", value: [] },\n\t\t\"spotLightExponent\" : { type: \"fv1\", value: [] }\n\n\t},\n\n\tparticle: {\n\n\t\t\"psColor\" : { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\n\t\t\"opacity\" : { type: \"f\", value: 1.0 },\n\t\t\"size\" : { type: \"f\", value: 1.0 },\n\t\t\"scale\" : { type: \"f\", value: 1.0 },\n\t\t\"map\" : { type: \"t\", value: null },\n\n\t\t\"fogDensity\" : { type: \"f\", value: 0.00025 },\n\t\t\"fogNear\" : { type: \"f\", value: 1 },\n\t\t\"fogFar\" : { type: \"f\", value: 2000 },\n\t\t\"fogColor\" : { type: \"c\", value: new THREE.Color( 0xffffff ) }\n\n\t},\n\n\tshadowmap: {\n\n\t\t\"shadowMap\": { type: \"tv\", value: [] },\n\t\t\"shadowMapSize\": { type: \"v2v\", value: [] },\n\n\t\t\"shadowBias\" : { type: \"fv1\", value: [] },\n\t\t\"shadowDarkness\": { type: \"fv1\", value: [] },\n\n\t\t\"shadowMatrix\" : { type: \"m4v\", value: [] }\n\n\t}\n\n};\n\n// File:src/renderers/shaders/ShaderLib.js\n\n/**\n * Webgl Shader Library for three.js\n *\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\n\n\nTHREE.ShaderLib = {\n\n\t'basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\n\t\t\t\"\t#ifdef USE_ENVMAP\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( diffuse, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'lambert': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\n\n\t\t\t{\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"#define LAMBERT\",\n\n\t\t\t\"varying vec3 vLightFront;\",\n\n\t\t\t\"#ifdef DOUBLE_SIDED\",\n\n\t\t\t\"\tvarying vec3 vLightBack;\",\n\n\t\t\t\"#endif\",\n\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_lambert_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lights_lambert_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"varying vec3 vLightFront;\",\n\n\t\t\t\"#ifdef DOUBLE_SIDED\",\n\n\t\t\t\"\tvarying vec3 vLightBack;\",\n\n\t\t\t\"#endif\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\n\t\t\t\"\t#ifdef DOUBLE_SIDED\",\n\n\t\t\t\t\t//\"float isFront = float( gl_FrontFacing );\",\n\t\t\t\t\t//\"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;\",\n\n\t\t\t\"\t\tif ( gl_FrontFacing )\",\n\t\t\t\"\t\t\tgl_FragColor.xyz *= vLightFront;\",\n\t\t\t\"\t\telse\",\n\t\t\t\"\t\t\tgl_FragColor.xyz *= vLightBack;\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tgl_FragColor.xyz *= vLightFront;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'phong': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"bump\" ],\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\n\n\t\t\t{\n\t\t\t\t\"ambient\"  : { type: \"c\", value: new THREE.Color( 0xffffff ) },\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 },\n\t\t\t\t\"wrapRGB\"  : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"#define PHONG\",\n\n\t\t\t\"varying vec3 vViewPosition;\",\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\tTHREE.ShaderChunk[ \"map_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"map_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"defaultnormal_vertex\" ],\n\n\t\t\t\"\tvNormal = normalize( transformedNormal );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"\tvViewPosition = -mvPosition.xyz;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"#define PHONG\",\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform vec3 ambient;\",\n\t\t\t\"uniform vec3 emissive;\",\n\t\t\t\"uniform vec3 specular;\",\n\t\t\t\"uniform float shininess;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"alphamap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lightmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"envmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"lights_phong_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"bumpmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"normalmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"specularmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphamap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"specularmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"lights_phong_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"lightmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"envmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'particle_basic': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"particle\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ]\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform float size;\",\n\t\t\t\"uniform float scale;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"\t#ifdef USE_SIZEATTENUATION\",\n\t\t\t\"\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\",\n\t\t\t\"\t#else\",\n\t\t\t\"\t\tgl_PointSize = size;\",\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"worldpos_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 psColor;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"map_particle_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( psColor, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"map_particle_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'dashed': {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"common\" ],\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\n\t\t\t{\n\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\n\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\n\t\t\t}\n\n\t\t] ),\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform float scale;\",\n\t\t\t\"attribute float lineDistance;\",\n\n\t\t\t\"varying float vLineDistance;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"color_vertex\" ],\n\n\t\t\t\"\tvLineDistance = scale * lineDistance;\",\n\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform float dashSize;\",\n\t\t\t\"uniform float totalSize;\",\n\n\t\t\t\"varying float vLineDistance;\",\n\n\t\t\tTHREE.ShaderChunk[ \"color_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\",\n\n\t\t\t\"\t\tdiscard;\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tgl_FragColor = vec4( diffuse, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"color_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'depth': {\n\n\t\tuniforms: {\n\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float mNear;\",\n\t\t\t\"uniform float mFar;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\n\n\t\t\t\"\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\",\n\t\t\t\"\tgl_FragColor = vec4( vec3( color ), opacity );\",\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t'normal': {\n\n\t\tuniforms: {\n\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\n\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvNormal = normalize( normalMatrix * normal );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform float opacity;\",\n\t\t\t\"varying vec3 vNormal;\",\n\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tNormal map shader\n\t//\t\t- Blinn-Phong\n\t//\t\t- normal + diffuse + specular + AO + displacement + reflection + shadow maps\n\t//\t\t- point and directional lights (use with \"lights: true\" material option)\n\t ------------------------------------------------------------------------- */\n\n\t'normalmap' : {\n\n\t\tuniforms: THREE.UniformsUtils.merge( [\n\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\n\t\t\tTHREE.UniformsLib[ \"shadowmap\" ],\n\n\t\t\t{\n\n\t\t\t\"enableAO\"          : { type: \"i\", value: 0 },\n\t\t\t\"enableDiffuse\"     : { type: \"i\", value: 0 },\n\t\t\t\"enableSpecular\"    : { type: \"i\", value: 0 },\n\t\t\t\"enableReflection\"  : { type: \"i\", value: 0 },\n\t\t\t\"enableDisplacement\": { type: \"i\", value: 0 },\n\n\t\t\t\"tDisplacement\": { type: \"t\", value: null }, // must go first as this is vertex texture\n\t\t\t\"tDiffuse\"     : { type: \"t\", value: null },\n\t\t\t\"tCube\"        : { type: \"t\", value: null },\n\t\t\t\"tNormal\"      : { type: \"t\", value: null },\n\t\t\t\"tSpecular\"    : { type: \"t\", value: null },\n\t\t\t\"tAO\"          : { type: \"t\", value: null },\n\n\t\t\t\"uNormalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\n\t\t\t\"uDisplacementBias\": { type: \"f\", value: 0.0 },\n\t\t\t\"uDisplacementScale\": { type: \"f\", value: 1.0 },\n\n\t\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\n\t\t\t\"specular\": { type: \"c\", value: new THREE.Color( 0x111111 ) },\n\t\t\t\"ambient\": { type: \"c\", value: new THREE.Color( 0xffffff ) },\n\t\t\t\"shininess\": { type: \"f\", value: 30 },\n\t\t\t\"opacity\": { type: \"f\", value: 1 },\n\n\t\t\t\"useRefract\": { type: \"i\", value: 0 },\n\t\t\t\"refractionRatio\": { type: \"f\", value: 0.98 },\n\t\t\t\"reflectivity\": { type: \"f\", value: 0.5 },\n\n\t\t\t\"uOffset\" : { type: \"v2\", value: new THREE.Vector2( 0, 0 ) },\n\t\t\t\"uRepeat\" : { type: \"v2\", value: new THREE.Vector2( 1, 1 ) },\n\n\t\t\t\"wrapRGB\" : { type: \"v3\", value: new THREE.Vector3( 1, 1, 1 ) }\n\n\t\t\t}\n\n\t\t] ),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 ambient;\",\n\t\t\t\"uniform vec3 diffuse;\",\n\t\t\t\"uniform vec3 specular;\",\n\t\t\t\"uniform float shininess;\",\n\t\t\t\"uniform float opacity;\",\n\n\t\t\t\"uniform bool enableDiffuse;\",\n\t\t\t\"uniform bool enableSpecular;\",\n\t\t\t\"uniform bool enableAO;\",\n\t\t\t\"uniform bool enableReflection;\",\n\n\t\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\t\"uniform sampler2D tNormal;\",\n\t\t\t\"uniform sampler2D tSpecular;\",\n\t\t\t\"uniform sampler2D tAO;\",\n\n\t\t\t\"uniform samplerCube tCube;\",\n\n\t\t\t\"uniform vec2 uNormalScale;\",\n\n\t\t\t\"uniform bool useRefract;\",\n\t\t\t\"uniform float refractionRatio;\",\n\t\t\t\"uniform float reflectivity;\",\n\n\t\t\t\"varying vec3 vTangent;\",\n\t\t\t\"varying vec3 vBinormal;\",\n\t\t\t\"varying vec3 vNormal;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"uniform vec3 ambientLightColor;\",\n\n\t\t\t\"#if MAX_DIR_LIGHTS > 0\",\n\n\t\t\t\"\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"#if MAX_HEMI_LIGHTS > 0\",\n\n\t\t\t\"\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"#if MAX_POINT_LIGHTS > 0\",\n\n\t\t\t\"\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\",\n\t\t\t\"\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"#if MAX_SPOT_LIGHTS > 0\",\n\n\t\t\t\"\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\",\n\t\t\t\"\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\",\n\t\t\t\"\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\",\n\t\t\t\"\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\",\n\t\t\t\"\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"#ifdef WRAP_AROUND\",\n\n\t\t\t\"\tuniform vec3 wrapRGB;\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\t\t\"varying vec3 vViewPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"fog_pars_fragment\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"\tgl_FragColor = vec4( vec3( 1.0 ), opacity );\",\n\n\t\t\t\"\tvec3 specularTex = vec3( 1.0 );\",\n\n\t\t\t\"\tvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\",\n\t\t\t\"\tnormalTex.xy *= uNormalScale;\",\n\t\t\t\"\tnormalTex = normalize( normalTex );\",\n\n\t\t\t\"\tif( enableDiffuse ) {\",\n\n\t\t\t\"\t\t#ifdef GAMMA_INPUT\",\n\n\t\t\t\"\t\t\tvec4 texelColor = texture2D( tDiffuse, vUv );\",\n\t\t\t\"\t\t\ttexelColor.xyz *= texelColor.xyz;\",\n\n\t\t\t\"\t\t\tgl_FragColor = gl_FragColor * texelColor;\",\n\n\t\t\t\"\t\t#else\",\n\n\t\t\t\"\t\t\tgl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\",\n\n\t\t\t\"\t\t#endif\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\"\tif( enableAO ) {\",\n\n\t\t\t\"\t\t#ifdef GAMMA_INPUT\",\n\n\t\t\t\"\t\t\tvec4 aoColor = texture2D( tAO, vUv );\",\n\t\t\t\"\t\t\taoColor.xyz *= aoColor.xyz;\",\n\n\t\t\t\"\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\",\n\n\t\t\t\"\t\t#else\",\n\n\t\t\t\"\t\t\tgl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\",\n\n\t\t\t\"\t\t#endif\",\n\n\t\t\t\"\t}\",\n\t\t\t\n\t\t\tTHREE.ShaderChunk[ \"alphatest_fragment\" ],\n\n\t\t\t\"\tif( enableSpecular )\",\n\t\t\t\"\t\tspecularTex = texture2D( tSpecular, vUv ).xyz;\",\n\n\t\t\t\"\tmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\",\n\t\t\t\"\tvec3 finalNormal = tsb * normalTex;\",\n\n\t\t\t\"\t#ifdef FLIP_SIDED\",\n\n\t\t\t\"\t\tfinalNormal = -finalNormal;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tvec3 normal = normalize( finalNormal );\",\n\t\t\t\"\tvec3 viewPosition = normalize( vViewPosition );\",\n\n\t\t\t\t// point lights\n\n\t\t\t\"\t#if MAX_POINT_LIGHTS > 0\",\n\n\t\t\t\"\t\tvec3 pointDiffuse = vec3( 0.0 );\",\n\t\t\t\"\t\tvec3 pointSpecular = vec3( 0.0 );\",\n\n\t\t\t\"\t\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\",\n\n\t\t\t\"\t\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\",\n\t\t\t\"\t\t\tvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\",\n\n\t\t\t\"\t\t\tfloat pointDistance = 1.0;\",\n\t\t\t\"\t\t\tif ( pointLightDistance[ i ] > 0.0 )\",\n\t\t\t\"\t\t\t\tpointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\",\n\n\t\t\t\"\t\t\tpointVector = normalize( pointVector );\",\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\"\t\t\t#ifdef WRAP_AROUND\",\n\n\t\t\t\"\t\t\t\tfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\",\n\t\t\t\"\t\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\",\n\n\t\t\t\"\t\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\",\n\n\t\t\t\"\t\t\t#else\",\n\n\t\t\t\"\t\t\t\tfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\",\n\n\t\t\t\"\t\t\t#endif\",\n\n\t\t\t\"\t\t\tpointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;\",\n\n\t\t\t\t\t\t// specular\n\n\t\t\t\"\t\t\tvec3 pointHalfVector = normalize( pointVector + viewPosition );\",\n\t\t\t\"\t\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\",\n\t\t\t\"\t\t\tfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );\",\n\n\t\t\t\"\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\",\n\n\t\t\t\"\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( pointVector, pointHalfVector ), 0.0 ), 5.0 );\",\n\t\t\t\"\t\t\tpointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t// spot lights\n\n\t\t\t\"\t#if MAX_SPOT_LIGHTS > 0\",\n\n\t\t\t\"\t\tvec3 spotDiffuse = vec3( 0.0 );\",\n\t\t\t\"\t\tvec3 spotSpecular = vec3( 0.0 );\",\n\n\t\t\t\"\t\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\",\n\n\t\t\t\"\t\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\",\n\t\t\t\"\t\t\tvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\",\n\n\t\t\t\"\t\t\tfloat spotDistance = 1.0;\",\n\t\t\t\"\t\t\tif ( spotLightDistance[ i ] > 0.0 )\",\n\t\t\t\"\t\t\t\tspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\",\n\n\t\t\t\"\t\t\tspotVector = normalize( spotVector );\",\n\n\t\t\t\"\t\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\",\n\n\t\t\t\"\t\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\",\n\n\t\t\t\"\t\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\",\n\n\t\t\t\t\t\t\t// diffuse\n\n\t\t\t\"\t\t\t\t#ifdef WRAP_AROUND\",\n\n\t\t\t\"\t\t\t\t\tfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\",\n\t\t\t\"\t\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\",\n\n\t\t\t\"\t\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\",\n\n\t\t\t\"\t\t\t\t#else\",\n\n\t\t\t\"\t\t\t\t\tfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\",\n\n\t\t\t\"\t\t\t\t#endif\",\n\n\t\t\t\"\t\t\t\tspotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;\",\n\n\t\t\t\t\t\t\t// specular\n\n\t\t\t\"\t\t\t\tvec3 spotHalfVector = normalize( spotVector + viewPosition );\",\n\t\t\t\"\t\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\",\n\t\t\t\"\t\t\t\tfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );\",\n\n\t\t\t\"\t\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\",\n\n\t\t\t\"\t\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( spotVector, spotHalfVector ), 0.0 ), 5.0 );\",\n\t\t\t\"\t\t\t\tspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\",\n\n\t\t\t\"\t\t\t}\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t// directional lights\n\n\t\t\t\"\t#if MAX_DIR_LIGHTS > 0\",\n\n\t\t\t\"\t\tvec3 dirDiffuse = vec3( 0.0 );\",\n\t\t\t\"\t\tvec3 dirSpecular = vec3( 0.0 );\",\n\n\t\t\t\"\t\tfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\",\n\n\t\t\t\"\t\t\tvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\",\n\t\t\t\"\t\t\tvec3 dirVector = normalize( lDirection.xyz );\",\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\"\t\t\t#ifdef WRAP_AROUND\",\n\n\t\t\t\"\t\t\t\tfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\",\n\t\t\t\"\t\t\t\tfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\",\n\n\t\t\t\"\t\t\t\tvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\",\n\n\t\t\t\"\t\t\t#else\",\n\n\t\t\t\"\t\t\t\tfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\",\n\n\t\t\t\"\t\t\t#endif\",\n\n\t\t\t\"\t\t\tdirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;\",\n\n\t\t\t\t\t\t// specular\n\n\t\t\t\"\t\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\",\n\t\t\t\"\t\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\",\n\t\t\t\"\t\t\tfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );\",\n\n\t\t\t\"\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\",\n\n\t\t\t\"\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\",\n\t\t\t\"\t\t\tdirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t// hemisphere lights\n\n\t\t\t\"\t#if MAX_HEMI_LIGHTS > 0\",\n\n\t\t\t\"\t\tvec3 hemiDiffuse = vec3( 0.0 );\",\n\t\t\t\"\t\tvec3 hemiSpecular = vec3( 0.0 );\" ,\n\n\t\t\t\"\t\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\",\n\n\t\t\t\"\t\t\tvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\",\n\t\t\t\"\t\t\tvec3 lVector = normalize( lDirection.xyz );\",\n\n\t\t\t\t\t\t// diffuse\n\n\t\t\t\"\t\t\tfloat dotProduct = dot( normal, lVector );\",\n\t\t\t\"\t\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\",\n\n\t\t\t\"\t\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\",\n\n\t\t\t\"\t\t\themiDiffuse += diffuse * hemiColor;\",\n\n\t\t\t\t\t\t// specular (sky light)\n\n\n\t\t\t\"\t\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\",\n\t\t\t\"\t\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\",\n\t\t\t\"\t\t\tfloat hemiSpecularWeightSky = specularTex.r * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\",\n\n\t\t\t\t\t\t// specular (ground light)\n\n\t\t\t\"\t\t\tvec3 lVectorGround = -lVector;\",\n\n\t\t\t\"\t\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\",\n\t\t\t\"\t\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\",\n\t\t\t\"\t\t\tfloat hemiSpecularWeightGround = specularTex.r * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\",\n\n\t\t\t\"\t\t\tfloat dotProductGround = dot( normal, lVectorGround );\",\n\n\t\t\t\"\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\",\n\n\t\t\t\"\t\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\",\n\t\t\t\"\t\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\",\n\t\t\t\"\t\t\themiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t// all lights contribution summation\n\n\t\t\t\"\tvec3 totalDiffuse = vec3( 0.0 );\",\n\t\t\t\"\tvec3 totalSpecular = vec3( 0.0 );\",\n\n\t\t\t\"\t#if MAX_DIR_LIGHTS > 0\",\n\n\t\t\t\"\t\ttotalDiffuse += dirDiffuse;\",\n\t\t\t\"\t\ttotalSpecular += dirSpecular;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\t#if MAX_HEMI_LIGHTS > 0\",\n\n\t\t\t\"\t\ttotalDiffuse += hemiDiffuse;\",\n\t\t\t\"\t\ttotalSpecular += hemiSpecular;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\t#if MAX_POINT_LIGHTS > 0\",\n\n\t\t\t\"\t\ttotalDiffuse += pointDiffuse;\",\n\t\t\t\"\t\ttotalSpecular += pointSpecular;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\t#if MAX_SPOT_LIGHTS > 0\",\n\n\t\t\t\"\t\ttotalDiffuse += spotDiffuse;\",\n\t\t\t\"\t\ttotalSpecular += spotSpecular;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\t#ifdef METAL\",\n\n\t\t\t\"\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tgl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tif ( enableReflection ) {\",\n\n\t\t\t\"\t\tvec3 vReflect;\",\n\t\t\t\"\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\",\n\n\t\t\t\"\t\tif ( useRefract ) {\",\n\n\t\t\t\"\t\t\tvReflect = refract( cameraToVertex, normal, refractionRatio );\",\n\n\t\t\t\"\t\t} else {\",\n\n\t\t\t\"\t\t\tvReflect = reflect( cameraToVertex, normal );\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t\tvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\",\n\n\t\t\t\"\t\t#ifdef GAMMA_INPUT\",\n\n\t\t\t\"\t\t\tcubeColor.xyz *= cubeColor.xyz;\",\n\n\t\t\t\"\t\t#endif\",\n\n\t\t\t\"\t\tgl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );\",\n\n\t\t\t\"\t}\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"shadowmap_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"linear_to_gamma_fragment\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"fog_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tvertexShader: [\n\n\t\t\t\"attribute vec4 tangent;\",\n\n\t\t\t\"uniform vec2 uOffset;\",\n\t\t\t\"uniform vec2 uRepeat;\",\n\n\t\t\t\"uniform bool enableDisplacement;\",\n\n\t\t\t\"#ifdef VERTEX_TEXTURES\",\n\n\t\t\t\"\tuniform sampler2D tDisplacement;\",\n\t\t\t\"\tuniform float uDisplacementScale;\",\n\t\t\t\"\tuniform float uDisplacementBias;\",\n\n\t\t\t\"#endif\",\n\n\t\t\t\"varying vec3 vTangent;\",\n\t\t\t\"varying vec3 vBinormal;\",\n\t\t\t\"varying vec3 vNormal;\",\n\t\t\t\"varying vec2 vUv;\",\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\t\t\t\"varying vec3 vViewPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"shadowmap_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinnormal_vertex\" ],\n\n\t\t\t\t// normal, tangent and binormal vectors\n\n\t\t\t\"\t#ifdef USE_SKINNING\",\n\n\t\t\t\"\t\tvNormal = normalize( normalMatrix * skinnedNormal.xyz );\",\n\n\t\t\t\"\t\tvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\",\n\t\t\t\"\t\tvTangent = normalize( normalMatrix * skinnedTangent.xyz );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tvNormal = normalize( normalMatrix * normal );\",\n\t\t\t\"\t\tvTangent = normalize( normalMatrix * tangent.xyz );\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"\tvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\",\n\n\t\t\t\"\tvUv = uv * uRepeat + uOffset;\",\n\n\t\t\t\t// displacement mapping\n\n\t\t\t\"\tvec3 displacedPosition;\",\n\n\t\t\t\"\t#ifdef VERTEX_TEXTURES\",\n\n\t\t\t\"\t\tif ( enableDisplacement ) {\",\n\n\t\t\t\"\t\t\tvec3 dv = texture2D( tDisplacement, uv ).xyz;\",\n\t\t\t\"\t\t\tfloat df = uDisplacementScale * dv.x + uDisplacementBias;\",\n\t\t\t\"\t\t\tdisplacedPosition = position + normalize( normal ) * df;\",\n\n\t\t\t\"\t\t} else {\",\n\n\t\t\t\"\t\t\t#ifdef USE_SKINNING\",\n\n\t\t\t\"\t\t\t\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"\t\t\t\tvec4 skinned = vec4( 0.0 );\",\n\t\t\t\"\t\t\t\tskinned += boneMatX * skinVertex * skinWeight.x;\",\n\t\t\t\"\t\t\t\tskinned += boneMatY * skinVertex * skinWeight.y;\",\n\t\t\t\"\t\t\t\tskinned += boneMatZ * skinVertex * skinWeight.z;\",\n\t\t\t\"\t\t\t\tskinned += boneMatW * skinVertex * skinWeight.w;\",\n\t\t\t\"\t\t\t\tskinned  = bindMatrixInverse * skinned;\",\n\n\t\t\t\"\t\t\t\tdisplacedPosition = skinned.xyz;\",\n\n\t\t\t\"\t\t\t#else\",\n\n\t\t\t\"\t\t\t\tdisplacedPosition = position;\",\n\n\t\t\t\"\t\t\t#endif\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\t#ifdef USE_SKINNING\",\n\n\t\t\t\"\t\t\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\"\t\t\tvec4 skinned = vec4( 0.0 );\",\n\t\t\t\"\t\t\tskinned += boneMatX * skinVertex * skinWeight.x;\",\n\t\t\t\"\t\t\tskinned += boneMatY * skinVertex * skinWeight.y;\",\n\t\t\t\"\t\t\tskinned += boneMatZ * skinVertex * skinWeight.z;\",\n\t\t\t\"\t\t\tskinned += boneMatW * skinVertex * skinWeight.w;\",\n\t\t\t\"\t\t\tskinned  = bindMatrixInverse * skinned;\",\n\n\t\t\t\"\t\t\tdisplacedPosition = skinned.xyz;\",\n\n\t\t\t\"\t\t#else\",\n\n\t\t\t\"\t\t\tdisplacedPosition = position;\",\n\n\t\t\t\"\t\t#endif\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t//\n\n\t\t\t\"\tvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\",\n\t\t\t\"\tvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\t//\n\n\t\t\t\"\tvWorldPosition = worldPosition.xyz;\",\n\t\t\t\"\tvViewPosition = -mvPosition.xyz;\",\n\n\t\t\t\t// shadows\n\n\t\t\t\"\t#ifdef USE_SHADOWMAP\",\n\n\t\t\t\"\t\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\",\n\n\t\t\t\"\t\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\",\n\n\t\t\t\"\t\t}\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\t'cube': {\n\n\t\tuniforms: { \"tCube\": { type: \"t\", value: null },\n\t\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 } },\n\n\t\tvertexShader: [\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\"\tvWorldPosition = worldPosition.xyz;\",\n\n\t\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform samplerCube tCube;\",\n\t\t\t\"uniform float tFlip;\",\n\n\t\t\t\"varying vec3 vWorldPosition;\",\n\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\"\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t},\n\n\t/* Depth encoding into RGBA texture\n\t *\n\t * based on SpiderGL shadow map example\n\t * http://spidergl.org/example.php?id=6\n\t *\n\t * originally from\n\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\n\t *\n\t * see also\n\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n\t */\n\n\t'depthRGBA': {\n\n\t\tuniforms: {},\n\n\t\tvertexShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"morphtarget_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"skinning_pars_vertex\" ],\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_vertex\" ],\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"skinbase_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"morphtarget_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"skinning_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"default_vertex\" ],\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_vertex\" ],\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_pars_fragment\" ],\n\n\t\t\t\"vec4 pack_depth( const in float depth ) {\",\n\n\t\t\t\"\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\",\n\t\t\t\"\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\",\n\t\t\t\"\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\", // \"\tvec4 res = fract( depth * bit_shift );\",\n\t\t\t\"\tres -= res.xxyz * bit_mask;\",\n\t\t\t\"\treturn res;\",\n\n\t\t\t\"}\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\tTHREE.ShaderChunk[ \"logdepthbuf_fragment\" ],\n\n\t\t\t\"\t#ifdef USE_LOGDEPTHBUF_EXT\",\n\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\",\n\n\t\t\t\"\t#else\",\n\n\t\t\t\"\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\",\n\n\t\t\t\"\t#endif\",\n\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );\",\n\t\t\t\t//\"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );\",\n\t\t\t\t//\"gl_FragData[ 0 ] = pack_depth( z );\",\n\t\t\t\t//\"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );\",\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t}\n\n};\n\n// File:src/renderers/WebGLRenderer.js\n\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\n\nTHREE.WebGLRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\n\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t_precision = parameters.precision !== undefined ? parameters.precision : 'highp',\n\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t_logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false,\n\n\t_clearColor = new THREE.Color( 0x000000 ),\n\t_clearAlpha = 0;\n\n\tvar lights = [];\n\n\tvar _webglObjects = {};\n\tvar _webglObjectsImmediate = [];\n\n\tvar opaqueObjects = [];\n\tvar transparentObjects = [];\n\n\tvar sprites = [];\n\tvar lensFlares = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\tthis.context = null;\n\tthis.devicePixelRatio = parameters.devicePixelRatio !== undefined\n\t\t\t\t ? parameters.devicePixelRatio\n\t\t\t\t : self.devicePixelRatio !== undefined\n\t\t\t\t\t ? self.devicePixelRatio\n\t\t\t\t\t : 1;\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// physically based shading\n\n\tthis.gammaInput = false;\n\tthis.gammaOutput = false;\n\n\t// shadow map\n\n\tthis.shadowMapEnabled = false;\n\tthis.shadowMapType = THREE.PCFShadowMap;\n\tthis.shadowMapCullFace = THREE.CullFaceFront;\n\tthis.shadowMapDebug = false;\n\tthis.shadowMapCascade = false;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// flags\n\n\tthis.autoScaleCubemaps = true;\n\n\t// info\n\n\tthis.info = {\n\n\t\tmemory: {\n\n\t\t\tprograms: 0,\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\n\t\t},\n\n\t\trender: {\n\n\t\t\tcalls: 0,\n\t\t\tvertices: 0,\n\t\t\tfaces: 0,\n\t\t\tpoints: 0\n\n\t\t}\n\n\t};\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t_programs = [],\n\n\t// internal state cache\n\n\t_currentProgram = null,\n\t_currentFramebuffer = null,\n\t_currentMaterialId = - 1,\n\t_currentGeometryGroupHash = - 1,\n\t_currentCamera = null,\n\n\t_usedTextureUnits = 0,\n\n\t// GL state cache\n\n\t_oldDoubleSided = - 1,\n\t_oldFlipSided = - 1,\n\n\t_oldBlending = - 1,\n\n\t_oldBlendEquation = - 1,\n\t_oldBlendSrc = - 1,\n\t_oldBlendDst = - 1,\n\n\t_oldDepthTest = - 1,\n\t_oldDepthWrite = - 1,\n\n\t_oldPolygonOffset = null,\n\t_oldPolygonOffsetFactor = null,\n\t_oldPolygonOffsetUnits = null,\n\n\t_oldLineWidth = null,\n\n\t_viewportX = 0,\n\t_viewportY = 0,\n\t_viewportWidth = _canvas.width,\n\t_viewportHeight = _canvas.height,\n\t_currentWidth = 0,\n\t_currentHeight = 0,\n\n\t_newAttributes = new Uint8Array( 16 ),\n\t_enabledAttributes = new Uint8Array( 16 ),\n\n\t// frustum\n\n\t_frustum = new THREE.Frustum(),\n\n\t // camera matrices cache\n\n\t_projScreenMatrix = new THREE.Matrix4(),\n\t_projScreenMatrixPS = new THREE.Matrix4(),\n\n\t_vector3 = new THREE.Vector3(),\n\n\t// light arrays cache\n\n\t_direction = new THREE.Vector3(),\n\n\t_lightsNeedUpdate = true,\n\n\t_lights = {\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tdirectional: { length: 0, colors:[], positions: [] },\n\t\tpoint: { length: 0, colors: [], positions: [], distances: [] },\n\t\tspot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [] },\n\t\themi: { length: 0, skyColors: [], groundColors: [], positions: [] }\n\n\t};\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar attributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\n\t\t};\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl') !== null ) {\n\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Error creating WebGL context.';\n\n\t\t\t}\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( error );\n\n\t}\n\n\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\treturn {\n\t\t\t\t'rangeMin': 1,\n\t\t\t\t'rangeMax': 1,\n\t\t\t\t'precision': 1\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\tvar extensions = new THREE.WebGLExtensions( _gl );\n\n\textensions.get( 'OES_texture_float' );\n\textensions.get( 'OES_texture_float_linear' );\n\textensions.get( 'OES_standard_derivatives' );\n\n\tif ( _logarithmicDepthBuffer ) {\n\n\t\textensions.get( 'EXT_frag_depth' );\n\n\t}\n\n\t//\n\n\tfunction setDefaultGLState() {\n\n\t\t_gl.clearColor( 0, 0, 0, 1 );\n\t\t_gl.clearDepth( 1 );\n\t\t_gl.clearStencil( 0 );\n\n\t\t_gl.enable( _gl.DEPTH_TEST );\n\t\t_gl.depthFunc( _gl.LEQUAL );\n\n\t\t_gl.frontFace( _gl.CCW );\n\t\t_gl.cullFace( _gl.BACK );\n\t\t_gl.enable( _gl.CULL_FACE );\n\n\t\t_gl.enable( _gl.BLEND );\n\t\t_gl.blendEquation( _gl.FUNC_ADD );\n\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t}\n\n\tsetDefaultGLState();\n\n\tthis.context = _gl;\n\n\t// GPU capabilities\n\n\tvar _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );\n\tvar _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tvar _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );\n\tvar _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tvar _supportsVertexTextures = _maxVertexTextures > 0;\n\tvar _supportsBoneTextures = _supportsVertexTextures && extensions.get( 'OES_texture_float' );\n\n\t//\n\n\tvar _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );\n\tvar _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );\n\tvar _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );\n\n\tvar _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );\n\tvar _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );\n\tvar _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );\n\n\tvar getCompressedTextureFormats = ( function () {\n\n\t\tvar array;\n\n\t\treturn function () {\n\n\t\t\tif ( array !== undefined ) {\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tarray = [];\n\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) || extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {\n\n\t\t\t\tvar formats = _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ){\n\n\t\t\t\t\tarray.push( formats[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\n\t\t};\n\n\t} )();\n\n\t// clamp precision to maximum available\n\n\tvar highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;\n\tvar mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;\n\n\tif ( _precision === 'highp' && ! highpAvailable ) {\n\n\t\tif ( mediumpAvailable ) {\n\n\t\t\t_precision = 'mediump';\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: highp not supported, using mediump.' );\n\n\t\t} else {\n\n\t\t\t_precision = 'lowp';\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: highp and mediump not supported, using lowp.' );\n\n\t\t}\n\n\t}\n\n\tif ( _precision === 'mediump' && ! mediumpAvailable ) {\n\n\t\t_precision = 'lowp';\n\t\tconsole.warn( 'THREE.WebGLRenderer: mediump not supported, using lowp.' );\n\n\t}\n\n\t// Plugins\n\n\tvar shadowMapPlugin = new THREE.ShadowMapPlugin( this, lights, _webglObjects, _webglObjectsImmediate );\n\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.supportsVertexTextures = function () {\n\n\t\treturn _supportsVertexTextures;\n\n\t};\n\n\tthis.supportsFloatTextures = function () {\n\n\t\treturn extensions.get( 'OES_texture_float' );\n\n\t};\n\n\tthis.supportsStandardDerivatives = function () {\n\n\t\treturn extensions.get( 'OES_standard_derivatives' );\n\n\t};\n\n\tthis.supportsCompressedTextureS3TC = function () {\n\n\t\treturn extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t};\n\n\tthis.supportsCompressedTexturePVRTC = function () {\n\n\t\treturn extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t};\n\n\tthis.supportsBlendMinMax = function () {\n\n\t\treturn extensions.get( 'EXT_blend_minmax' );\n\n\t};\n\n\tthis.getMaxAnisotropy = ( function () {\n\n\t\tvar value;\n\n\t\treturn function () {\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\treturn value;\n\n\t\t\t}\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tvalue = extension !== null ? _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;\n\n\t\t\treturn value;\n\n\t\t}\n\n\t} )();\n\n\tthis.getPrecision = function () {\n\n\t\treturn _precision;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvas.width = width * this.devicePixelRatio;\n\t\t_canvas.height = height * this.devicePixelRatio;\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * this.devicePixelRatio;\n\t\t_viewportY = y * this.devicePixelRatio;\n\n\t\t_viewportWidth = width * this.devicePixelRatio;\n\t\t_viewportHeight = height * this.devicePixelRatio;\n\n\t\t_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t_gl.scissor(\n\t\t\tx * this.devicePixelRatio,\n\t\t\ty * this.devicePixelRatio,\n\t\t\twidth * this.devicePixelRatio,\n\t\t\theight * this.devicePixelRatio\n\t\t);\n\n\t};\n\n\tthis.enableScissorTest = function ( enable ) {\n\n\t\tenable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );\n\n\t};\n\n\t// Clearing\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\t_gl.clear( _gl.COLOR_BUFFER_BIT );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\t_gl.clear( _gl.DEPTH_BUFFER_BIT );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\t_gl.clear( _gl.STENCIL_BUFFER_BIT );\n\n\t};\n\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\tthis.setRenderTarget( renderTarget );\n\t\tthis.clear( color, depth, stencil );\n\n\t};\n\n\t// Reset\n\n\tthis.resetGLState = function () {\n\n\t\t_currentProgram = null;\n\t\t_currentCamera = null;\n\n\t\t_oldBlending = - 1;\n\t\t_oldDepthTest = - 1;\n\t\t_oldDepthWrite = - 1;\n\t\t_oldDoubleSided = - 1;\n\t\t_oldFlipSided = - 1;\n\t\t_currentGeometryGroupHash = - 1;\n\t\t_currentMaterialId = - 1;\n\n\t\t_lightsNeedUpdate = true;\n\n\t};\n\n\t// Buffer allocation\n\n\tfunction createParticleBuffers ( geometry ) {\n\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\n\n\t\t_this.info.memory.geometries ++;\n\n\t};\n\n\tfunction createLineBuffers ( geometry ) {\n\n\t\tgeometry.__webglVertexBuffer = _gl.createBuffer();\n\t\tgeometry.__webglColorBuffer = _gl.createBuffer();\n\t\tgeometry.__webglLineDistanceBuffer = _gl.createBuffer();\n\n\t\t_this.info.memory.geometries ++;\n\n\t};\n\n\tfunction createMeshBuffers ( geometryGroup ) {\n\n\t\tgeometryGroup.__webglVertexBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglNormalBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglTangentBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglColorBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglUVBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglUV2Buffer = _gl.createBuffer();\n\n\t\tgeometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();\n\n\t\tgeometryGroup.__webglFaceBuffer = _gl.createBuffer();\n\t\tgeometryGroup.__webglLineBuffer = _gl.createBuffer();\n\n\t\tvar m, ml;\n\n\t\tif ( geometryGroup.numMorphTargets ) {\n\n\t\t\tgeometryGroup.__webglMorphTargetsBuffers = [];\n\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n\t\t\t\tgeometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometryGroup.numMorphNormals ) {\n\n\t\t\tgeometryGroup.__webglMorphNormalsBuffers = [];\n\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n\t\t\t\tgeometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_this.info.memory.geometries ++;\n\n\t};\n\n\t// Events\n\n\tvar onObjectRemoved = function ( event ) {\n\n\t\tvar object = event.target;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tchild.removeEventListener( 'remove', onObjectRemoved );\n\n\t\t\tremoveObject( child );\n\n\t\t} );\n\n\t};\n\n\tvar onGeometryDispose = function ( event ) {\n\n\t\tvar geometry = event.target;\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdeallocateGeometry( geometry );\n\n\t};\n\n\tvar onTextureDispose = function ( event ) {\n\n\t\tvar texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\t_this.info.memory.textures --;\n\n\n\t};\n\n\tvar onRenderTargetDispose = function ( event ) {\n\n\t\tvar renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t_this.info.memory.textures --;\n\n\t};\n\n\tvar onMaterialDispose = function ( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t};\n\n\t// Buffer deallocation\n\n\tvar deleteBuffers = function ( geometry ) {\n\t\n\t\tvar buffers = [\n\t\t\t'__webglVertexBuffer',\n\t\t\t'__webglNormalBuffer',\n\t\t\t'__webglTangentBuffer',\n\t\t\t'__webglColorBuffer',\n\t\t\t'__webglUVBuffer',\n\t\t\t'__webglUV2Buffer',\n\t\t\t\n\t\t\t'__webglSkinIndicesBuffer',\n\t\t\t'__webglSkinWeightsBuffer',\n\t\t\t\n\t\t\t'__webglFaceBuffer',\n\t\t\t'__webglLineBuffer',\n\t\t\t\n\t\t\t'__webglLineDistanceBuffer'\n\t\t];\n\n\t\tfor ( var i = 0, l = buffers.length; i < l; i ++ ) {\n\n\t\t\tvar name = buffers[ i ];\n\n\t\t\tif ( geometry[ name ] !== undefined ) {\n\n\t\t\t\t_gl.deleteBuffer( geometry[ name ] );\n\n\t\t\t\tdelete geometry[ name ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// custom attributes\n\n\t\tif ( geometry.__webglCustomAttributesList !== undefined ) {\n\n\t\t\tfor ( var name in geometry.__webglCustomAttributesList ) {\n\n\t\t\t\t_gl.deleteBuffer( geometry.__webglCustomAttributesList[ name ].buffer );\n\n\t\t\t}\n\n\t\t\tdelete geometry.__webglCustomAttributesList;\n\n\t\t}\n\n\t\t_this.info.memory.geometries --;\n\n\t};\n\n\tvar deallocateGeometry = function ( geometry ) {\n\n\t\tdelete geometry.__webglInit;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\t\t\t\n\t\t\t\tvar attribute = geometry.attributes[ name ];\n\n\t\t\t\tif ( attribute.buffer !== undefined ) {\n\n\t\t\t\t\t_gl.deleteBuffer( attribute.buffer );\n\n\t\t\t\t\tdelete attribute.buffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_this.info.memory.geometries --;\n\n\t\t} else {\n\n\t\t\tvar geometryGroupsList = geometryGroups[ geometry.id ];\n\n\t\t\tif ( geometryGroupsList !== undefined ) {\n\n\t\t\t\tfor ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometryGroup = geometryGroupsList[ i ];\n\n\t\t\t\t\tif ( geometryGroup.numMorphTargets !== undefined ) {\n\n\t\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete geometryGroup.__webglMorphTargetsBuffers;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometryGroup.numMorphNormals !== undefined ) {\n\n\t\t\t\t\t\tfor ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete geometryGroup.__webglMorphNormalsBuffers;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdeleteBuffers( geometryGroup );\n\n\t\t\t\t}\n\n\t\t\t\tdelete geometryGroups[ geometry.id ];\n\n\t\t\t} else {\n\n\t\t\t\tdeleteBuffers( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// TOFIX: Workaround for deleted geometry being currently bound\n\n\t\t_currentGeometryGroupHash = - 1;\n\n\t};\n\n\tvar deallocateTexture = function ( texture ) {\n\n\t\tif ( texture.image && texture.image.__webglTextureCube ) {\n\n\t\t\t// cube texture\n\n\t\t\t_gl.deleteTexture( texture.image.__webglTextureCube );\n\n\t\t\tdelete texture.image.__webglTextureCube;\n\n\t\t} else {\n\n\t\t\t// 2D texture\n\n\t\t\tif ( texture.__webglInit === undefined ) return;\n\n\t\t\t_gl.deleteTexture( texture.__webglTexture );\n\n\t\t\tdelete texture.__webglTexture;\n\t\t\tdelete texture.__webglInit;\n\n\t\t}\n\n\t};\n\n\tvar deallocateRenderTarget = function ( renderTarget ) {\n\n\t\tif ( ! renderTarget || renderTarget.__webglTexture === undefined ) return;\n\n\t\t_gl.deleteTexture( renderTarget.__webglTexture );\n\n\t\tdelete renderTarget.__webglTexture;\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );\n\t\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );\n\t\t\t_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );\n\n\t\t}\n\n\t\tdelete renderTarget.__webglFramebuffer;\n\t\tdelete renderTarget.__webglRenderbuffer;\n\n\t};\n\n\tvar deallocateMaterial = function ( material ) {\n\n\t\tvar program = material.program.program;\n\n\t\tif ( program === undefined ) return;\n\n\t\tmaterial.program = undefined;\n\n\t\t// only deallocate GL program if this was the last use of shared program\n\t\t// assumed there is only single copy of any program in the _programs list\n\t\t// (that's how it's constructed)\n\n\t\tvar i, il, programInfo;\n\t\tvar deleteProgram = false;\n\n\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\n\n\t\t\tprogramInfo = _programs[ i ];\n\n\t\t\tif ( programInfo.program === program ) {\n\n\t\t\t\tprogramInfo.usedTimes --;\n\n\t\t\t\tif ( programInfo.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteProgram = true;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( deleteProgram === true ) {\n\n\t\t\t// avoid using array.splice, this is costlier than creating new array from scratch\n\n\t\t\tvar newPrograms = [];\n\n\t\t\tfor ( i = 0, il = _programs.length; i < il; i ++ ) {\n\n\t\t\t\tprogramInfo = _programs[ i ];\n\n\t\t\t\tif ( programInfo.program !== program ) {\n\n\t\t\t\t\tnewPrograms.push( programInfo );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_programs = newPrograms;\n\n\t\t\t_gl.deleteProgram( program );\n\n\t\t\t_this.info.memory.programs --;\n\n\t\t}\n\n\t};\n\n\t// Buffer initialization\n\n\tfunction initCustomAttributes ( object ) {\n\n\t\tvar geometry = object.geometry;\n\t\tvar material = object.material;\n\n\t\tvar nvertices = geometry.vertices.length;\n\n\t\tif ( material.attributes ) {\n\n\t\t\tif ( geometry.__webglCustomAttributesList === undefined ) {\n\n\t\t\t\tgeometry.__webglCustomAttributesList = [];\n\n\t\t\t}\n\n\t\t\tfor ( var name in material.attributes ) {\n\n\t\t\t\tvar attribute = material.attributes[ name ];\n\n\t\t\t\tif ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {\n\n\t\t\t\t\tattribute.__webglInitialized = true;\n\n\t\t\t\t\tvar size = 1;   // \"f\" and \"i\"\n\n\t\t\t\t\tif ( attribute.type === 'v2' ) size = 2;\n\t\t\t\t\telse if ( attribute.type === 'v3' ) size = 3;\n\t\t\t\t\telse if ( attribute.type === 'v4' ) size = 4;\n\t\t\t\t\telse if ( attribute.type === 'c'  ) size = 3;\n\n\t\t\t\t\tattribute.size = size;\n\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\n\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\n\t\t\t\t\tattribute.buffer.belongsToAttribute = name;\n\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.__webglCustomAttributesList.push( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction initParticleBuffers ( geometry, object ) {\n\n\t\tvar nvertices = geometry.vertices.length;\n\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\n\n\t\tgeometry.__sortArray = [];\n\n\t\tgeometry.__webglParticleCount = nvertices;\n\n\t\tinitCustomAttributes( object );\n\n\t};\n\n\tfunction initLineBuffers ( geometry, object ) {\n\n\t\tvar nvertices = geometry.vertices.length;\n\n\t\tgeometry.__vertexArray = new Float32Array( nvertices * 3 );\n\t\tgeometry.__colorArray = new Float32Array( nvertices * 3 );\n\t\tgeometry.__lineDistanceArray = new Float32Array( nvertices * 1 );\n\n\t\tgeometry.__webglLineCount = nvertices;\n\n\t\tinitCustomAttributes( object );\n\n\t};\n\n\tfunction initMeshBuffers ( geometryGroup, object ) {\n\n\t\tvar geometry = object.geometry,\n\t\t\tfaces3 = geometryGroup.faces3,\n\n\t\t\tnvertices = faces3.length * 3,\n\t\t\tntris     = faces3.length * 1,\n\t\t\tnlines    = faces3.length * 3,\n\n\t\t\tmaterial = getBufferMaterial( object, geometryGroup );\n\n\t\tgeometryGroup.__vertexArray = new Float32Array( nvertices * 3 );\n\t\tgeometryGroup.__normalArray = new Float32Array( nvertices * 3 );\n\t\tgeometryGroup.__colorArray = new Float32Array( nvertices * 3 );\n\t\tgeometryGroup.__uvArray = new Float32Array( nvertices * 2 );\n\n\t\tif ( geometry.faceVertexUvs.length > 1 ) {\n\n\t\t\tgeometryGroup.__uv2Array = new Float32Array( nvertices * 2 );\n\n\t\t}\n\n\t\tif ( geometry.hasTangents ) {\n\n\t\t\tgeometryGroup.__tangentArray = new Float32Array( nvertices * 4 );\n\n\t\t}\n\n\t\tif ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {\n\n\t\t\tgeometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );\n\t\t\tgeometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );\n\n\t\t}\n\n\t\tvar UintArray = extensions.get( 'OES_element_index_uint' ) !== null && ntris > 21845 ? Uint32Array : Uint16Array; // 65535 / 3\n\n\t\tgeometryGroup.__typeArray = UintArray;\n\t\tgeometryGroup.__faceArray = new UintArray( ntris * 3 );\n\t\tgeometryGroup.__lineArray = new UintArray( nlines * 2 );\n\n\t\tvar m, ml;\n\n\t\tif ( geometryGroup.numMorphTargets ) {\n\n\t\t\tgeometryGroup.__morphTargetsArrays = [];\n\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {\n\n\t\t\t\tgeometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( geometryGroup.numMorphNormals ) {\n\n\t\t\tgeometryGroup.__morphNormalsArrays = [];\n\n\t\t\tfor ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {\n\n\t\t\t\tgeometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometryGroup.__webglFaceCount = ntris * 3;\n\t\tgeometryGroup.__webglLineCount = nlines * 2;\n\n\n\t\t// custom attributes\n\n\t\tif ( material.attributes ) {\n\n\t\t\tif ( geometryGroup.__webglCustomAttributesList === undefined ) {\n\n\t\t\t\tgeometryGroup.__webglCustomAttributesList = [];\n\n\t\t\t}\n\n\t\t\tfor ( var name in material.attributes ) {\n\n\t\t\t\t// Do a shallow copy of the attribute object so different geometryGroup chunks use different\n\t\t\t\t// attribute buffers which are correctly indexed in the setMeshBuffers function\n\n\t\t\t\tvar originalAttribute = material.attributes[ name ];\n\n\t\t\t\tvar attribute = {};\n\n\t\t\t\tfor ( var property in originalAttribute ) {\n\n\t\t\t\t\tattribute[ property ] = originalAttribute[ property ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {\n\n\t\t\t\t\tattribute.__webglInitialized = true;\n\n\t\t\t\t\tvar size = 1;   // \"f\" and \"i\"\n\n\t\t\t\t\tif ( attribute.type === 'v2' ) size = 2;\n\t\t\t\t\telse if ( attribute.type === 'v3' ) size = 3;\n\t\t\t\t\telse if ( attribute.type === 'v4' ) size = 4;\n\t\t\t\t\telse if ( attribute.type === 'c'  ) size = 3;\n\n\t\t\t\t\tattribute.size = size;\n\n\t\t\t\t\tattribute.array = new Float32Array( nvertices * size );\n\n\t\t\t\t\tattribute.buffer = _gl.createBuffer();\n\t\t\t\t\tattribute.buffer.belongsToAttribute = name;\n\n\t\t\t\t\toriginalAttribute.needsUpdate = true;\n\t\t\t\t\tattribute.__original = originalAttribute;\n\n\t\t\t\t}\n\n\t\t\t\tgeometryGroup.__webglCustomAttributesList.push( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometryGroup.__inittedArrays = true;\n\n\t};\n\n\tfunction getBufferMaterial( object, geometryGroup ) {\n\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\n\t\t\t ? object.material.materials[ geometryGroup.materialIndex ]\n\t\t\t : object.material;\n\n\t};\n\n\tfunction materialNeedsSmoothNormals ( material ) {\n\n\t\treturn material && material.shading !== undefined && material.shading === THREE.SmoothShading;\n\n\t};\n\n\t// Buffer setting\n\n\tfunction setParticleBuffers ( geometry, hint, object ) {\n\n\t\tvar v, c, vertex, offset, index, color,\n\n\t\tvertices = geometry.vertices,\n\t\tvl = vertices.length,\n\n\t\tcolors = geometry.colors,\n\t\tcl = colors.length,\n\n\t\tvertexArray = geometry.__vertexArray,\n\t\tcolorArray = geometry.__colorArray,\n\n\t\tsortArray = geometry.__sortArray,\n\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\n\t\tdirtyElements = geometry.elementsNeedUpdate,\n\t\tdirtyColors = geometry.colorsNeedUpdate,\n\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\n\t\ti, il,\n\t\ta, ca, cal, value,\n\t\tcustomAttribute;\n\n\t\tif ( object.sortParticles ) {\n\n\t\t\t_projScreenMatrixPS.copy( _projScreenMatrix );\n\t\t\t_projScreenMatrixPS.multiply( object.matrixWorld );\n\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\n\n\t\t\t\tvertex = vertices[ v ];\n\n\t\t\t\t_vector3.copy( vertex );\n\t\t\t\t_vector3.applyProjection( _projScreenMatrixPS );\n\n\t\t\t\tsortArray[ v ] = [ _vector3.z, v ];\n\n\t\t\t}\n\n\t\t\tsortArray.sort( numericalSort );\n\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\n\n\t\t\t\tvertex = vertices[ sortArray[ v ][ 1 ] ];\n\n\t\t\t\toffset = v * 3;\n\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\n\n\t\t\t\toffset = c * 3;\n\n\t\t\t\tcolor = colors[ sortArray[ c ][ 1 ] ];\n\n\t\t\t\tcolorArray[ offset ]     = color.r;\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\n\n\t\t\t}\n\n\t\t\tif ( customAttributes ) {\n\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\n\n\t\t\t\t\tif ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) ) continue;\n\n\t\t\t\t\toffset = 0;\n\n\t\t\t\t\tcal = customAttribute.value.length;\n\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ index ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\n\t\t\t\t\t\t\toffset += 2;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\n\n\t\t\t\t\t\tif ( customAttribute.type === 'c' ) {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]     = value.r;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\n\n\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\n\n\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tindex = sortArray[ ca ][ 1 ];\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ index ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\n\n\t\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( dirtyVertices ) {\n\n\t\t\t\tfor ( v = 0; v < vl; v ++ ) {\n\n\t\t\t\t\tvertex = vertices[ v ];\n\n\t\t\t\t\toffset = v * 3;\n\n\t\t\t\t\tvertexArray[ offset ]     = vertex.x;\n\t\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\n\t\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( dirtyColors ) {\n\n\t\t\t\tfor ( c = 0; c < cl; c ++ ) {\n\n\t\t\t\t\tcolor = colors[ c ];\n\n\t\t\t\t\toffset = c * 3;\n\n\t\t\t\t\tcolorArray[ offset ]     = color.r;\n\t\t\t\t\tcolorArray[ offset + 1 ] = color.g;\n\t\t\t\t\tcolorArray[ offset + 2 ] = color.b;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( customAttributes ) {\n\n\t\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n\t\t\t\t\tcustomAttribute = customAttributes[ i ];\n\n\t\t\t\t\tif ( customAttribute.needsUpdate &&\n\t\t\t\t\t\t ( customAttribute.boundTo === undefined ||\n\t\t\t\t\t\t\t customAttribute.boundTo === 'vertices' ) ) {\n\n\t\t\t\t\t\tcal = customAttribute.value.length;\n\n\t\t\t\t\t\toffset = 0;\n\n\t\t\t\t\t\tif ( customAttribute.size === 1 ) {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\n\t\t\t\t\t\t\t\toffset += 2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\n\n\t\t\t\t\t\t\tif ( customAttribute.type === 'c' ) {\n\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.r;\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\n\n\t\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\t\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\n\n\t\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]      = value.x;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\n\n\t\t\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dirtyVertices || object.sortParticles ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyColors || object.sortParticles ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n\t\t}\n\n\t\tif ( customAttributes ) {\n\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tcustomAttribute = customAttributes[ i ];\n\n\t\t\t\tif ( customAttribute.needsUpdate || object.sortParticles ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setLineBuffers ( geometry, hint ) {\n\n\t\tvar v, c, d, vertex, offset, color,\n\n\t\tvertices = geometry.vertices,\n\t\tcolors = geometry.colors,\n\t\tlineDistances = geometry.lineDistances,\n\n\t\tvl = vertices.length,\n\t\tcl = colors.length,\n\t\tdl = lineDistances.length,\n\n\t\tvertexArray = geometry.__vertexArray,\n\t\tcolorArray = geometry.__colorArray,\n\t\tlineDistanceArray = geometry.__lineDistanceArray,\n\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\n\t\tdirtyColors = geometry.colorsNeedUpdate,\n\t\tdirtyLineDistances = geometry.lineDistancesNeedUpdate,\n\n\t\tcustomAttributes = geometry.__webglCustomAttributesList,\n\n\t\ti, il,\n\t\ta, ca, cal, value,\n\t\tcustomAttribute;\n\n\t\tif ( dirtyVertices ) {\n\n\t\t\tfor ( v = 0; v < vl; v ++ ) {\n\n\t\t\t\tvertex = vertices[ v ];\n\n\t\t\t\toffset = v * 3;\n\n\t\t\t\tvertexArray[ offset ]     = vertex.x;\n\t\t\t\tvertexArray[ offset + 1 ] = vertex.y;\n\t\t\t\tvertexArray[ offset + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyColors ) {\n\n\t\t\tfor ( c = 0; c < cl; c ++ ) {\n\n\t\t\t\tcolor = colors[ c ];\n\n\t\t\t\toffset = c * 3;\n\n\t\t\t\tcolorArray[ offset ]     = color.r;\n\t\t\t\tcolorArray[ offset + 1 ] = color.g;\n\t\t\t\tcolorArray[ offset + 2 ] = color.b;\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyLineDistances ) {\n\n\t\t\tfor ( d = 0; d < dl; d ++ ) {\n\n\t\t\t\tlineDistanceArray[ d ] = lineDistances[ d ];\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );\n\n\t\t}\n\n\t\tif ( customAttributes ) {\n\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tcustomAttribute = customAttributes[ i ];\n\n\t\t\t\tif ( customAttribute.needsUpdate &&\n\t\t\t\t\t ( customAttribute.boundTo === undefined ||\n\t\t\t\t\t\t customAttribute.boundTo === 'vertices' ) ) {\n\n\t\t\t\t\toffset = 0;\n\n\t\t\t\t\tcal = customAttribute.value.length;\n\n\t\t\t\t\tif ( customAttribute.size === 1 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tcustomAttribute.array[ ca ] = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 2 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\n\t\t\t\t\t\t\toffset += 2;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 3 ) {\n\n\t\t\t\t\t\tif ( customAttribute.type === 'c' ) {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.r;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.g;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.b;\n\n\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset ]   = value.x;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1 ] = value.y;\n\t\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2 ] = value.z;\n\n\t\t\t\t\t\t\t\toffset += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.size === 4 ) {\n\n\t\t\t\t\t\tfor ( ca = 0; ca < cal; ca ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ ca ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset ]    = value.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 1  ] = value.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 2  ] = value.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset + 3  ] = value.w;\n\n\t\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setMeshBuffers( geometryGroup, object, hint, dispose, material ) {\n\n\t\tif ( ! geometryGroup.__inittedArrays ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar needsSmoothNormals = materialNeedsSmoothNormals( material );\n\n\t\tvar f, fl, fi, face,\n\t\tvertexNormals, faceNormal, normal,\n\t\tvertexColors, faceColor,\n\t\tvertexTangents,\n\t\tuv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,\n\t\tc1, c2, c3,\n\t\tsw1, sw2, sw3, sw4,\n\t\tsi1, si2, si3, si4,\n\t\tsa1, sa2, sa3, sa4,\n\t\tsb1, sb2, sb3, sb4,\n\t\tm, ml, i, il,\n\t\tvn, uvi, uv2i,\n\t\tvk, vkl, vka,\n\t\tnka, chf, faceVertexNormals,\n\t\ta,\n\n\t\tvertexIndex = 0,\n\n\t\toffset = 0,\n\t\toffset_uv = 0,\n\t\toffset_uv2 = 0,\n\t\toffset_face = 0,\n\t\toffset_normal = 0,\n\t\toffset_tangent = 0,\n\t\toffset_line = 0,\n\t\toffset_color = 0,\n\t\toffset_skin = 0,\n\t\toffset_morphTarget = 0,\n\t\toffset_custom = 0,\n\t\toffset_customSrc = 0,\n\n\t\tvalue,\n\n\t\tvertexArray = geometryGroup.__vertexArray,\n\t\tuvArray = geometryGroup.__uvArray,\n\t\tuv2Array = geometryGroup.__uv2Array,\n\t\tnormalArray = geometryGroup.__normalArray,\n\t\ttangentArray = geometryGroup.__tangentArray,\n\t\tcolorArray = geometryGroup.__colorArray,\n\n\t\tskinIndexArray = geometryGroup.__skinIndexArray,\n\t\tskinWeightArray = geometryGroup.__skinWeightArray,\n\n\t\tmorphTargetsArrays = geometryGroup.__morphTargetsArrays,\n\t\tmorphNormalsArrays = geometryGroup.__morphNormalsArrays,\n\n\t\tcustomAttributes = geometryGroup.__webglCustomAttributesList,\n\t\tcustomAttribute,\n\n\t\tfaceArray = geometryGroup.__faceArray,\n\t\tlineArray = geometryGroup.__lineArray,\n\n\t\tgeometry = object.geometry, // this is shared for all chunks\n\n\t\tdirtyVertices = geometry.verticesNeedUpdate,\n\t\tdirtyElements = geometry.elementsNeedUpdate,\n\t\tdirtyUvs = geometry.uvsNeedUpdate,\n\t\tdirtyNormals = geometry.normalsNeedUpdate,\n\t\tdirtyTangents = geometry.tangentsNeedUpdate,\n\t\tdirtyColors = geometry.colorsNeedUpdate,\n\t\tdirtyMorphTargets = geometry.morphTargetsNeedUpdate,\n\n\t\tvertices = geometry.vertices,\n\t\tchunk_faces3 = geometryGroup.faces3,\n\t\tobj_faces = geometry.faces,\n\n\t\tobj_uvs  = geometry.faceVertexUvs[ 0 ],\n\t\tobj_uvs2 = geometry.faceVertexUvs[ 1 ],\n\n\t\tobj_colors = geometry.colors,\n\n\t\tobj_skinIndices = geometry.skinIndices,\n\t\tobj_skinWeights = geometry.skinWeights,\n\n\t\tmorphTargets = geometry.morphTargets,\n\t\tmorphNormals = geometry.morphNormals;\n\n\t\tif ( dirtyVertices ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\tv1 = vertices[ face.a ];\n\t\t\t\tv2 = vertices[ face.b ];\n\t\t\t\tv3 = vertices[ face.c ];\n\n\t\t\t\tvertexArray[ offset ]     = v1.x;\n\t\t\t\tvertexArray[ offset + 1 ] = v1.y;\n\t\t\t\tvertexArray[ offset + 2 ] = v1.z;\n\n\t\t\t\tvertexArray[ offset + 3 ] = v2.x;\n\t\t\t\tvertexArray[ offset + 4 ] = v2.y;\n\t\t\t\tvertexArray[ offset + 5 ] = v2.z;\n\n\t\t\t\tvertexArray[ offset + 6 ] = v3.x;\n\t\t\t\tvertexArray[ offset + 7 ] = v3.y;\n\t\t\t\tvertexArray[ offset + 8 ] = v3.z;\n\n\t\t\t\toffset += 9;\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyMorphTargets ) {\n\n\t\t\tfor ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {\n\n\t\t\t\toffset_morphTarget = 0;\n\n\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\tchf = chunk_faces3[ f ];\n\t\t\t\t\tface = obj_faces[ chf ];\n\n\t\t\t\t\t// morph positions\n\n\t\t\t\t\tv1 = morphTargets[ vk ].vertices[ face.a ];\n\t\t\t\t\tv2 = morphTargets[ vk ].vertices[ face.b ];\n\t\t\t\t\tv3 = morphTargets[ vk ].vertices[ face.c ];\n\n\t\t\t\t\tvka = morphTargetsArrays[ vk ];\n\n\t\t\t\t\tvka[ offset_morphTarget ]     = v1.x;\n\t\t\t\t\tvka[ offset_morphTarget + 1 ] = v1.y;\n\t\t\t\t\tvka[ offset_morphTarget + 2 ] = v1.z;\n\n\t\t\t\t\tvka[ offset_morphTarget + 3 ] = v2.x;\n\t\t\t\t\tvka[ offset_morphTarget + 4 ] = v2.y;\n\t\t\t\t\tvka[ offset_morphTarget + 5 ] = v2.z;\n\n\t\t\t\t\tvka[ offset_morphTarget + 6 ] = v3.x;\n\t\t\t\t\tvka[ offset_morphTarget + 7 ] = v3.y;\n\t\t\t\t\tvka[ offset_morphTarget + 8 ] = v3.z;\n\n\t\t\t\t\t// morph normals\n\n\t\t\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\t\t\tif ( needsSmoothNormals ) {\n\n\t\t\t\t\t\t\tfaceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];\n\n\t\t\t\t\t\t\tn1 = faceVertexNormals.a;\n\t\t\t\t\t\t\tn2 = faceVertexNormals.b;\n\t\t\t\t\t\t\tn3 = faceVertexNormals.c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tn1 = morphNormals[ vk ].faceNormals[ chf ];\n\t\t\t\t\t\t\tn2 = n1;\n\t\t\t\t\t\t\tn3 = n1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnka = morphNormalsArrays[ vk ];\n\n\t\t\t\t\t\tnka[ offset_morphTarget ]     = n1.x;\n\t\t\t\t\t\tnka[ offset_morphTarget + 1 ] = n1.y;\n\t\t\t\t\t\tnka[ offset_morphTarget + 2 ] = n1.z;\n\n\t\t\t\t\t\tnka[ offset_morphTarget + 3 ] = n2.x;\n\t\t\t\t\t\tnka[ offset_morphTarget + 4 ] = n2.y;\n\t\t\t\t\t\tnka[ offset_morphTarget + 5 ] = n2.z;\n\n\t\t\t\t\t\tnka[ offset_morphTarget + 6 ] = n3.x;\n\t\t\t\t\t\tnka[ offset_morphTarget + 7 ] = n3.y;\n\t\t\t\t\t\tnka[ offset_morphTarget + 8 ] = n3.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//\n\n\t\t\t\t\toffset_morphTarget += 9;\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );\n\n\t\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );\n\t\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( obj_skinWeights.length ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\t// weights\n\n\t\t\t\tsw1 = obj_skinWeights[ face.a ];\n\t\t\t\tsw2 = obj_skinWeights[ face.b ];\n\t\t\t\tsw3 = obj_skinWeights[ face.c ];\n\n\t\t\t\tskinWeightArray[ offset_skin ]     = sw1.x;\n\t\t\t\tskinWeightArray[ offset_skin + 1 ] = sw1.y;\n\t\t\t\tskinWeightArray[ offset_skin + 2 ] = sw1.z;\n\t\t\t\tskinWeightArray[ offset_skin + 3 ] = sw1.w;\n\n\t\t\t\tskinWeightArray[ offset_skin + 4 ] = sw2.x;\n\t\t\t\tskinWeightArray[ offset_skin + 5 ] = sw2.y;\n\t\t\t\tskinWeightArray[ offset_skin + 6 ] = sw2.z;\n\t\t\t\tskinWeightArray[ offset_skin + 7 ] = sw2.w;\n\n\t\t\t\tskinWeightArray[ offset_skin + 8 ]  = sw3.x;\n\t\t\t\tskinWeightArray[ offset_skin + 9 ]  = sw3.y;\n\t\t\t\tskinWeightArray[ offset_skin + 10 ] = sw3.z;\n\t\t\t\tskinWeightArray[ offset_skin + 11 ] = sw3.w;\n\n\t\t\t\t// indices\n\n\t\t\t\tsi1 = obj_skinIndices[ face.a ];\n\t\t\t\tsi2 = obj_skinIndices[ face.b ];\n\t\t\t\tsi3 = obj_skinIndices[ face.c ];\n\n\t\t\t\tskinIndexArray[ offset_skin ]     = si1.x;\n\t\t\t\tskinIndexArray[ offset_skin + 1 ] = si1.y;\n\t\t\t\tskinIndexArray[ offset_skin + 2 ] = si1.z;\n\t\t\t\tskinIndexArray[ offset_skin + 3 ] = si1.w;\n\n\t\t\t\tskinIndexArray[ offset_skin + 4 ] = si2.x;\n\t\t\t\tskinIndexArray[ offset_skin + 5 ] = si2.y;\n\t\t\t\tskinIndexArray[ offset_skin + 6 ] = si2.z;\n\t\t\t\tskinIndexArray[ offset_skin + 7 ] = si2.w;\n\n\t\t\t\tskinIndexArray[ offset_skin + 8 ]  = si3.x;\n\t\t\t\tskinIndexArray[ offset_skin + 9 ]  = si3.y;\n\t\t\t\tskinIndexArray[ offset_skin + 10 ] = si3.z;\n\t\t\t\tskinIndexArray[ offset_skin + 11 ] = si3.w;\n\n\t\t\t\toffset_skin += 12;\n\n\t\t\t}\n\n\t\t\tif ( offset_skin > 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dirtyColors ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\tvertexColors = face.vertexColors;\n\t\t\t\tfaceColor = face.color;\n\n\t\t\t\tif ( vertexColors.length === 3 && material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\tc1 = vertexColors[ 0 ];\n\t\t\t\t\tc2 = vertexColors[ 1 ];\n\t\t\t\t\tc3 = vertexColors[ 2 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tc1 = faceColor;\n\t\t\t\t\tc2 = faceColor;\n\t\t\t\t\tc3 = faceColor;\n\n\t\t\t\t}\n\n\t\t\t\tcolorArray[ offset_color ]     = c1.r;\n\t\t\t\tcolorArray[ offset_color + 1 ] = c1.g;\n\t\t\t\tcolorArray[ offset_color + 2 ] = c1.b;\n\n\t\t\t\tcolorArray[ offset_color + 3 ] = c2.r;\n\t\t\t\tcolorArray[ offset_color + 4 ] = c2.g;\n\t\t\t\tcolorArray[ offset_color + 5 ] = c2.b;\n\n\t\t\t\tcolorArray[ offset_color + 6 ] = c3.r;\n\t\t\t\tcolorArray[ offset_color + 7 ] = c3.g;\n\t\t\t\tcolorArray[ offset_color + 8 ] = c3.b;\n\n\t\t\t\toffset_color += 9;\n\n\t\t\t}\n\n\t\t\tif ( offset_color > 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dirtyTangents && geometry.hasTangents ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\tvertexTangents = face.vertexTangents;\n\n\t\t\t\tt1 = vertexTangents[ 0 ];\n\t\t\t\tt2 = vertexTangents[ 1 ];\n\t\t\t\tt3 = vertexTangents[ 2 ];\n\n\t\t\t\ttangentArray[ offset_tangent ]     = t1.x;\n\t\t\t\ttangentArray[ offset_tangent + 1 ] = t1.y;\n\t\t\t\ttangentArray[ offset_tangent + 2 ] = t1.z;\n\t\t\t\ttangentArray[ offset_tangent + 3 ] = t1.w;\n\n\t\t\t\ttangentArray[ offset_tangent + 4 ] = t2.x;\n\t\t\t\ttangentArray[ offset_tangent + 5 ] = t2.y;\n\t\t\t\ttangentArray[ offset_tangent + 6 ] = t2.z;\n\t\t\t\ttangentArray[ offset_tangent + 7 ] = t2.w;\n\n\t\t\t\ttangentArray[ offset_tangent + 8 ]  = t3.x;\n\t\t\t\ttangentArray[ offset_tangent + 9 ]  = t3.y;\n\t\t\t\ttangentArray[ offset_tangent + 10 ] = t3.z;\n\t\t\t\ttangentArray[ offset_tangent + 11 ] = t3.w;\n\n\t\t\t\toffset_tangent += 12;\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyNormals ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\tvertexNormals = face.vertexNormals;\n\t\t\t\tfaceNormal = face.normal;\n\n\t\t\t\tif ( vertexNormals.length === 3 && needsSmoothNormals ) {\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tvn = vertexNormals[ i ];\n\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = vn.x;\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = vn.y;\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = vn.z;\n\n\t\t\t\t\t\toffset_normal += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tnormalArray[ offset_normal ]     = faceNormal.x;\n\t\t\t\t\t\tnormalArray[ offset_normal + 1 ] = faceNormal.y;\n\t\t\t\t\t\tnormalArray[ offset_normal + 2 ] = faceNormal.z;\n\n\t\t\t\t\t\toffset_normal += 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );\n\n\t\t}\n\n\t\tif ( dirtyUvs && obj_uvs ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tfi = chunk_faces3[ f ];\n\n\t\t\t\tuv = obj_uvs[ fi ];\n\n\t\t\t\tif ( uv === undefined ) continue;\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tuvi = uv[ i ];\n\n\t\t\t\t\tuvArray[ offset_uv ]     = uvi.x;\n\t\t\t\t\tuvArray[ offset_uv + 1 ] = uvi.y;\n\n\t\t\t\t\toffset_uv += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( offset_uv > 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dirtyUvs && obj_uvs2 ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tfi = chunk_faces3[ f ];\n\n\t\t\t\tuv2 = obj_uvs2[ fi ];\n\n\t\t\t\tif ( uv2 === undefined ) continue;\n\n\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tuv2i = uv2[ i ];\n\n\t\t\t\t\tuv2Array[ offset_uv2 ]     = uv2i.x;\n\t\t\t\t\tuv2Array[ offset_uv2 + 1 ] = uv2i.y;\n\n\t\t\t\t\toffset_uv2 += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( offset_uv2 > 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dirtyElements ) {\n\n\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\tfaceArray[ offset_face ]   = vertexIndex;\n\t\t\t\tfaceArray[ offset_face + 1 ] = vertexIndex + 1;\n\t\t\t\tfaceArray[ offset_face + 2 ] = vertexIndex + 2;\n\n\t\t\t\toffset_face += 3;\n\n\t\t\t\tlineArray[ offset_line ]     = vertexIndex;\n\t\t\t\tlineArray[ offset_line + 1 ] = vertexIndex + 1;\n\n\t\t\t\tlineArray[ offset_line + 2 ] = vertexIndex;\n\t\t\t\tlineArray[ offset_line + 3 ] = vertexIndex + 2;\n\n\t\t\t\tlineArray[ offset_line + 4 ] = vertexIndex + 1;\n\t\t\t\tlineArray[ offset_line + 5 ] = vertexIndex + 2;\n\n\t\t\t\toffset_line += 6;\n\n\t\t\t\tvertexIndex += 3;\n\n\t\t\t}\n\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );\n\n\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\n\t\t\t_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );\n\n\t\t}\n\n\t\tif ( customAttributes ) {\n\n\t\t\tfor ( i = 0, il = customAttributes.length; i < il; i ++ ) {\n\n\t\t\t\tcustomAttribute = customAttributes[ i ];\n\n\t\t\t\tif ( ! customAttribute.__original.needsUpdate ) continue;\n\n\t\t\t\toffset_custom = 0;\n\t\t\t\toffset_customSrc = 0;\n\n\t\t\t\tif ( customAttribute.size === 1 ) {\n\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = customAttribute.value[ face.a ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];\n\n\t\t\t\t\t\t\toffset_custom += 3;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faces' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = value;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = value;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = value;\n\n\t\t\t\t\t\t\toffset_custom += 3;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( customAttribute.size === 2 ) {\n\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = v1.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\n\n\t\t\t\t\t\t\toffset_custom += 6;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faces' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = value;\n\t\t\t\t\t\t\tv2 = value;\n\t\t\t\t\t\t\tv3 = value;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = v1.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1.y;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v2.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2.y;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v3.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v3.y;\n\n\t\t\t\t\t\t\toffset_custom += 6;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( customAttribute.size === 3 ) {\n\n\t\t\t\t\tvar pp;\n\n\t\t\t\t\tif ( customAttribute.type === 'c' ) {\n\n\t\t\t\t\t\tpp = [ 'r', 'g', 'b' ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpp = [ 'x', 'y', 'z' ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\toffset_custom += 9;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faces' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = value;\n\t\t\t\t\t\t\tv2 = value;\n\t\t\t\t\t\t\tv3 = value;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\toffset_custom += 9;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faceVertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = value[ 0 ];\n\t\t\t\t\t\t\tv2 = value[ 1 ];\n\t\t\t\t\t\t\tv3 = value[ 2 ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];\n\n\t\t\t\t\t\t\toffset_custom += 9;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( customAttribute.size === 4 ) {\n\n\t\t\t\t\tif ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tface = obj_faces[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = customAttribute.value[ face.a ];\n\t\t\t\t\t\t\tv2 = customAttribute.value[ face.b ];\n\t\t\t\t\t\t\tv3 = customAttribute.value[ face.c ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ]   = v1.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\n\n\t\t\t\t\t\t\toffset_custom += 12;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faces' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = value;\n\t\t\t\t\t\t\tv2 = value;\n\t\t\t\t\t\t\tv3 = value;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ]   = v1.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\n\n\t\t\t\t\t\t\toffset_custom += 12;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( customAttribute.boundTo === 'faceVertices' ) {\n\n\t\t\t\t\t\tfor ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\t\tvalue = customAttribute.value[ chunk_faces3[ f ] ];\n\n\t\t\t\t\t\t\tv1 = value[ 0 ];\n\t\t\t\t\t\t\tv2 = value[ 1 ];\n\t\t\t\t\t\t\tv3 = value[ 2 ];\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom  ]   = v1.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 1  ] = v1.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 2  ] = v1.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 3  ] = v1.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 4  ] = v2.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 5  ] = v2.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 6  ] = v2.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 7  ] = v2.w;\n\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 8  ] = v3.x;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 9  ] = v3.y;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 10 ] = v3.z;\n\t\t\t\t\t\t\tcustomAttribute.array[ offset_custom + 11 ] = v3.w;\n\n\t\t\t\t\t\t\toffset_custom += 12;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( dispose ) {\n\n\t\t\tdelete geometryGroup.__inittedArrays;\n\t\t\tdelete geometryGroup.__colorArray;\n\t\t\tdelete geometryGroup.__normalArray;\n\t\t\tdelete geometryGroup.__tangentArray;\n\t\t\tdelete geometryGroup.__uvArray;\n\t\t\tdelete geometryGroup.__uv2Array;\n\t\t\tdelete geometryGroup.__faceArray;\n\t\t\tdelete geometryGroup.__vertexArray;\n\t\t\tdelete geometryGroup.__lineArray;\n\t\t\tdelete geometryGroup.__skinIndexArray;\n\t\t\tdelete geometryGroup.__skinWeightArray;\n\n\t\t}\n\n\t};\n\n\tfunction setDirectBuffers( geometry ) {\n\n\t\tvar attributes = geometry.attributes;\n\t\tvar attributesKeys = geometry.attributesKeys;\n\n\t\tfor ( var i = 0, l = attributesKeys.length; i < l; i ++ ) {\n\n\t\t\tvar key = attributesKeys[ i ];\n\t\t\tvar attribute = attributes[ key ];\n\n\t\t\tif ( attribute.buffer === undefined ) {\n\n\t\t\t\tattribute.buffer = _gl.createBuffer();\n\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( attribute.needsUpdate === true ) {\n\n\t\t\t\tvar bufferType = ( key === 'index' ) ? _gl.ELEMENT_ARRAY_BUFFER : _gl.ARRAY_BUFFER;\n\n\t\t\t\t_gl.bindBuffer( bufferType, attribute.buffer );\n\t\t\t\t_gl.bufferData( bufferType, attribute.array, _gl.STATIC_DRAW );\n\n\t\t\t\tattribute.needsUpdate = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferImmediate = function ( object, program, material ) {\n\n\t\tinitAttributes();\n\n\t\tif ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();\n\t\tif ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\t\t\tenableAttribute( program.attributes.position );\n\t\t\t_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );\n\n\t\t\tif ( material.shading === THREE.FlatShading ) {\n\n\t\t\t\tvar nx, ny, nz,\n\t\t\t\t\tnax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,\n\t\t\t\t\tnormalArray,\n\t\t\t\t\ti, il = object.count * 3;\n\n\t\t\t\tfor ( i = 0; i < il; i += 9 ) {\n\n\t\t\t\t\tnormalArray = object.normalArray;\n\n\t\t\t\t\tnax  = normalArray[ i ];\n\t\t\t\t\tnay  = normalArray[ i + 1 ];\n\t\t\t\t\tnaz  = normalArray[ i + 2 ];\n\n\t\t\t\t\tnbx  = normalArray[ i + 3 ];\n\t\t\t\t\tnby  = normalArray[ i + 4 ];\n\t\t\t\t\tnbz  = normalArray[ i + 5 ];\n\n\t\t\t\t\tncx  = normalArray[ i + 6 ];\n\t\t\t\t\tncy  = normalArray[ i + 7 ];\n\t\t\t\t\tncz  = normalArray[ i + 8 ];\n\n\t\t\t\t\tnx = ( nax + nbx + ncx ) / 3;\n\t\t\t\t\tny = ( nay + nby + ncy ) / 3;\n\t\t\t\t\tnz = ( naz + nbz + ncz ) / 3;\n\n\t\t\t\t\tnormalArray[ i ]   = nx;\n\t\t\t\t\tnormalArray[ i + 1 ] = ny;\n\t\t\t\t\tnormalArray[ i + 2 ] = nz;\n\n\t\t\t\t\tnormalArray[ i + 3 ] = nx;\n\t\t\t\t\tnormalArray[ i + 4 ] = ny;\n\t\t\t\t\tnormalArray[ i + 5 ] = nz;\n\n\t\t\t\t\tnormalArray[ i + 6 ] = nx;\n\t\t\t\t\tnormalArray[ i + 7 ] = ny;\n\t\t\t\t\tnormalArray[ i + 8 ] = nz;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\t\t\tenableAttribute( program.attributes.normal );\n\t\t\t_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs && material.map ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\t\t\tenableAttribute( program.attributes.uv );\n\t\t\t_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\t\t\tenableAttribute( program.attributes.color );\n\t\t\t_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.attributes;\n\t\tvar programAttributesKeys = program.attributesKeys;\n\n\t\tfor ( var i = 0, l = programAttributesKeys.length; i < l; i ++ ) {\n\n\t\t\tvar key = programAttributesKeys[ i ];\n\t\t\tvar programAttribute = programAttributes[ key ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ key ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryAttribute.buffer );\n\n\t\t\t\t\tenableAttribute( programAttribute );\n\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\n\n\t\t\t\t} else if ( material.defaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tif ( material.defaultAttributeValues[ key ].length === 2 ) {\n\n\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, material.defaultAttributeValues[ key ] );\n\n\t\t\t\t\t} else if ( material.defaultAttributeValues[ key ].length === 3 ) {\n\n\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, material.defaultAttributeValues[ key ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tthis.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {\n\n\t\tif ( material.visible === false ) return;\n\n\t\tvar program = setProgram( camera, lights, fog, material, object );\n\n\t\tvar updateBuffers = false,\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\n\t\t\tgeometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\n\n\t\tif ( geometryHash !== _currentGeometryGroupHash ) {\n\n\t\t\t_currentGeometryGroupHash = geometryHash;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tinitAttributes();\n\n\t\t}\n\n\t\t// render mesh\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar mode = material.wireframe === true ? _gl.LINES : _gl.TRIANGLES;\n\n\t\t\tvar index = geometry.attributes.index;\n\n\t\t\tif ( index ) {\n\n\t\t\t\t// indexed triangles\n\n\t\t\t\tvar type, size;\n\n\t\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\n\n\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\t\t\tsize = 4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\t\t\tsize = 2;\n\n\t\t\t\t}\n\n\t\t\t\tvar offsets = geometry.offsets;\n\n\t\t\t\tif ( offsets.length === 0 ) {\n\n\t\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\t\tsetupVertexAttributes( material, program, geometry, 0 );\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.drawElements( mode, index.array.length, type, 0 );\n\n\t\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t\t_this.info.render.vertices += index.array.length; // not really true, here vertices can be shared\n\t\t\t\t\t_this.info.render.faces += index.array.length / 3;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if there is more than 1 chunk\n\t\t\t\t\t// must set attribute pointers to use new offsets for each chunk\n\t\t\t\t\t// even if geometry and materials didn't change\n\n\t\t\t\t\tupdateBuffers = true;\n\n\t\t\t\t\tfor ( var i = 0, il = offsets.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar startIndex = offsets[ i ].index;\n\n\t\t\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\t\t\tsetupVertexAttributes( material, program, geometry, startIndex );\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// render indexed triangles\n\n\t\t\t\t\t\t_gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size );\n\n\t\t\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t\t\t_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\n\t\t\t\t\t\t_this.info.render.faces += offsets[ i ].count / 3;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed triangles\n\n\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\tsetupVertexAttributes( material, program, geometry, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tvar position = geometry.attributes[ 'position' ];\n\n\t\t\t\t// render non-indexed triangles\n\n\t\t\t\t_gl.drawArrays( mode, 0, position.array.length / 3 );\n\n\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t_this.info.render.vertices += position.array.length / 3;\n\t\t\t\t_this.info.render.faces += position.array.length / 9;\n\n\t\t\t}\n\n\t\t} else if ( object instanceof THREE.PointCloud ) {\n\n\t\t\t// render particles\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry, 0 );\n\n\t\t\t}\n\n\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t// render particles\n\n\t\t\t_gl.drawArrays( _gl.POINTS, 0, position.array.length / 3 );\n\n\t\t\t_this.info.render.calls ++;\n\t\t\t_this.info.render.points += position.array.length / 3;\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\n\n\t\t\tsetLineWidth( material.linewidth );\n\n\t\t\tvar index = geometry.attributes.index;\n\n\t\t\tif ( index ) {\n\n\t\t\t\t// indexed lines\n\n\t\t\t\tvar type, size;\n\n\t\t\t\tif ( index.array instanceof Uint32Array ) {\n\n\t\t\t\t\ttype = _gl.UNSIGNED_INT;\n\t\t\t\t\tsize = 4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\n\t\t\t\t\tsize = 2;\n\n\t\t\t\t}\n\n\t\t\t\tvar offsets = geometry.offsets;\n\n\t\t\t\tif ( offsets.length === 0 ) {\n\n\t\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\t\tsetupVertexAttributes( material, program, geometry, 0 );\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.drawElements( mode, index.array.length, type, 0 ); // 2 bytes per Uint16Array\n\n\t\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t\t_this.info.render.vertices += index.array.length; // not really true, here vertices can be shared\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if there is more than 1 chunk\n\t\t\t\t\t// must set attribute pointers to use new offsets for each chunk\n\t\t\t\t\t// even if geometry and materials didn't change\n\n\t\t\t\t\tif ( offsets.length > 1 ) updateBuffers = true;\n\n\t\t\t\t\tfor ( var i = 0, il = offsets.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar startIndex = offsets[ i ].index;\n\n\t\t\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\t\t\tsetupVertexAttributes( material, program, geometry, startIndex );\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// render indexed lines\n\n\t\t\t\t\t\t_gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size ); // 2 bytes per Uint16Array\n\n\t\t\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t\t\t_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed lines\n\n\t\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t\tsetupVertexAttributes( material, program, geometry, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tvar position = geometry.attributes.position;\n\n\t\t\t\t_gl.drawArrays( mode, 0, position.array.length / 3 );\n\n\t\t\t\t_this.info.render.calls ++;\n\t\t\t\t_this.info.render.points += position.array.length / 3;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {\n\n\t\tif ( material.visible === false ) return;\n\n\t\tvar program = setProgram( camera, lights, fog, material, object );\n\n\t\tvar attributes = program.attributes;\n\n\t\tvar updateBuffers = false,\n\t\t\twireframeBit = material.wireframe ? 1 : 0,\n\t\t\tgeometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;\n\n\t\tif ( geometryGroupHash !== _currentGeometryGroupHash ) {\n\n\t\t\t_currentGeometryGroupHash = geometryGroupHash;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tinitAttributes();\n\n\t\t}\n\n\t\t// vertices\n\n\t\tif ( ! material.morphTargets && attributes.position >= 0 ) {\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n\t\t\t\tenableAttribute( attributes.position );\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( object.morphTargetBase ) {\n\n\t\t\t\tsetupMorphTargets( material, geometryGroup, object );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tif ( updateBuffers ) {\n\n\t\t\t// custom attributes\n\n\t\t\t// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers\n\n\t\t\tif ( geometryGroup.__webglCustomAttributesList ) {\n\n\t\t\t\tfor ( var i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar attribute = geometryGroup.__webglCustomAttributesList[ i ];\n\n\t\t\t\t\tif ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );\n\t\t\t\t\t\tenableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// colors\n\n\t\t\tif ( attributes.color >= 0 ) {\n\n\t\t\t\tif ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );\n\t\t\t\t\tenableAttribute( attributes.color );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t} else if ( material.defaultAttributeValues !== undefined ) {\n\n\n\t\t\t\t\t_gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( attributes.normal >= 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );\n\t\t\t\tenableAttribute( attributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\t// tangents\n\n\t\t\tif ( attributes.tangent >= 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );\n\t\t\t\tenableAttribute( attributes.tangent );\n\t\t\t\t_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tif ( attributes.uv >= 0 ) {\n\n\t\t\t\tif ( object.geometry.faceVertexUvs[ 0 ] ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );\n\t\t\t\t\tenableAttribute( attributes.uv );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t} else if ( material.defaultAttributeValues !== undefined ) {\n\n\n\t\t\t\t\t_gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( attributes.uv2 >= 0 ) {\n\n\t\t\t\tif ( object.geometry.faceVertexUvs[ 1 ] ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );\n\t\t\t\t\tenableAttribute( attributes.uv2 );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t} else if ( material.defaultAttributeValues !== undefined ) {\n\n\n\t\t\t\t\t_gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.skinning &&\n\t\t\t\t attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );\n\t\t\t\tenableAttribute( attributes.skinIndex );\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );\n\t\t\t\tenableAttribute( attributes.skinWeight );\n\t\t\t\t_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tif ( attributes.lineDistance >= 0 ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );\n\t\t\t\tenableAttribute( attributes.lineDistance );\n\t\t\t\t_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t\t// render mesh\n\n\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\tvar type = geometryGroup.__typeArray === Uint32Array ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;\n\n\t\t\t// wireframe\n\n\t\t\tif ( material.wireframe ) {\n\n\t\t\t\tsetLineWidth( material.wireframeLinewidth );\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );\n\t\t\t\t_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, type, 0 );\n\n\t\t\t// triangles\n\n\t\t\t} else {\n\n\t\t\t\tif ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );\n\t\t\t\t_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, type, 0 );\n\n\t\t\t}\n\n\t\t\t_this.info.render.calls ++;\n\t\t\t_this.info.render.vertices += geometryGroup.__webglFaceCount;\n\t\t\t_this.info.render.faces += geometryGroup.__webglFaceCount / 3;\n\n\t\t// render lines\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tvar mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;\n\n\t\t\tsetLineWidth( material.linewidth );\n\n\t\t\t_gl.drawArrays( mode, 0, geometryGroup.__webglLineCount );\n\n\t\t\t_this.info.render.calls ++;\n\n\t\t// render particles\n\n\t\t} else if ( object instanceof THREE.PointCloud ) {\n\n\t\t\t_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );\n\n\t\t\t_this.info.render.calls ++;\n\t\t\t_this.info.render.points += geometryGroup.__webglParticleCount;\n\n\t\t}\n\n\t};\n\n\tfunction initAttributes() {\n\n\t\tfor ( var i = 0, l = _newAttributes.length; i < l; i ++ ) {\n\n\t\t\t_newAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\t_newAttributes[ attribute ] = 1;\n\n\t\tif ( _enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t_gl.enableVertexAttribArray( attribute );\n\t\t\t_enabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tfor ( var i = 0, l = _enabledAttributes.length; i < l; i ++ ) {\n\n\t\t\tif ( _enabledAttributes[ i ] !== _newAttributes[ i ] ) {\n\n\t\t\t\t_gl.disableVertexAttribArray( i );\n\t\t\t\t_enabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setupMorphTargets ( material, geometryGroup, object ) {\n\n\t\t// set base\n\n\t\tvar attributes = material.program.attributes;\n\n\t\tif ( object.morphTargetBase !== - 1 && attributes.position >= 0 ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );\n\t\t\tenableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t} else if ( attributes.position >= 0 ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );\n\t\t\tenableAttribute( attributes.position );\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.morphTargetForcedOrder.length ) {\n\n\t\t\t// set forced order\n\n\t\t\tvar m = 0;\n\t\t\tvar order = object.morphTargetForcedOrder;\n\t\t\tvar influences = object.morphTargetInfluences;\n\n\t\t\twhile ( m < material.numSupportedMorphTargets && m < order.length ) {\n\n\t\t\t\tif ( attributes[ 'morphTarget' + m ] >= 0 ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );\n\t\t\t\t\tenableAttribute( attributes[ 'morphTarget' + m ] );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );\n\t\t\t\t\tenableAttribute( attributes[ 'morphNormal' + m ] );\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];\n\n\t\t\t\tm ++;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// find the most influencing\n\n\t\t\tvar influence, activeInfluenceIndices = [];\n\t\t\tvar influences = object.morphTargetInfluences;\n\t\t\tvar i, il = influences.length;\n\n\t\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\t\tinfluence = influences[ i ];\n\n\t\t\t\tif ( influence > 0 ) {\n\n\t\t\t\t\tactiveInfluenceIndices.push( [ influence, i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {\n\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\n\t\t\t\tactiveInfluenceIndices.length = material.numSupportedMorphTargets;\n\n\t\t\t} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {\n\n\t\t\t\tactiveInfluenceIndices.sort( numericalSort );\n\n\t\t\t} else if ( activeInfluenceIndices.length === 0 ) {\n\n\t\t\t\tactiveInfluenceIndices.push( [ 0, 0 ] );\n\n\t\t\t};\n\n\t\t\tvar influenceIndex, m = 0;\n\n\t\t\twhile ( m < material.numSupportedMorphTargets ) {\n\n\t\t\t\tif ( activeInfluenceIndices[ m ] ) {\n\n\t\t\t\t\tinfluenceIndex = activeInfluenceIndices[ m ][ 1 ];\n\n\t\t\t\t\tif ( attributes[ 'morphTarget' + m ] >= 0 ) {\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );\n\t\t\t\t\t\tenableAttribute( attributes[ 'morphTarget' + m ] );\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );\n\t\t\t\t\t\tenableAttribute( attributes[ 'morphNormal' + m ] );\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\t/*\n\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphTarget\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\t\t\t_gl.vertexAttribPointer( attributes[ \"morphNormal\" + m ], 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\n\t\t\t\t\tobject.__webglMorphTargetInfluences[ m ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tm ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// load updated influences uniform\n\n\t\tif ( material.program.uniforms.morphTargetInfluences !== null ) {\n\n\t\t\t_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );\n\n\t\t}\n\n\t}\n\n\t// Sorting\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.material.id !== b.material.id ) {\n\n\t\t\treturn b.material.id - a.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable ( a, b ) {\n\n\t\tif ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction numericalSort ( a, b ) {\n\n\t\treturn b[ 0 ] - a[ 0 ];\n\n\t}\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\tif ( camera instanceof THREE.Camera === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar fog = scene.fog;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryGroupHash = - 1;\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\t\t_lightsNeedUpdate = true;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === undefined ) camera.updateMatrixWorld();\n\n\t\t// update Skeleton objects\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tobject.skeleton.update();\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\tlights.length = 0;\n\t\topaqueObjects.length = 0;\n\t\ttransparentObjects.length = 0;\n\n\t\tsprites.length = 0;\n\t\tlensFlares.length = 0;\n\n\t\tprojectObject( scene, scene );\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\topaqueObjects.sort( painterSortStable );\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\t// custom render plugins (pre pass)\n\n\t\tshadowMapPlugin.render( scene, camera );\n\n\t\t//\n\n\t\t_this.info.render.calls = 0;\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\t\t_this.info.render.points = 0;\n\n\t\tthis.setRenderTarget( renderTarget );\n\n\t\tif ( this.autoClear || forceClear ) {\n\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\n\n\t\t}\n\n\t\t// set matrices for immediate objects\n\n\t\tfor ( var i = 0, il = _webglObjectsImmediate.length; i < il; i ++ ) {\n\n\t\t\tvar webglObject = _webglObjectsImmediate[ i ];\n\t\t\tvar object = webglObject.object;\n\n\t\t\tif ( object.visible ) {\n\n\t\t\t\tsetupMatrices( object, camera );\n\n\t\t\t\tunrollImmediateBufferMaterial( webglObject );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar material = scene.overrideMaterial;\n\n\t\t\tthis.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\tthis.setDepthTest( material.depthTest );\n\t\t\tthis.setDepthWrite( material.depthWrite );\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog, true, material );\n\t\t\trenderObjects( transparentObjects, camera, lights, fog, true, material );\n\t\t\trenderObjectsImmediate( _webglObjectsImmediate, '', camera, lights, fog, false, material );\n\n\t\t} else {\n\n\t\t\tvar material = null;\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tthis.setBlending( THREE.NoBlending );\n\n\t\t\trenderObjects( opaqueObjects, camera, lights, fog, false, material );\n\t\t\trenderObjectsImmediate( _webglObjectsImmediate, 'opaque', camera, lights, fog, false, material );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\trenderObjects( transparentObjects, camera, lights, fog, true, material );\n\t\t\trenderObjectsImmediate( _webglObjectsImmediate, 'transparent', camera, lights, fog, true, material );\n\n\t\t}\n\n\t\t// custom render plugins (post pass)\n\n\t\tspritePlugin.render( scene, camera );\n\t\tlensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );\n\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\tif ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {\n\n\t\t\tupdateRenderTargetMipmap( renderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tthis.setDepthTest( true );\n\t\tthis.setDepthWrite( true );\n\n\t\t// _gl.finish();\n\n\t};\n\n\tfunction projectObject( scene, object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Scene || object instanceof THREE.Group ) {\n\n\t\t\t// skip\n\n\t\t} else {\n\n\t\t\tinitObject( object, scene );\n\n\t\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t\tlights.push( object );\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\tsprites.push( object );\n\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\n\n\t\t\t\tlensFlares.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tvar webglObjects = _webglObjects[ object.id ];\n\n\t\t\t\tif ( webglObjects && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\n\n\t\t\t\t\tupdateObject( object, scene );\n\n\t\t\t\t\tfor ( var i = 0, l = webglObjects.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar webglObject = webglObjects[i];\n\n\t\t\t\t\t\tunrollBufferMaterial( webglObject );\n\n\t\t\t\t\t\twebglObject.render = true;\n\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\t\t\t\tif ( object.renderDepth !== null ) {\n\n\t\t\t\t\t\t\t\twebglObject.z = object.renderDepth;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\n\n\t\t\t\t\t\t\t\twebglObject.z = _vector3.z;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( scene, object.children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, camera, lights, fog, useBlending, overrideMaterial ) {\n\n\t\tvar material;\n\n\t\tfor ( var i = renderList.length - 1; i !== - 1; i -- ) {\n\n\t\t\tvar webglObject = renderList[ i ];\n\n\t\t\tvar object = webglObject.object;\n\t\t\tvar buffer = webglObject.buffer;\n\n\t\t\tsetupMatrices( object, camera );\n\n\t\t\tif ( overrideMaterial ) {\n\n\t\t\t\tmaterial = overrideMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = webglObject.material;\n\n\t\t\t\tif ( ! material ) continue;\n\n\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\n\t\t\t\t_this.setDepthTest( material.depthTest );\n\t\t\t\t_this.setDepthWrite( material.depthWrite );\n\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t\t}\n\n\t\t\t_this.setMaterialFaces( material );\n\n\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t_this.renderBufferDirect( camera, lights, fog, material, buffer, object );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBuffer( camera, lights, fog, material, buffer, object );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {\n\n\t\tvar material;\n\n\t\tfor ( var i = 0, il = renderList.length; i < il; i ++ ) {\n\n\t\t\tvar webglObject = renderList[ i ];\n\t\t\tvar object = webglObject.object;\n\n\t\t\tif ( object.visible ) {\n\n\t\t\t\tif ( overrideMaterial ) {\n\n\t\t\t\t\tmaterial = overrideMaterial;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial = webglObject[ materialType ];\n\n\t\t\t\t\tif ( ! material ) continue;\n\n\t\t\t\t\tif ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\n\t\t\t\t\t_this.setDepthTest( material.depthTest );\n\t\t\t\t\t_this.setDepthWrite( material.depthWrite );\n\t\t\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t\t\t}\n\n\t\t\t\t_this.renderImmediateObject( camera, lights, fog, material, object );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.renderImmediateObject = function ( camera, lights, fog, material, object ) {\n\n\t\tvar program = setProgram( camera, lights, fog, material, object );\n\n\t\t_currentGeometryGroupHash = - 1;\n\n\t\t_this.setMaterialFaces( material );\n\n\t\tif ( object.immediateRenderCallback ) {\n\n\t\t\tobject.immediateRenderCallback( program, _gl, _frustum );\n\n\t\t} else {\n\n\t\t\tobject.render( function ( object ) { _this.renderBufferImmediate( object, program, material ); } );\n\n\t\t}\n\n\t};\n\n\tfunction unrollImmediateBufferMaterial ( globject ) {\n\n\t\tvar object = globject.object,\n\t\t\tmaterial = object.material;\n\n\t\tif ( material.transparent ) {\n\n\t\t\tglobject.transparent = material;\n\t\t\tglobject.opaque = null;\n\n\t\t} else {\n\n\t\t\tglobject.opaque = material;\n\t\t\tglobject.transparent = null;\n\n\t\t}\n\n\t}\n\n\tfunction unrollBufferMaterial ( globject ) {\n\n\t\tvar object = globject.object;\n\t\tvar buffer = globject.buffer;\n\n\t\tvar geometry = object.geometry;\n\t\tvar material = object.material;\n\n\t\tif ( material instanceof THREE.MeshFaceMaterial ) {\n\n\t\t\tvar materialIndex = geometry instanceof THREE.BufferGeometry ? 0 : buffer.materialIndex;\n\n\t\t\tmaterial = material.materials[ materialIndex ];\n\n\t\t\tglobject.material = material;\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\ttransparentObjects.push( globject );\n\n\t\t\t} else {\n\n\t\t\t\topaqueObjects.push( globject );\n\n\t\t\t}\n\n\t\t} else if ( material ) {\n\n\t\t\tglobject.material = material;\n\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\ttransparentObjects.push( globject );\n\n\t\t\t} else {\n\n\t\t\t\topaqueObjects.push( globject );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initObject( object, scene ) {\n\n\t\tif ( object.__webglInit === undefined ) {\n\n\t\t\tobject.__webglInit = true;\n\t\t\tobject._modelViewMatrix = new THREE.Matrix4();\n\t\t\tobject._normalMatrix = new THREE.Matrix3();\n\n\t\t\tobject.addEventListener( 'removed', onObjectRemoved );\n\n\t\t}\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry === undefined ) {\n\n\t\t\t// ImmediateRenderObject\n\n\t\t} else if ( geometry.__webglInit === undefined ) {\n\n\t\t\tgeometry.__webglInit = true;\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t//\n\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tinitGeometryGroups( scene, object, geometry );\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\tif ( geometry.__webglVertexBuffer === undefined ) {\n\n\t\t\t\t\tcreateLineBuffers( geometry );\n\t\t\t\t\tinitLineBuffers( geometry, object );\n\n\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\tgeometry.colorsNeedUpdate = true;\n\t\t\t\t\tgeometry.lineDistancesNeedUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.PointCloud ) {\n\n\t\t\t\tif ( geometry.__webglVertexBuffer === undefined ) {\n\n\t\t\t\t\tcreateParticleBuffers( geometry );\n\t\t\t\t\tinitParticleBuffers( geometry, object );\n\n\t\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\t\tgeometry.colorsNeedUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.__webglActive === undefined) {\n\n\t\t\tobject.__webglActive = true;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\taddBuffer( _webglObjects, geometry, object );\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar geometryGroupsList = geometryGroups[ geometry.id ];\n\n\t\t\t\t\tfor ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {\n\n\t\t\t\t\t\taddBuffer( _webglObjects, geometryGroupsList[ i ], object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line || object instanceof THREE.PointCloud ) {\n\n\t\t\t\taddBuffer( _webglObjects, geometry, object );\n\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\n\n\t\t\t\taddBufferImmediate( _webglObjectsImmediate, object );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Geometry splitting\n\n\tvar geometryGroups = {};\n\tvar geometryGroupCounter = 0;\n\n\tfunction makeGroups( geometry, usesFaceMaterial ) {\n\n\t\tvar maxVerticesInGroup = extensions.get( 'OES_element_index_uint' ) ? 4294967296 : 65535;\n\n\t\tvar groupHash, hash_map = {};\n\n\t\tvar numMorphTargets = geometry.morphTargets.length;\n\t\tvar numMorphNormals = geometry.morphNormals.length;\n\n\t\tvar group;\n\t\tvar groups = {};\n\t\tvar groupsList = [];\n\n\t\tfor ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n\t\t\tvar face = geometry.faces[ f ];\n\t\t\tvar materialIndex = usesFaceMaterial ? face.materialIndex : 0;\n\n\t\t\tif ( ! ( materialIndex in hash_map ) ) {\n\n\t\t\t\thash_map[ materialIndex ] = { hash: materialIndex, counter: 0 };\n\n\t\t\t}\n\n\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\n\n\t\t\tif ( ! ( groupHash in groups ) ) {\n\n\t\t\t\tgroup = {\n\t\t\t\t\tid: geometryGroupCounter ++,\n\t\t\t\t\tfaces3: [],\n\t\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\t\tvertices: 0,\n\t\t\t\t\tnumMorphTargets: numMorphTargets,\n\t\t\t\t\tnumMorphNormals: numMorphNormals\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tgroups[ groupHash ] = group;\n\t\t\t\tgroupsList.push( group );\n\n\t\t\t}\n\n\t\t\tif ( groups[ groupHash ].vertices + 3 > maxVerticesInGroup ) {\n\n\t\t\t\thash_map[ materialIndex ].counter += 1;\n\t\t\t\tgroupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;\n\n\t\t\t\tif ( ! ( groupHash in groups ) ) {\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tid: geometryGroupCounter ++,\n\t\t\t\t\t\tfaces3: [],\n\t\t\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\t\t\tvertices: 0,\n\t\t\t\t\t\tnumMorphTargets: numMorphTargets,\n\t\t\t\t\t\tnumMorphNormals: numMorphNormals\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tgroups[ groupHash ] = group;\n\t\t\t\t\tgroupsList.push( group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgroups[ groupHash ].faces3.push( f );\n\t\t\tgroups[ groupHash ].vertices += 3;\n\n\t\t}\n\n\t\treturn groupsList;\n\n\t}\n\n\tfunction initGeometryGroups( scene, object, geometry ) {\n\n\t\tvar material = object.material, addBuffers = false;\n\n\t\tif ( geometryGroups[ geometry.id ] === undefined || geometry.groupsNeedUpdate === true ) {\n\n\t\t\tdelete _webglObjects[ object.id ];\n\n\t\t\tgeometryGroups[ geometry.id ] = makeGroups( geometry, material instanceof THREE.MeshFaceMaterial );\n\n\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t}\n\n\t\tvar geometryGroupsList = geometryGroups[ geometry.id ];\n\n\t\t// create separate VBOs per geometry chunk\n\n\t\tfor ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {\n\n\t\t\tvar geometryGroup = geometryGroupsList[ i ];\n\n\t\t\t// initialise VBO on the first access\n\n\t\t\tif ( geometryGroup.__webglVertexBuffer === undefined ) {\n\n\t\t\t\tcreateMeshBuffers( geometryGroup );\n\t\t\t\tinitMeshBuffers( geometryGroup, object );\n\n\t\t\t\tgeometry.verticesNeedUpdate = true;\n\t\t\t\tgeometry.morphTargetsNeedUpdate = true;\n\t\t\t\tgeometry.elementsNeedUpdate = true;\n\t\t\t\tgeometry.uvsNeedUpdate = true;\n\t\t\t\tgeometry.normalsNeedUpdate = true;\n\t\t\t\tgeometry.tangentsNeedUpdate = true;\n\t\t\t\tgeometry.colorsNeedUpdate = true;\n\n\t\t\t\taddBuffers = true;\n\n\t\t\t} else {\n\n\t\t\t\taddBuffers = false;\n\n\t\t\t}\n\n\t\t\tif ( addBuffers || object.__webglActive === undefined ) {\n\n\t\t\t\taddBuffer( _webglObjects, geometryGroup, object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tobject.__webglActive = true;\n\n\t}\n\n\tfunction addBuffer( objlist, buffer, object ) {\n\n\t\tvar id = object.id;\n\t\tobjlist[id] = objlist[id] || [];\n\t\tobjlist[id].push(\n\t\t\t{\n\t\t\t\tid: id,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tobject: object,\n\t\t\t\tmaterial: null,\n\t\t\t\tz: 0\n\t\t\t}\n\t\t);\n\n\t};\n\n\tfunction addBufferImmediate( objlist, object ) {\n\n\t\tobjlist.push(\n\t\t\t{\n\t\t\t\tid: null,\n\t\t\t\tobject: object,\n\t\t\t\topaque: null,\n\t\t\t\ttransparent: null,\n\t\t\t\tz: 0\n\t\t\t}\n\t\t);\n\n\t};\n\n\t// Objects updates\n\n\tfunction updateObject( object, scene ) {\n\n\t\tvar geometry = object.geometry, customAttributesDirty, material;\n\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\tsetDirectBuffers( geometry );\n\n\t\t} else if ( object instanceof THREE.Mesh ) {\n\n\t\t\t// check all geometry groups\n\n\t\t\tif ( geometry.groupsNeedUpdate === true ) {\n\n\t\t\t\tinitGeometryGroups( scene, object, geometry );\n\n\t\t\t}\n\n\t\t\tvar geometryGroupsList = geometryGroups[ geometry.id ];\n\n\t\t\tfor ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {\n\n\t\t\t\tvar geometryGroup = geometryGroupsList[ i ];\n\n\t\t\t\tmaterial = getBufferMaterial( object, geometryGroup );\n\n\t\t\t\tif ( geometry.groupsNeedUpdate === true ) {\n\n\t\t\t\t\tinitMeshBuffers( geometryGroup, object );\n\n\t\t\t\t}\n\n\t\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n\t\t\t\tif ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||\n\t\t\t\t\t geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||\n\t\t\t\t\t geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {\n\n\t\t\t\t\tsetMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, ! geometry.dynamic, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.morphTargetsNeedUpdate = false;\n\t\t\tgeometry.elementsNeedUpdate = false;\n\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.tangentsNeedUpdate = false;\n\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\n\n\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\tmaterial = getBufferMaterial( object, geometry );\n\n\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {\n\n\t\t\t\tsetLineBuffers( geometry, _gl.DYNAMIC_DRAW );\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\n\n\n\t\t} else if ( object instanceof THREE.PointCloud ) {\n\n\t\t\tmaterial = getBufferMaterial( object, geometry );\n\n\t\t\tcustomAttributesDirty = material.attributes && areCustomAttributesDirty( material );\n\n\t\t\tif ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {\n\n\t\t\t\tsetParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );\n\n\t\t\t}\n\n\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\tmaterial.attributes && clearCustomAttributes( material );\n\n\t\t}\n\n\t}\n\n\t// Objects updates - custom attributes check\n\n\tfunction areCustomAttributesDirty( material ) {\n\n\t\tfor ( var name in material.attributes ) {\n\n\t\t\tif ( material.attributes[ name ].needsUpdate ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction clearCustomAttributes( material ) {\n\n\t\tfor ( var name in material.attributes ) {\n\n\t\t\tmaterial.attributes[ name ].needsUpdate = false;\n\n\t\t}\n\n\t}\n\n\t// Objects removal\n\n\tfunction removeObject( object ) {\n\n\t\tif ( object instanceof THREE.Mesh  ||\n\t\t\t object instanceof THREE.PointCloud ||\n\t\t\t object instanceof THREE.Line ) {\n\n\t\t\tdelete _webglObjects[ object.id ];\n\n\t\t} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {\n\n\t\t\tremoveInstances( _webglObjectsImmediate, object );\n\n\t\t}\n\n\t\tdelete object.__webglInit;\n\t\tdelete object._modelViewMatrix;\n\t\tdelete object._normalMatrix;\n\n\t\tdelete object.__webglActive;\n\n\t}\n\n\tfunction removeInstances( objlist, object ) {\n\n\t\tfor ( var o = objlist.length - 1; o >= 0; o -- ) {\n\n\t\t\tif ( objlist[ o ].object === object ) {\n\n\t\t\t\tobjlist.splice( o, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Materials\n\n\tfunction initMaterial( material, lights, fog, object ) {\n\n\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\tvar shaderID;\n\n\t\tif ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\tshaderID = 'depth';\n\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\tshaderID = 'normal';\n\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ) {\n\n\t\t\tshaderID = 'basic';\n\n\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\tshaderID = 'lambert';\n\n\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\tshaderID = 'phong';\n\n\t\t} else if ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\tshaderID = 'basic';\n\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\tshaderID = 'dashed';\n\n\t\t} else if ( material instanceof THREE.PointCloudMaterial ) {\n\n\t\t\tshaderID = 'particle_basic';\n\n\t\t}\n\n\t\tif ( shaderID ) {\n\n\t\t\tvar shader = THREE.ShaderLib[ shaderID ];\n\n\t\t\tmaterial.__webglShader = {\n\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmaterial.__webglShader = {\n\t\t\t\tuniforms: material.uniforms,\n\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t}\n\n\t\t}\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxLightCount = allocateLights( lights );\n\t\tvar maxShadows = allocateShadows( lights );\n\t\tvar maxBones = allocateBones( object );\n\n\t\tvar parameters = {\n\n\t\t\tprecision: _precision,\n\t\t\tsupportsVertexTextures: _supportsVertexTextures,\n\n\t\t\tmap: !! material.map,\n\t\t\tenvMap: !! material.envMap,\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tvertexColors: material.vertexColors,\n\n\t\t\tfog: fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: _logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: _this.maxMorphTargets,\n\t\t\tmaxMorphNormals: _this.maxMorphNormals,\n\n\t\t\tmaxDirLights: maxLightCount.directional,\n\t\t\tmaxPointLights: maxLightCount.point,\n\t\t\tmaxSpotLights: maxLightCount.spot,\n\t\t\tmaxHemiLights: maxLightCount.hemi,\n\n\t\t\tmaxShadows: maxShadows,\n\t\t\tshadowMapEnabled: _this.shadowMapEnabled && object.receiveShadow && maxShadows > 0,\n\t\t\tshadowMapType: _this.shadowMapType,\n\t\t\tshadowMapDebug: _this.shadowMapDebug,\n\t\t\tshadowMapCascade: _this.shadowMapCascade,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tmetal: material.metal,\n\t\t\twrapAround: material.wrapAround,\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\n\t\t\tflipSided: material.side === THREE.BackSide\n\n\t\t};\n\n\t\t// Generate code\n\n\t\tvar chunks = [];\n\n\t\tif ( shaderID ) {\n\n\t\t\tchunks.push( shaderID );\n\n\t\t} else {\n\n\t\t\tchunks.push( material.fragmentShader );\n\t\t\tchunks.push( material.vertexShader );\n\n\t\t}\n\n\t\tif ( material.defines !== undefined ) {\n\n\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\tchunks.push( name );\n\t\t\t\tchunks.push( material.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var name in parameters ) {\n\n\t\t\tchunks.push( name );\n\t\t\tchunks.push( parameters[ name ] );\n\n\t\t}\n\n\t\tvar code = chunks.join();\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\n\t\tfor ( var p = 0, pl = _programs.length; p < pl; p ++ ) {\n\n\t\t\tvar programInfo = _programs[ p ];\n\n\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\tprogram = programInfo;\n\t\t\t\tprogram.usedTimes ++;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new THREE.WebGLProgram( _this, code, material, parameters );\n\t\t\t_programs.push( program );\n\n\t\t\t_this.info.memory.programs = _programs.length;\n\n\t\t}\n\n\t\tmaterial.program = program;\n\n\t\tvar attributes = program.attributes;\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tvar id, base = 'morphTarget';\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tid = base + i;\n\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tvar id, base = 'morphNormal';\n\n\t\t\tfor ( i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tid = base + i;\n\n\t\t\t\tif ( attributes[ id ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tmaterial.uniformsList = [];\n\n\t\tfor ( var u in material.__webglShader.uniforms ) {\n\n\t\t\tvar location = material.program.uniforms[ u ];\n\n\t\t\tif ( location ) {\n\t\t\t\tmaterial.uniformsList.push( [ material.__webglShader.uniforms[ u ], location ] );\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setProgram( camera, lights, fog, material, object ) {\n\n\t\t_usedTextureUnits = 0;\n\n\t\tif ( material.needsUpdate ) {\n\n\t\t\tif ( material.program ) deallocateMaterial( material );\n\n\t\t\tinitMaterial( material, lights, fog, object );\n\t\t\tmaterial.needsUpdate = false;\n\n\t\t}\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tif ( ! object.__webglMorphTargetInfluences ) {\n\n\t\t\t\tobject.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = material.program,\n\t\t\tp_uniforms = program.uniforms,\n\t\t\tm_uniforms = material.__webglShader.uniforms;\n\n\t\tif ( program.id !== _currentProgram ) {\n\n\t\t\t_gl.useProgram( program.program );\n\t\t\t_currentProgram = program.id;\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\tif ( _currentMaterialId === -1 ) refreshLights = true;\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\n\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\t\tif ( _logarithmicDepthBuffer ) {\n\n\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\n\t\t\tif ( camera !== _currentCamera ) _currentCamera = camera;\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material.envMap ) {\n\n\t\t\t\tif ( p_uniforms.cameraPosition !== null ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\n\t\t\t\t material.skinning ) {\n\n\t\t\t\tif ( p_uniforms.viewMatrix !== null ) {\n\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// not sure why, but otherwise weird things happen\n\n\t\tif ( material.skinning ) {\n\n\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== null ) {\n\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\n\n\t\t\t}\n\n\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== null ) {\n\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\n\n\t\t\t}\n\n\t\t\tif ( _supportsBoneTextures && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\t\tif ( p_uniforms.boneTexture !== null ) {\n\n\t\t\t\t\tvar textureUnit = getTextureUnit();\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\n\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p_uniforms.boneTextureWidth !== null ) {\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p_uniforms.boneTextureHeight !== null ) {\n\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\n\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== null ) {\n\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material.lights ) {\n\n\t\t\t\tif ( _lightsNeedUpdate ) {\n\n\t\t\t\t\trefreshLights = true;\n\t\t\t\t\tsetupLights( lights );\n\t\t\t\t\t_lightsNeedUpdate = false;\n\t\t\t\t}\n\n\t\t\t\tif ( refreshLights ) {\n\t\t\t\t\trefreshUniformsLights( m_uniforms, _lights );\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, true );\n\t\t\t\t} else {\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, false );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t}\n\n\t\t\t// refresh single material specific uniforms\n\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.PointCloudMaterial ) {\n\n\t\t\t\trefreshUniformsParticle( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\n\n\t\t\t\tm_uniforms.mNear.value = camera.near;\n\t\t\t\tm_uniforms.mFar.value = camera.far;\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\n\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\tif ( object.receiveShadow && ! material._shadowPass ) {\n\n\t\t\t\trefreshUniformsShadow( m_uniforms, lights );\n\n\t\t\t}\n\n\t\t\t// load common uniforms\n\n\t\t\tloadUniformsGeneric( material.uniformsList );\n\n\t\t}\n\n\t\tloadUniformsMatrices( p_uniforms, object );\n\n\t\tif ( p_uniforms.modelMatrix !== null ) {\n\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon ( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( _this.gammaInput ) {\n\n\t\t\tuniforms.diffuse.value.copyGammaToLinear( material.color );\n\n\t\t} else {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t}\n\n\t\tuniforms.map.value = material.map;\n\t\tuniforms.lightMap.value = material.lightMap;\n\t\tuniforms.specularMap.value = material.specularMap;\n\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t//  1. color map\n\t\t//  2. specular map\n\t\t//  3. normal map\n\t\t//  4. bump map\n\t\t//  5. alpha map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tvar offset = uvScaleMap.offset;\n\t\t\tvar repeat = uvScaleMap.repeat;\n\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\n\n\t\t}\n\n\t\tuniforms.envMap.value = material.envMap;\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\n\n\t\tif ( _this.gammaInput ) {\n\n\t\t\t//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\n\t\t} else {\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\n\t\t}\n\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\t\tuniforms.combine.value = material.combine;\n\t\tuniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;\n\n\t}\n\n\tfunction refreshUniformsLine ( uniforms, material ) {\n\n\t\tuniforms.diffuse.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash ( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsParticle ( uniforms, material ) {\n\n\t\tuniforms.psColor.value = material.color;\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size;\n\t\tuniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.\n\n\t\tuniforms.map.value = material.map;\n\n\t}\n\n\tfunction refreshUniformsFog ( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value = fog.color;\n\n\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong ( uniforms, material ) {\n\n\t\tuniforms.shininess.value = material.shininess;\n\n\t\tif ( _this.gammaInput ) {\n\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\n\t\t\tuniforms.specular.value.copyGammaToLinear( material.specular );\n\n\t\t} else {\n\n\t\t\tuniforms.ambient.value = material.ambient;\n\t\t\tuniforms.emissive.value = material.emissive;\n\t\t\tuniforms.specular.value = material.specular;\n\n\t\t}\n\n\t\tif ( material.wrapAround ) {\n\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert ( uniforms, material ) {\n\n\t\tif ( _this.gammaInput ) {\n\n\t\t\tuniforms.ambient.value.copyGammaToLinear( material.ambient );\n\t\t\tuniforms.emissive.value.copyGammaToLinear( material.emissive );\n\n\t\t} else {\n\n\t\t\tuniforms.ambient.value = material.ambient;\n\t\t\tuniforms.emissive.value = material.emissive;\n\n\t\t}\n\n\t\tif ( material.wrapAround ) {\n\n\t\t\tuniforms.wrapRGB.value.copy( material.wrapRGB );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLights ( uniforms, lights ) {\n\n\t\tuniforms.ambientLightColor.value = lights.ambient;\n\n\t\tuniforms.directionalLightColor.value = lights.directional.colors;\n\t\tuniforms.directionalLightDirection.value = lights.directional.positions;\n\n\t\tuniforms.pointLightColor.value = lights.point.colors;\n\t\tuniforms.pointLightPosition.value = lights.point.positions;\n\t\tuniforms.pointLightDistance.value = lights.point.distances;\n\n\t\tuniforms.spotLightColor.value = lights.spot.colors;\n\t\tuniforms.spotLightPosition.value = lights.spot.positions;\n\t\tuniforms.spotLightDistance.value = lights.spot.distances;\n\t\tuniforms.spotLightDirection.value = lights.spot.directions;\n\t\tuniforms.spotLightAngleCos.value = lights.spot.anglesCos;\n\t\tuniforms.spotLightExponent.value = lights.spot.exponents;\n\n\t\tuniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;\n\t\tuniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;\n\t\tuniforms.hemisphereLightDirection.value = lights.hemi.positions;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, boolean ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = boolean;\n\n\t\tuniforms.directionalLightColor.needsUpdate = boolean;\n\t\tuniforms.directionalLightDirection.needsUpdate = boolean;\n\n\t\tuniforms.pointLightColor.needsUpdate = boolean;\n\t\tuniforms.pointLightPosition.needsUpdate = boolean;\n\t\tuniforms.pointLightDistance.needsUpdate = boolean;\n\n\t\tuniforms.spotLightColor.needsUpdate = boolean;\n\t\tuniforms.spotLightPosition.needsUpdate = boolean;\n\t\tuniforms.spotLightDistance.needsUpdate = boolean;\n\t\tuniforms.spotLightDirection.needsUpdate = boolean;\n\t\tuniforms.spotLightAngleCos.needsUpdate = boolean;\n\t\tuniforms.spotLightExponent.needsUpdate = boolean;\n\n\t\tuniforms.hemisphereLightSkyColor.needsUpdate = boolean;\n\t\tuniforms.hemisphereLightGroundColor.needsUpdate = boolean;\n\t\tuniforms.hemisphereLightDirection.needsUpdate = boolean;\n\n\t}\n\n\tfunction refreshUniformsShadow ( uniforms, lights ) {\n\n\t\tif ( uniforms.shadowMatrix ) {\n\n\t\t\tvar j = 0;\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tif ( ! light.castShadow ) continue;\n\n\t\t\t\tif ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {\n\n\t\t\t\t\tuniforms.shadowMap.value[ j ] = light.shadowMap;\n\t\t\t\t\tuniforms.shadowMapSize.value[ j ] = light.shadowMapSize;\n\n\t\t\t\t\tuniforms.shadowMatrix.value[ j ] = light.shadowMatrix;\n\n\t\t\t\t\tuniforms.shadowDarkness.value[ j ] = light.shadowDarkness;\n\t\t\t\t\tuniforms.shadowBias.value[ j ] = light.shadowBias;\n\n\t\t\t\t\tj ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Uniforms (load to GPU)\n\n\tfunction loadUniformsMatrices ( uniforms, object ) {\n\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );\n\n\t\tif ( uniforms.normalMatrix ) {\n\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );\n\n\t\t}\n\n\t}\n\n\tfunction getTextureUnit() {\n\n\t\tvar textureUnit = _usedTextureUnits;\n\n\t\tif ( textureUnit >= _maxTextures ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + _maxTextures );\n\n\t\t}\n\n\t\t_usedTextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction loadUniformsGeneric ( uniforms ) {\n\n\t\tvar texture, textureUnit, offset;\n\n\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\n\n\t\t\tvar uniform = uniforms[ j ][ 0 ];\n\n\t\t\t// needsUpdate property is not added to all uniforms.\n\t\t\tif ( uniform.needsUpdate === false ) continue;\n\n\t\t\tvar type = uniform.type;\n\t\t\tvar value = uniform.value;\n\t\t\tvar location = uniforms[ j ][ 1 ];\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase '1i':\n\t\t\t\t\t_gl.uniform1i( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1f':\n\t\t\t\t\t_gl.uniform1f( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '2f':\n\t\t\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3f':\n\t\t\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '4f':\n\t\t\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1iv':\n\t\t\t\t\t_gl.uniform1iv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3iv':\n\t\t\t\t\t_gl.uniform3iv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '1fv':\n\t\t\t\t\t_gl.uniform1fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '2fv':\n\t\t\t\t\t_gl.uniform2fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '3fv':\n\t\t\t\t\t_gl.uniform3fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase '4fv':\n\t\t\t\t\t_gl.uniform4fv( location, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Matrix3fv':\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Matrix4fv':\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value );\n\t\t\t\t\tbreak;\n\n\t\t\t\t//\n\n\t\t\t\tcase 'i':\n\n\t\t\t\t\t// single integer\n\t\t\t\t\t_gl.uniform1i( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'f':\n\n\t\t\t\t\t// single float\n\t\t\t\t\t_gl.uniform1f( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v2':\n\n\t\t\t\t\t// single THREE.Vector2\n\t\t\t\t\t_gl.uniform2f( location, value.x, value.y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v3':\n\n\t\t\t\t\t// single THREE.Vector3\n\t\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v4':\n\n\t\t\t\t\t// single THREE.Vector4\n\t\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'c':\n\n\t\t\t\t\t// single THREE.Color\n\t\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'iv1':\n\n\t\t\t\t\t// flat array of integers (JS or typed array)\n\t\t\t\t\t_gl.uniform1iv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'iv':\n\n\t\t\t\t\t// flat array of integers with 3 x N size (JS or typed array)\n\t\t\t\t\t_gl.uniform3iv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'fv1':\n\n\t\t\t\t\t// flat array of floats (JS or typed array)\n\t\t\t\t\t_gl.uniform1fv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'fv':\n\n\t\t\t\t\t// flat array of floats with 3 x N size (JS or typed array)\n\t\t\t\t\t_gl.uniform3fv( location, value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v2v':\n\n\t\t\t\t\t// array of THREE.Vector2\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\toffset = i * 2;\n\n\t\t\t\t\t\tuniform._array[ offset ]   = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform2fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v3v':\n\n\t\t\t\t\t// array of THREE.Vector3\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\toffset = i * 3;\n\n\t\t\t\t\t\tuniform._array[ offset ]   = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\n\t\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform3fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'v4v':\n\n\t\t\t\t\t// array of THREE.Vector4\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\toffset = i * 4;\n\n\t\t\t\t\t\tuniform._array[ offset ]   = value[ i ].x;\n\t\t\t\t\t\tuniform._array[ offset + 1 ] = value[ i ].y;\n\t\t\t\t\t\tuniform._array[ offset + 2 ] = value[ i ].z;\n\t\t\t\t\t\tuniform._array[ offset + 3 ] = value[ i ].w;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform4fv( location, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm3':\n\n\t\t\t\t\t// single THREE.Matrix3\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm3v':\n\n\t\t\t\t\t// array of THREE.Matrix3\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm4':\n\n\t\t\t\t\t// single THREE.Matrix4\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'm4v':\n\n\t\t\t\t\t// array of THREE.Matrix4\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 't':\n\n\t\t\t\t\t// single THREE.Texture (2d or cube)\n\n\t\t\t\t\ttexture = value;\n\t\t\t\t\ttextureUnit = getTextureUnit();\n\n\t\t\t\t\t_gl.uniform1i( location, textureUnit );\n\n\t\t\t\t\tif ( ! texture ) continue;\n\n\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\n\t\t\t\t\t   ( texture.image instanceof Array && texture.image.length === 6 ) ) { // CompressedTexture can have Array in image :/\n\n\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\n\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t\t\t\tsetCubeTextureDynamic( texture, textureUnit );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tv':\n\n\t\t\t\t\t// array of THREE.Texture (2d)\n\n\t\t\t\t\tif ( uniform._array === undefined ) {\n\n\t\t\t\t\t\tuniform._array = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_gl.uniform1iv( location, uniform._array );\n\n\t\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\n\n\t\t\t\t\t\ttexture = uniform.value[ i ];\n\t\t\t\t\t\ttextureUnit = uniform._array[ i ];\n\n\t\t\t\t\t\tif ( ! texture ) continue;\n\n\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setupMatrices ( object, camera ) {\n\n\t\tobject._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject._normalMatrix.getNormalMatrix( object._modelViewMatrix );\n\n\t}\n\n\t//\n\n\tfunction setColorGamma( array, offset, color, intensitySq ) {\n\n\t\tarray[ offset ]     = color.r * color.r * intensitySq;\n\t\tarray[ offset + 1 ] = color.g * color.g * intensitySq;\n\t\tarray[ offset + 2 ] = color.b * color.b * intensitySq;\n\n\t}\n\n\tfunction setColorLinear( array, offset, color, intensity ) {\n\n\t\tarray[ offset ]     = color.r * intensity;\n\t\tarray[ offset + 1 ] = color.g * intensity;\n\t\tarray[ offset + 2 ] = color.b * intensity;\n\n\t}\n\n\tfunction setupLights ( lights ) {\n\n\t\tvar l, ll, light, n,\n\t\tr = 0, g = 0, b = 0,\n\t\tcolor, skyColor, groundColor,\n\t\tintensity,  intensitySq,\n\t\tposition,\n\t\tdistance,\n\n\t\tzlights = _lights,\n\n\t\tdirColors = zlights.directional.colors,\n\t\tdirPositions = zlights.directional.positions,\n\n\t\tpointColors = zlights.point.colors,\n\t\tpointPositions = zlights.point.positions,\n\t\tpointDistances = zlights.point.distances,\n\n\t\tspotColors = zlights.spot.colors,\n\t\tspotPositions = zlights.spot.positions,\n\t\tspotDistances = zlights.spot.distances,\n\t\tspotDirections = zlights.spot.directions,\n\t\tspotAnglesCos = zlights.spot.anglesCos,\n\t\tspotExponents = zlights.spot.exponents,\n\n\t\themiSkyColors = zlights.hemi.skyColors,\n\t\themiGroundColors = zlights.hemi.groundColors,\n\t\themiPositions = zlights.hemi.positions,\n\n\t\tdirLength = 0,\n\t\tpointLength = 0,\n\t\tspotLength = 0,\n\t\themiLength = 0,\n\n\t\tdirCount = 0,\n\t\tpointCount = 0,\n\t\tspotCount = 0,\n\t\themiCount = 0,\n\n\t\tdirOffset = 0,\n\t\tpointOffset = 0,\n\t\tspotOffset = 0,\n\t\themiOffset = 0;\n\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tlight = lights[ l ];\n\n\t\t\tif ( light.onlyShadow ) continue;\n\n\t\t\tcolor = light.color;\n\t\t\tintensity = light.intensity;\n\t\t\tdistance = light.distance;\n\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tif ( _this.gammaInput ) {\n\n\t\t\t\t\tr += color.r * color.r;\n\t\t\t\t\tg += color.g * color.g;\n\t\t\t\t\tb += color.b * color.b;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tr += color.r;\n\t\t\t\t\tg += color.g;\n\t\t\t\t\tb += color.b;\n\n\t\t\t\t}\n\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\tdirCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t_direction.sub( _vector3 );\n\t\t\t\t_direction.normalize();\n\n\t\t\t\tdirOffset = dirLength * 3;\n\n\t\t\t\tdirPositions[ dirOffset ]     = _direction.x;\n\t\t\t\tdirPositions[ dirOffset + 1 ] = _direction.y;\n\t\t\t\tdirPositions[ dirOffset + 2 ] = _direction.z;\n\n\t\t\t\tif ( _this.gammaInput ) {\n\n\t\t\t\t\tsetColorGamma( dirColors, dirOffset, color, intensity * intensity );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetColorLinear( dirColors, dirOffset, color, intensity );\n\n\t\t\t\t}\n\n\t\t\t\tdirLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\n\n\t\t\t\tpointCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tpointOffset = pointLength * 3;\n\n\t\t\t\tif ( _this.gammaInput ) {\n\n\t\t\t\t\tsetColorGamma( pointColors, pointOffset, color, intensity * intensity );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetColorLinear( pointColors, pointOffset, color, intensity );\n\n\t\t\t\t}\n\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tpointPositions[ pointOffset ]     = _vector3.x;\n\t\t\t\tpointPositions[ pointOffset + 1 ] = _vector3.y;\n\t\t\t\tpointPositions[ pointOffset + 2 ] = _vector3.z;\n\n\t\t\t\tpointDistances[ pointLength ] = distance;\n\n\t\t\t\tpointLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\tspotCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\tspotOffset = spotLength * 3;\n\n\t\t\t\tif ( _this.gammaInput ) {\n\n\t\t\t\t\tsetColorGamma( spotColors, spotOffset, color, intensity * intensity );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetColorLinear( spotColors, spotOffset, color, intensity );\n\n\t\t\t\t}\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tspotPositions[ spotOffset ]     = _direction.x;\n\t\t\t\tspotPositions[ spotOffset + 1 ] = _direction.y;\n\t\t\t\tspotPositions[ spotOffset + 2 ] = _direction.z;\n\n\t\t\t\tspotDistances[ spotLength ] = distance;\n\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t_direction.sub( _vector3 );\n\t\t\t\t_direction.normalize();\n\n\t\t\t\tspotDirections[ spotOffset ]     = _direction.x;\n\t\t\t\tspotDirections[ spotOffset + 1 ] = _direction.y;\n\t\t\t\tspotDirections[ spotOffset + 2 ] = _direction.z;\n\n\t\t\t\tspotAnglesCos[ spotLength ] = Math.cos( light.angle );\n\t\t\t\tspotExponents[ spotLength ] = light.exponent;\n\n\t\t\t\tspotLength += 1;\n\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\n\n\t\t\t\themiCount += 1;\n\n\t\t\t\tif ( ! light.visible ) continue;\n\n\t\t\t\t_direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t_direction.normalize();\n\n\t\t\t\themiOffset = hemiLength * 3;\n\n\t\t\t\themiPositions[ hemiOffset ]     = _direction.x;\n\t\t\t\themiPositions[ hemiOffset + 1 ] = _direction.y;\n\t\t\t\themiPositions[ hemiOffset + 2 ] = _direction.z;\n\n\t\t\t\tskyColor = light.color;\n\t\t\t\tgroundColor = light.groundColor;\n\n\t\t\t\tif ( _this.gammaInput ) {\n\n\t\t\t\t\tintensitySq = intensity * intensity;\n\n\t\t\t\t\tsetColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );\n\t\t\t\t\tsetColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );\n\t\t\t\t\tsetColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );\n\n\t\t\t\t}\n\n\t\t\t\themiLength += 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// null eventual remains from removed lights\n\t\t// (this is to avoid if in shader)\n\n\t\tfor ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;\n\t\tfor ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;\n\t\tfor ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;\n\t\tfor ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;\n\n\t\tzlights.directional.length = dirLength;\n\t\tzlights.point.length = pointLength;\n\t\tzlights.spot.length = spotLength;\n\t\tzlights.hemi.length = hemiLength;\n\n\t\tzlights.ambient[ 0 ] = r;\n\t\tzlights.ambient[ 1 ] = g;\n\t\tzlights.ambient[ 2 ] = b;\n\n\t}\n\n\t// GL state setting\n\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\n\n\t\tif ( cullFace === THREE.CullFaceNone ) {\n\n\t\t\t_gl.disable( _gl.CULL_FACE );\n\n\t\t} else {\n\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\n\n\t\t\t\t_gl.frontFace( _gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.frontFace( _gl.CCW );\n\n\t\t\t}\n\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\n\n\t\t\t\t_gl.cullFace( _gl.BACK );\n\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\n\n\t\t\t\t_gl.cullFace( _gl.FRONT );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\n\n\t\t\t}\n\n\t\t\t_gl.enable( _gl.CULL_FACE );\n\n\t\t}\n\n\t};\n\n\tthis.setMaterialFaces = function ( material ) {\n\n\t\tvar doubleSided = material.side === THREE.DoubleSide;\n\t\tvar flipSided = material.side === THREE.BackSide;\n\n\t\tif ( _oldDoubleSided !== doubleSided ) {\n\n\t\t\tif ( doubleSided ) {\n\n\t\t\t\t_gl.disable( _gl.CULL_FACE );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.enable( _gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\t_oldDoubleSided = doubleSided;\n\n\t\t}\n\n\t\tif ( _oldFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\t_gl.frontFace( _gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.frontFace( _gl.CCW );\n\n\t\t\t}\n\n\t\t\t_oldFlipSided = flipSided;\n\n\t\t}\n\n\t};\n\n\tthis.setDepthTest = function ( depthTest ) {\n\n\t\tif ( _oldDepthTest !== depthTest ) {\n\n\t\t\tif ( depthTest ) {\n\n\t\t\t\t_gl.enable( _gl.DEPTH_TEST );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.disable( _gl.DEPTH_TEST );\n\n\t\t\t}\n\n\t\t\t_oldDepthTest = depthTest;\n\n\t\t}\n\n\t};\n\n\tthis.setDepthWrite = function ( depthWrite ) {\n\n\t\tif ( _oldDepthWrite !== depthWrite ) {\n\n\t\t\t_gl.depthMask( depthWrite );\n\t\t\t_oldDepthWrite = depthWrite;\n\n\t\t}\n\n\t};\n\n\tfunction setLineWidth ( width ) {\n\n\t\tif ( width !== _oldLineWidth ) {\n\n\t\t\t_gl.lineWidth( width );\n\n\t\t\t_oldLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset ( polygonoffset, factor, units ) {\n\n\t\tif ( _oldPolygonOffset !== polygonoffset ) {\n\n\t\t\tif ( polygonoffset ) {\n\n\t\t\t\t_gl.enable( _gl.POLYGON_OFFSET_FILL );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.disable( _gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t\t_oldPolygonOffset = polygonoffset;\n\n\t\t}\n\n\t\tif ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {\n\n\t\t\t_gl.polygonOffset( factor, units );\n\n\t\t\t_oldPolygonOffsetFactor = factor;\n\t\t\t_oldPolygonOffsetUnits = units;\n\n\t\t}\n\n\t}\n\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {\n\n\t\tif ( blending !== _oldBlending ) {\n\n\t\t\tif ( blending === THREE.NoBlending ) {\n\n\t\t\t\t_gl.disable( _gl.BLEND );\n\n\t\t\t} else if ( blending === THREE.AdditiveBlending ) {\n\n\t\t\t\t_gl.enable( _gl.BLEND );\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\n\t\t\t\t_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );\n\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\n\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\n\t\t\t\t_gl.enable( _gl.BLEND );\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );\n\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\n\n\t\t\t\t// TODO: Find blendFuncSeparate() combination\n\t\t\t\t_gl.enable( _gl.BLEND );\n\t\t\t\t_gl.blendEquation( _gl.FUNC_ADD );\n\t\t\t\t_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );\n\n\t\t\t} else if ( blending === THREE.CustomBlending ) {\n\n\t\t\t\t_gl.enable( _gl.BLEND );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.enable( _gl.BLEND );\n\t\t\t\t_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );\n\t\t\t\t_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );\n\n\t\t\t}\n\n\t\t\t_oldBlending = blending;\n\n\t\t}\n\n\t\tif ( blending === THREE.CustomBlending ) {\n\n\t\t\tif ( blendEquation !== _oldBlendEquation ) {\n\n\t\t\t\t_gl.blendEquation( paramThreeToGL( blendEquation ) );\n\n\t\t\t\t_oldBlendEquation = blendEquation;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {\n\n\t\t\t\t_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );\n\n\t\t\t\t_oldBlendSrc = blendSrc;\n\t\t\t\t_oldBlendDst = blendDst;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_oldBlendEquation = null;\n\t\t\t_oldBlendSrc = null;\n\t\t\t_oldBlendDst = null;\n\n\t\t}\n\n\t};\n\n\t// Textures\n\n\tfunction setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {\n\n\t\tvar extension;\n\n\t\tif ( isImagePowerOfTwo ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\tif ( extension && texture.type !== THREE.FloatType ) {\n\n\t\t\tif ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\n\t\t\t\ttexture.__oldAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.uploadTexture = function ( texture ) {\n\n\t\tif ( texture.__webglInit === undefined ) {\n\n\t\t\ttexture.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttexture.__webglTexture = _gl.createTexture();\n\n\t\t\t_this.info.memory.textures ++;\n\n\t\t}\n\n\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\n\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\ttexture.image = clampToMaxSize( texture.image, _maxTextureSize );\n\n\t\tvar image = texture.image,\n\t\tisImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),\n\t\tglFormat = paramThreeToGL( texture.format ),\n\t\tglType = paramThreeToGL( texture.type );\n\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );\n\n\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\tif ( texture instanceof THREE.DataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\n\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\tif ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {\n\n\t\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( \"Attempt to load unsupported compressed texture format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else { // regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && isImagePowerOfTwo ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\ttexture.needsUpdate = false;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate();\n\n\t};\n\n\tthis.setTexture = function ( texture, slot ) {\n\n\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\tif ( texture.needsUpdate ) {\n\n\t\t\t_this.uploadTexture( texture );\n\n\t\t} else {\n\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );\n\n\t\t}\n\n\t};\n\n\tfunction clampToMaxSize ( image, maxSize ) {\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t// premultiplied alpha.\n\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer:', image, 'is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height + '.' );\n\n\t\t\treturn canvas;\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction setCubeTexture ( texture, slot ) {\n\n\t\tif ( texture.image.length === 6 ) {\n\n\t\t\tif ( texture.needsUpdate ) {\n\n\t\t\t\tif ( ! texture.image.__webglTextureCube ) {\n\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\ttexture.image.__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t_this.info.memory.textures ++;\n\n\t\t\t\t}\n\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\n\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\n\n\t\t\t\tvar cubeImage = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\tisImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\n\t\t\t\tglType = paramThreeToGL( texture.type );\n\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\n\n\t\t\t\t\t\t\t\tif ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {\n\n\t\t\t\t\t\t\t\t\t_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tconsole.warn( \"Attempt to load unsupported compressed texture format\" );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.generateMipmaps && isImagePowerOfTwo ) {\n\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = false;\n\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate();\n\n\t\t\t} else {\n\n\t\t\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction setCubeTextureDynamic ( texture, slot ) {\n\n\t\t_gl.activeTexture( _gl.TEXTURE0 + slot );\n\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );\n\n\t}\n\n\t// Render targets\n\n\tfunction setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {\n\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );\n\n\t}\n\n\tfunction setupRenderBuffer ( renderbuffer, renderTarget  ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t/* For some reason this is not working. Defaulting to RGBA4.\n\t\t} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\t\t*/\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t}\n\n\t}\n\n\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\n\n\t\tif ( renderTarget && renderTarget.__webglFramebuffer === undefined ) {\n\n\t\t\tif ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;\n\t\t\tif ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\trenderTarget.__webglTexture = _gl.createTexture();\n\n\t\t\t_this.info.memory.textures ++;\n\n\t\t\t// Setup texture, create render and frame buffers\n\n\t\t\tvar isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height ),\n\t\t\t\tglFormat = paramThreeToGL( renderTarget.format ),\n\t\t\t\tglType = paramThreeToGL( renderTarget.type );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTarget.__webglFramebuffer = [];\n\t\t\t\trenderTarget.__webglRenderbuffer = [];\n\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\t\t\t\t\trenderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t} else {\n\n\t\t\t\trenderTarget.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\n\n\t\t\t\t\trenderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTarget.__webglRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );\n\n\t\t\t\t_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t\tsetupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( renderTarget.shareDepthFrom ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\n\n\t\t\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t}\n\n\t\t\t// Release everything\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\tvar framebuffer, width, height, vx, vy;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = renderTarget.__webglFramebuffer;\n\n\t\t\t}\n\n\t\t\twidth = renderTarget.width;\n\t\t\theight = renderTarget.height;\n\n\t\t\tvx = 0;\n\t\t\tvy = 0;\n\n\t\t} else {\n\n\t\t\tframebuffer = null;\n\n\t\t\twidth = _viewportWidth;\n\t\t\theight = _viewportHeight;\n\n\t\t\tvx = _viewportX;\n\t\t\tvy = _viewportY;\n\n\t\t}\n\n\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.viewport( vx, vy, width, height );\n\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\t_currentWidth = width;\n\t\t_currentHeight = height;\n\n\t};\n\n\tfunction updateRenderTargetMipmap ( renderTarget ) {\n\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\n\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\n\t\t\t_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t} else {\n\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );\n\t\t\t_gl.generateMipmap( _gl.TEXTURE_2D );\n\t\t\t_gl.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback ( f ) {\n\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t// Map three.js constants to WebGL constants\n\n\tfunction paramThreeToGL ( p ) {\n\n\t\tvar extension;\n\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\n\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\n\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\n\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\n\t\tif ( p === THREE.IntType ) return _gl.INT;\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\n\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\n\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\n\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\n\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t}\n\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t}\n\n\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\t// Allocations\n\n\tfunction allocateBones ( object ) {\n\n\t\tif ( _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader\n\t\t\t//   to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = nVertexMatrices;\n\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\n\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\n\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction allocateLights( lights ) {\n\n\t\tvar dirLights = 0;\n\t\tvar pointLights = 0;\n\t\tvar spotLights = 0;\n\t\tvar hemiLights = 0;\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\n\t\t\tif ( light.onlyShadow || light.visible === false ) continue;\n\n\t\t\tif ( light instanceof THREE.DirectionalLight ) dirLights ++;\n\t\t\tif ( light instanceof THREE.PointLight ) pointLights ++;\n\t\t\tif ( light instanceof THREE.SpotLight ) spotLights ++;\n\t\t\tif ( light instanceof THREE.HemisphereLight ) hemiLights ++;\n\n\t\t}\n\n\t\treturn { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };\n\n\t}\n\n\tfunction allocateShadows( lights ) {\n\n\t\tvar maxShadows = 0;\n\n\t\tfor ( var l = 0, ll = lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = lights[ l ];\n\n\t\t\tif ( ! light.castShadow ) continue;\n\n\t\t\tif ( light instanceof THREE.SpotLight ) maxShadows ++;\n\t\t\tif ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;\n\n\t\t}\n\n\t\treturn maxShadows;\n\n\t}\n\n\t// DEPRECATED\n\t\n\tthis.initMaterial = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t};\n\n\tthis.addPrePlugin = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t};\n\n\tthis.addPostPlugin = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t};\n\n\tthis.updateShadowMap = function () {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t};\n\n};\n\n// File:src/renderers/WebGLRenderTarget.js\n\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\n\n\tthis.width = width;\n\tthis.height = height;\n\n\toptions = options || {};\n\n\tthis.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;\n\tthis.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;\n\n\tthis.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;\n\tthis.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;\n\n\tthis.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;\n\n\tthis.offset = new THREE.Vector2( 0, 0 );\n\tthis.repeat = new THREE.Vector2( 1, 1 );\n\n\tthis.format = options.format !== undefined ? options.format : THREE.RGBAFormat;\n\tthis.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;\n\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\n\tthis.generateMipmaps = true;\n\n\tthis.shareDepthFrom = null;\n\n};\n\nTHREE.WebGLRenderTarget.prototype = {\n\n\tconstructor: THREE.WebGLRenderTarget,\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t},\n\n\tclone: function () {\n\n\t\tvar tmp = new THREE.WebGLRenderTarget( this.width, this.height );\n\n\t\ttmp.wrapS = this.wrapS;\n\t\ttmp.wrapT = this.wrapT;\n\n\t\ttmp.magFilter = this.magFilter;\n\t\ttmp.minFilter = this.minFilter;\n\n\t\ttmp.anisotropy = this.anisotropy;\n\n\t\ttmp.offset.copy( this.offset );\n\t\ttmp.repeat.copy( this.repeat );\n\n\t\ttmp.format = this.format;\n\t\ttmp.type = this.type;\n\n\t\ttmp.depthBuffer = this.depthBuffer;\n\t\ttmp.stencilBuffer = this.stencilBuffer;\n\n\t\ttmp.generateMipmaps = this.generateMipmaps;\n\n\t\ttmp.shareDepthFrom = this.shareDepthFrom;\n\n\t\treturn tmp;\n\n\t},\n\n\tdispose: function () {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n};\n\nTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\n\n// File:src/renderers/WebGLRenderTargetCube.js\n\n/**\n * @author alteredq / http://alteredqualia.com\n */\n\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\n\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\n\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\n};\n\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\n\n// File:src/renderers/webgl/WebGLExtensions.js\n\nTHREE.WebGLExtensions = function ( gl ) {\n\n\tvar extensions = {};\n\n\tthis.get = function ( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tvar extension;\n\n\t\tswitch ( name ) {\n\t\t\n\t\t\tcase 'OES_texture_float':\n\t\t\t\textension = gl.getExtension( 'OES_texture_float' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'OES_texture_float_linear':\n\t\t\t\textension = gl.getExtension( 'OES_texture_float_linear' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'OES_standard_derivatives':\n\t\t\t\textension = gl.getExtension( 'OES_standard_derivatives' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'OES_element_index_uint':\n\t\t\t\textension = gl.getExtension( 'OES_element_index_uint' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_blend_minmax':\n\t\t\t\textension = gl.getExtension( 'EXT_blend_minmax' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_frag_depth':\n\t\t\t\textension = gl.getExtension( 'EXT_frag_depth' );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( extension === null ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/WebGLProgram.js\n\nTHREE.WebGLProgram = ( function () {\n\n\tvar programIdCount = 0;\n\n\tvar generateDefines = function ( defines ) {\n\n\t\tvar value, chunk, chunks = [];\n\n\t\tfor ( var d in defines ) {\n\n\t\t\tvalue = defines[ d ];\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunk = \"#define \" + d + \" \" + value;\n\t\t\tchunks.push( chunk );\n\n\t\t}\n\n\t\treturn chunks.join( \"\\n\" );\n\n\t};\n\n\tvar cacheUniformLocations = function ( gl, program, identifiers ) {\n\n\t\tvar uniforms = {};\n\n\t\tfor ( var i = 0, l = identifiers.length; i < l; i ++ ) {\n\n\t\t\tvar id = identifiers[ i ];\n\t\t\tuniforms[ id ] = gl.getUniformLocation( program, id );\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t};\n\n\tvar cacheAttributeLocations = function ( gl, program, identifiers ) {\n\n\t\tvar attributes = {};\n\n\t\tfor ( var i = 0, l = identifiers.length; i < l; i ++ ) {\n\n\t\t\tvar id = identifiers[ i ];\n\t\t\tattributes[ id ] = gl.getAttribLocation( program, id );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t};\n\n\treturn function ( renderer, code, material, parameters ) {\n\n\t\tvar _this = renderer;\n\t\tvar _gl = _this.context;\n\n\t\tvar defines = material.defines;\n\t\tvar uniforms = material.__webglShader.uniforms;\n\t\tvar attributes = material.attributes;\n\n\t\tvar vertexShader = material.__webglShader.vertexShader;\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\n\n\t\tvar index0AttributeName = material.index0AttributeName;\n\n\t\tif ( index0AttributeName === undefined && parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\n\t\t\tindex0AttributeName = 'position';\n\n\t\t}\n\n\t\tvar shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\n\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\n\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\n\n\t\t}\n\n\t\t// console.log( \"building new program \" );\n\n\t\t//\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = _gl.createProgram();\n\n\t\tvar prefix_vertex, prefix_fragment;\n\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\n\n\t\t\tprefix_vertex = '';\n\t\t\tprefix_fragment = '';\n\n\t\t} else {\n\n\t\t\tprefix_vertex = [\n\n\t\t\t\t\"precision \" + parameters.precision + \" float;\",\n\t\t\t\t\"precision \" + parameters.precision + \" int;\",\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\n\n\t\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\n\t\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\n\n\t\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\n\t\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\n\t\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\n\t\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\n\n\t\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\n\n\t\t\t\t\"#define MAX_BONES \" + parameters.maxBones,\n\n\t\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\n\t\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n\t\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n\t\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n\t\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n\t\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n\t\t\t\tparameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n\t\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n\t\t\t\tparameters.skinning ? \"#define USE_SKINNING\" : \"\",\n\t\t\t\tparameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\n\n\t\t\t\tparameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\n\t\t\t\tparameters.morphNormals ? \"#define USE_MORPHNORMALS\" : \"\",\n\t\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\n\t\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n\t\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n\t\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n\t\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n\t\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\n\t\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\n\n\t\t\t\tparameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n\t\t\t\t//_this._glExtensionFragDepth ? \"#define USE_LOGDEPTHBUF_EXT\" : \"\",\n\n\n\t\t\t\t\"uniform mat4 modelMatrix;\",\n\t\t\t\t\"uniform mat4 modelViewMatrix;\",\n\t\t\t\t\"uniform mat4 projectionMatrix;\",\n\t\t\t\t\"uniform mat4 viewMatrix;\",\n\t\t\t\t\"uniform mat3 normalMatrix;\",\n\t\t\t\t\"uniform vec3 cameraPosition;\",\n\n\t\t\t\t\"attribute vec3 position;\",\n\t\t\t\t\"attribute vec3 normal;\",\n\t\t\t\t\"attribute vec2 uv;\",\n\t\t\t\t\"attribute vec2 uv2;\",\n\n\t\t\t\t\"#ifdef USE_COLOR\",\n\n\t\t\t\t\"\tattribute vec3 color;\",\n\n\t\t\t\t\"#endif\",\n\n\t\t\t\t\"#ifdef USE_MORPHTARGETS\",\n\n\t\t\t\t\"\tattribute vec3 morphTarget0;\",\n\t\t\t\t\"\tattribute vec3 morphTarget1;\",\n\t\t\t\t\"\tattribute vec3 morphTarget2;\",\n\t\t\t\t\"\tattribute vec3 morphTarget3;\",\n\n\t\t\t\t\"\t#ifdef USE_MORPHNORMALS\",\n\n\t\t\t\t\"\t\tattribute vec3 morphNormal0;\",\n\t\t\t\t\"\t\tattribute vec3 morphNormal1;\",\n\t\t\t\t\"\t\tattribute vec3 morphNormal2;\",\n\t\t\t\t\"\t\tattribute vec3 morphNormal3;\",\n\n\t\t\t\t\"\t#else\",\n\n\t\t\t\t\"\t\tattribute vec3 morphTarget4;\",\n\t\t\t\t\"\t\tattribute vec3 morphTarget5;\",\n\t\t\t\t\"\t\tattribute vec3 morphTarget6;\",\n\t\t\t\t\"\t\tattribute vec3 morphTarget7;\",\n\n\t\t\t\t\"\t#endif\",\n\n\t\t\t\t\"#endif\",\n\n\t\t\t\t\"#ifdef USE_SKINNING\",\n\n\t\t\t\t\"\tattribute vec4 skinIndex;\",\n\t\t\t\t\"\tattribute vec4 skinWeight;\",\n\n\t\t\t\t\"#endif\",\n\n\t\t\t\t\"\"\n\n\t\t\t].join( '\\n' );\n\n\t\t\tprefix_fragment = [\n\n\t\t\t\t\"precision \" + parameters.precision + \" float;\",\n\t\t\t\t\"precision \" + parameters.precision + \" int;\",\n\n\t\t\t\t( parameters.bumpMap || parameters.normalMap ) ? \"#extension GL_OES_standard_derivatives : enable\" : \"\",\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\t\"#define MAX_DIR_LIGHTS \" + parameters.maxDirLights,\n\t\t\t\t\"#define MAX_POINT_LIGHTS \" + parameters.maxPointLights,\n\t\t\t\t\"#define MAX_SPOT_LIGHTS \" + parameters.maxSpotLights,\n\t\t\t\t\"#define MAX_HEMI_LIGHTS \" + parameters.maxHemiLights,\n\n\t\t\t\t\"#define MAX_SHADOWS \" + parameters.maxShadows,\n\n\t\t\t\tparameters.alphaTest ? \"#define ALPHATEST \" + parameters.alphaTest: \"\",\n\n\t\t\t\t_this.gammaInput ? \"#define GAMMA_INPUT\" : \"\",\n\t\t\t\t_this.gammaOutput ? \"#define GAMMA_OUTPUT\" : \"\",\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? \"#define USE_FOG\" : \"\",\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? \"#define FOG_EXP2\" : \"\",\n\n\t\t\t\tparameters.map ? \"#define USE_MAP\" : \"\",\n\t\t\t\tparameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n\t\t\t\tparameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n\t\t\t\tparameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n\t\t\t\tparameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n\t\t\t\tparameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n\t\t\t\tparameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n\t\t\t\tparameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n\t\t\t\tparameters.metal ? \"#define METAL\" : \"\",\n\t\t\t\tparameters.wrapAround ? \"#define WRAP_AROUND\" : \"\",\n\t\t\t\tparameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n\t\t\t\tparameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n\t\t\t\tparameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n\t\t\t\tparameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n\t\t\t\tparameters.shadowMapDebug ? \"#define SHADOWMAP_DEBUG\" : \"\",\n\t\t\t\tparameters.shadowMapCascade ? \"#define SHADOWMAP_CASCADE\" : \"\",\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n\t\t\t\t//_this._glExtensionFragDepth ? \"#define USE_LOGDEPTHBUF_EXT\" : \"\",\n\n\t\t\t\t\"uniform mat4 viewMatrix;\",\n\t\t\t\t\"uniform vec3 cameraPosition;\",\n\t\t\t\t\"\"\n\n\t\t\t].join( '\\n' );\n\n\t\t}\n\n\t\tvar glVertexShader = new THREE.WebGLShader( _gl, _gl.VERTEX_SHADER, prefix_vertex + vertexShader );\n\t\tvar glFragmentShader = new THREE.WebGLShader( _gl, _gl.FRAGMENT_SHADER, prefix_fragment + fragmentShader );\n\n\t\t_gl.attachShader( program, glVertexShader );\n\t\t_gl.attachShader( program, glFragmentShader );\n\n\t\tif ( index0AttributeName !== undefined ) {\n\n\t\t\t// Force a particular attribute to index 0.\n\t\t\t// because potentially expensive emulation is done by browser if attribute 0 is disabled.\n\t\t\t// And, color, for example is often automatically bound to index 0 so disabling it\n\n\t\t\t_gl.bindAttribLocation( program, 0, index0AttributeName );\n\n\t\t}\n\n\t\t_gl.linkProgram( program );\n\n\t\tif ( _gl.getProgramParameter( program, _gl.LINK_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: Could not initialise shader.' );\n\t\t\tconsole.error( 'gl.VALIDATE_STATUS', _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) );\n\t\t\tconsole.error( 'gl.getError()', _gl.getError() );\n\n\t\t}\n\n\t\tif ( _gl.getProgramInfoLog( program ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', _gl.getProgramInfoLog( program ) );\n\n\t\t}\n\n\t\t// clean up\n\n\t\t_gl.deleteShader( glVertexShader );\n\t\t_gl.deleteShader( glFragmentShader );\n\n\t\t// cache uniform locations\n\n\t\tvar identifiers = [\n\n\t\t\t'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences', 'bindMatrix', 'bindMatrixInverse'\n\n\t\t];\n\n\t\tif ( parameters.useVertexTexture ) {\n\n\t\t\tidentifiers.push( 'boneTexture' );\n\t\t\tidentifiers.push( 'boneTextureWidth' );\n\t\t\tidentifiers.push( 'boneTextureHeight' );\n\n\t\t} else {\n\n\t\t\tidentifiers.push( 'boneGlobalMatrices' );\n\n\t\t}\n\n\t\tif ( parameters.logarithmicDepthBuffer ) {\n\n\t\t\tidentifiers.push('logDepthBufFC');\n\n\t\t}\n\n\n\t\tfor ( var u in uniforms ) {\n\n\t\t\tidentifiers.push( u );\n\n\t\t}\n\n\t\tthis.uniforms = cacheUniformLocations( _gl, program, identifiers );\n\n\t\t// cache attributes locations\n\n\t\tidentifiers = [\n\n\t\t\t\"position\", \"normal\", \"uv\", \"uv2\", \"tangent\", \"color\",\n\t\t\t\"skinIndex\", \"skinWeight\", \"lineDistance\"\n\n\t\t];\n\n\t\tfor ( var i = 0; i < parameters.maxMorphTargets; i ++ ) {\n\n\t\t\tidentifiers.push( \"morphTarget\" + i );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < parameters.maxMorphNormals; i ++ ) {\n\n\t\t\tidentifiers.push( \"morphNormal\" + i );\n\n\t\t}\n\n\t\tfor ( var a in attributes ) {\n\n\t\t\tidentifiers.push( a );\n\n\t\t}\n\n\t\tthis.attributes = cacheAttributeLocations( _gl, program, identifiers );\n\t\tthis.attributesKeys = Object.keys( this.attributes );\n\n\t\t//\n\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/WebGLShader.js\n\nTHREE.WebGLShader = ( function () {\n\n\tvar addLineNumbers = function ( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t};\n\n\treturn function ( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type ); \n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', gl.getShaderInfoLog( shader ) );\n\t\t\tconsole.warn( addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t};\n\n} )();\n\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\n\n\tvar gl = renderer.context;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\tvar hasVertexTexture;\n\n\tvar tempTexture, occlusionTexture;\n\n\tvar init = function () {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t-1, -1,  0, 0,\n\t\t\t 1, -1,  1, 0,\n\t\t\t 1,  1,  1, 1,\n\t\t\t-1,  1,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\t// buffers\n\n\t\tvertexBuffer     = gl.createBuffer();\n\t\telementBuffer    = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\t// textures\n\n\t\ttempTexture      = gl.createTexture();\n\t\tocclusionTexture = gl.createTexture();\n\n\t\tgl.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\tgl.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\n\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\n\n\t\tvar shader;\n\n\t\tif ( hasVertexTexture ) {\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\n\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\t\t\t\t\t\"varying float vVisibility;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tshader = {\n\n\t\t\t\tvertexShader: [\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\n\t\t\t\t\t\"uniform vec2 scale;\",\n\t\t\t\t\t\"uniform float rotation;\",\n\n\t\t\t\t\t\"attribute vec2 position;\",\n\t\t\t\t\t\"attribute vec2 uv;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t\"vUV = uv;\",\n\n\t\t\t\t\t\t\"vec2 pos = position;\",\n\n\t\t\t\t\t\t\"if( renderType == 2 ) {\",\n\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" ),\n\n\t\t\t\tfragmentShader: [\n\n\t\t\t\t\t\"precision mediump float;\",\n\n\t\t\t\t\t\"uniform lowp int renderType;\",\n\n\t\t\t\t\t\"uniform sampler2D map;\",\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\n\t\t\t\t\t\"uniform float opacity;\",\n\t\t\t\t\t\"uniform vec3 color;\",\n\n\t\t\t\t\t\"varying vec2 vUV;\",\n\n\t\t\t\t\t\"void main() {\",\n\n\t\t\t\t\t\t// pink square\n\n\t\t\t\t\t\t\"if( renderType == 0 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\n\n\t\t\t\t\t\t// restore\n\n\t\t\t\t\t\t\"} else if( renderType == 1 ) {\",\n\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\n\n\t\t\t\t\t\t// flare\n\n\t\t\t\t\t\t\"} else {\",\n\n\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\n\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\n\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\n\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\n\n\t\t\t\t\t\t\"}\",\n\n\t\t\t\t\t\"}\"\n\n\t\t\t\t].join( \"\\n\" )\n\n\t\t\t};\n\n\t\t}\n\n\t\tprogram = createProgram( shader );\n\n\t\tattributes = {\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\n\t\t}\n\n\t\tuniforms = {\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\n\t\t};\n\n\t};\n\n\t/*\n\t * Render lens flares\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n\t *         reads these back and calculates occlusion.\n\t */\n\n\tthis.render = function ( scene, camera, viewportWidth, viewportHeight ) {\n\n\t\tif ( flares.length === 0 ) return;\n\n\t\tvar tempPosition = new THREE.Vector3();\n\n\t\tvar invAspect = viewportHeight / viewportWidth,\n\t\t\thalfViewportWidth = viewportWidth * 0.5,\n\t\t\thalfViewportHeight = viewportHeight * 0.5;\n\n\t\tvar size = 16 / viewportHeight,\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\n\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tgl.enableVertexAttribArray( attributes.vertex );\n\t\tgl.enableVertexAttribArray( attributes.uv );\n\n\t\t// loop through all lens flares to update their occlusion and positions\n\t\t// setup gl and common used attribs/unforms\n\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\n\t\tgl.uniform1i( uniforms.map, 1 );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.disable( gl.CULL_FACE );\n\t\tgl.depthMask( false );\n\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\n\n\t\t\tsize = 16 / viewportHeight;\n\t\t\tscale.set( size * invAspect, size );\n\n\t\t\t// calc object screen position\n\n\t\t\tvar flare = flares[ i ];\n\t\t\t\n\t\t\ttempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );\n\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\n\n\t\t\t// setup arrays for gl programs\n\n\t\t\tscreenPosition.copy( tempPosition )\n\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\n\n\t\t\t// screen cull\n\n\t\t\tif ( hasVertexTexture || (\n\t\t\t\tscreenPositionPixels.x > 0 &&\n\t\t\t\tscreenPositionPixels.x < viewportWidth &&\n\t\t\t\tscreenPositionPixels.y > 0 &&\n\t\t\t\tscreenPositionPixels.y < viewportHeight ) ) {\n\n\t\t\t\t// save current RGB to temp texture\n\n\t\t\t\tgl.activeTexture( gl.TEXTURE1 );\n\t\t\t\tgl.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n\t\t\t\t// render pink quad\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\n\t\t\t\tgl.disable( gl.BLEND );\n\t\t\t\tgl.enable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// copy result to occlusionMap\n\n\t\t\t\tgl.activeTexture( gl.TEXTURE0 );\n\t\t\t\tgl.bindTexture( gl.TEXTURE_2D, occlusionTexture );\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );\n\n\n\t\t\t\t// restore graphics\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\n\t\t\t\tgl.disable( gl.DEPTH_TEST );\n\n\t\t\t\tgl.activeTexture( gl.TEXTURE1 );\n\t\t\t\tgl.bindTexture( gl.TEXTURE_2D, tempTexture );\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\n\t\t\t\t// update object positions\n\n\t\t\t\tflare.positionScreen.copy( screenPosition )\n\n\t\t\t\tif ( flare.customUpdateCallback ) {\n\n\t\t\t\t\tflare.customUpdateCallback( flare );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tflare.updateLensFlares();\n\n\t\t\t\t}\n\n\t\t\t\t// render flares\n\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\n\t\t\t\tgl.enable( gl.BLEND );\n\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\n\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\n\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\n\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewportHeight;\n\n\t\t\t\t\t\tscale.x = size * invAspect;\n\t\t\t\t\t\tscale.y = size;\n\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\n\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\n\n\t\t\t\t\t\trenderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\n\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\n\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tgl.enable( gl.CULL_FACE );\n\t\tgl.enable( gl.DEPTH_TEST );\n\t\tgl.depthMask( true );\n\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram ( shader ) {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\n\n\t\tgl.compileShader( fragmentShader );\n\t\tgl.compileShader( vertexShader );\n\n\t\tgl.attachShader( program, fragmentShader );\n\t\tgl.attachShader( program, vertexShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t}\n\n};\n\n// File:src/renderers/webgl/plugins/ShadowMapPlugin.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ShadowMapPlugin = function ( _renderer, _lights, _webglObjects, _webglObjectsImmediate ) {\n\n\tvar _gl = _renderer.context;\n\n\tvar _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,\n\n\t_frustum = new THREE.Frustum(),\n\t_projScreenMatrix = new THREE.Matrix4(),\n\n\t_min = new THREE.Vector3(),\n\t_max = new THREE.Vector3(),\n\n\t_matrixPosition = new THREE.Vector3(),\n\t\n\t_renderList = [];\n\n\t// init\n\n\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\n\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\n\n\t_depthMaterial = new THREE.ShaderMaterial( {\n\t\tuniforms: depthUniforms,\n\t\tvertexShader: depthShader.vertexShader,\n\t\tfragmentShader: depthShader.fragmentShader\n\t } );\n\n\t_depthMaterialMorph = new THREE.ShaderMaterial( {\n\t\tuniforms: depthUniforms,\n\t\tvertexShader: depthShader.vertexShader,\n\t\tfragmentShader: depthShader.fragmentShader,\n\t\tmorphTargets: true\n\t} );\n\n\t_depthMaterialSkin = new THREE.ShaderMaterial( {\n\t\tuniforms: depthUniforms,\n\t\tvertexShader: depthShader.vertexShader,\n\t\tfragmentShader: depthShader.fragmentShader,\n\t\tskinning: true\n\t} );\n\n\t_depthMaterialMorphSkin = new THREE.ShaderMaterial( {\n\t\tuniforms: depthUniforms,\n\t\tvertexShader: depthShader.vertexShader,\n\t\tfragmentShader: depthShader.fragmentShader,\n\t\tmorphTargets: true,\n\t\tskinning: true\n\t} );\n\n\t_depthMaterial._shadowPass = true;\n\t_depthMaterialMorph._shadowPass = true;\n\t_depthMaterialSkin._shadowPass = true;\n\t_depthMaterialMorphSkin._shadowPass = true;\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( _renderer.shadowMapEnabled === false ) return;\n\n\t\tvar i, il, j, jl, n,\n\n\t\tshadowMap, shadowMatrix, shadowCamera,\n\t\tprogram, buffer, material,\n\t\twebglObject, object, light,\n\n\t\tlights = [],\n\t\tk = 0,\n\n\t\tfog = null;\n\n\t\t// set GL state for depth map\n\n\t\t_gl.clearColor( 1, 1, 1, 1 );\n\t\t_gl.disable( _gl.BLEND );\n\n\t\t_gl.enable( _gl.CULL_FACE );\n\t\t_gl.frontFace( _gl.CCW );\n\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\n\n\t\t\t_gl.cullFace( _gl.FRONT );\n\n\t\t} else {\n\n\t\t\t_gl.cullFace( _gl.BACK );\n\n\t\t}\n\n\t\t_renderer.setDepthTest( true );\n\n\t\t// preprocess lights\n\t\t// \t- skip lights that are not casting shadows\n\t\t//\t- create virtual lights for cascaded shadow maps\n\n\t\tfor ( i = 0, il = _lights.length; i < il; i ++ ) {\n\n\t\t\tlight = _lights[ i ];\n\n\t\t\tif ( ! light.castShadow ) continue;\n\n\t\t\tif ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {\n\n\t\t\t\tfor ( n = 0; n < light.shadowCascadeCount; n ++ ) {\n\n\t\t\t\t\tvar virtualLight;\n\n\t\t\t\t\tif ( ! light.shadowCascadeArray[ n ] ) {\n\n\t\t\t\t\t\tvirtualLight = createVirtualLight( light, n );\n\t\t\t\t\t\tvirtualLight.originalCamera = camera;\n\n\t\t\t\t\t\tvar gyro = new THREE.Gyroscope();\n\t\t\t\t\t\tgyro.position.copy( light.shadowCascadeOffset );\n\n\t\t\t\t\t\tgyro.add( virtualLight );\n\t\t\t\t\t\tgyro.add( virtualLight.target );\n\n\t\t\t\t\t\tcamera.add( gyro );\n\n\t\t\t\t\t\tlight.shadowCascadeArray[ n ] = virtualLight;\n\n\t\t\t\t\t\tconsole.log( \"Created virtualLight\", virtualLight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvirtualLight = light.shadowCascadeArray[ n ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tupdateVirtualLight( light, n );\n\n\t\t\t\t\tlights[ k ] = virtualLight;\n\t\t\t\t\tk ++;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlights[ k ] = light;\n\t\t\t\tk ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// render depth map\n\n\t\tfor ( i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tlight = lights[ i ];\n\n\t\t\tif ( ! light.shadowMap ) {\n\n\t\t\t\tvar shadowFilter = THREE.LinearFilter;\n\n\t\t\t\tif ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {\n\n\t\t\t\t\tshadowFilter = THREE.NearestFilter;\n\n\t\t\t\t}\n\n\t\t\t\tvar pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };\n\n\t\t\t\tlight.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );\n\t\t\t\tlight.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );\n\n\t\t\t\tlight.shadowMatrix = new THREE.Matrix4();\n\n\t\t\t}\n\n\t\t\tif ( ! light.shadowCamera ) {\n\n\t\t\t\tif ( light instanceof THREE.SpotLight ) {\n\n\t\t\t\t\tlight.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );\n\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\n\n\t\t\t\t\tlight.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( \"Unsupported light type for shadow\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tscene.add( light.shadowCamera );\n\n\t\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t}\n\n\t\t\tif ( light.shadowCameraVisible && ! light.cameraHelper ) {\n\n\t\t\t\tlight.cameraHelper = new THREE.CameraHelper( light.shadowCamera );\n\t\t\t\tscene.add( light.cameraHelper );\n\n\t\t\t}\n\n\t\t\tif ( light.isVirtual && virtualLight.originalCamera == camera ) {\n\n\t\t\t\tupdateShadowCamera( camera, light );\n\n\t\t\t}\n\n\t\t\tshadowMap = light.shadowMap;\n\t\t\tshadowMatrix = light.shadowMatrix;\n\t\t\tshadowCamera = light.shadowCamera;\n\n\t\t\t//\n\n\t\t\tshadowCamera.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t_matrixPosition.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\tshadowCamera.lookAt( _matrixPosition );\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\n\n\t\t\t//\n\n\t\t\tif ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;\n\t\t\tif ( light.shadowCameraVisible ) light.cameraHelper.update();\n\n\t\t\t// compute shadow matrix\n\n\t\t\tshadowMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t// render shadow map\n\n\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t_renderer.clear();\n\n\t\t\t// set object matrices & frustum culling\n\n\t\t\t_renderList.length = 0;\n\n\t\t\tprojectObject( scene, scene, shadowCamera );\n\n\n\t\t\t// render regular objects\n\n\t\t\tvar objectMaterial, useMorphing, useSkinning;\n\n\t\t\tfor ( j = 0, jl = _renderList.length; j < jl; j ++ ) {\n\n\t\t\t\twebglObject = _renderList[ j ];\n\n\t\t\t\tobject = webglObject.object;\n\t\t\t\tbuffer = webglObject.buffer;\n\n\t\t\t\t// culling is overriden globally for all objects\n\t\t\t\t// while rendering depth map\n\n\t\t\t\t// need to deal with MeshFaceMaterial somehow\n\t\t\t\t// in that case just use the first of material.materials for now\n\t\t\t\t// (proper solution would require to break objects by materials\n\t\t\t\t//  similarly to regular rendering and then set corresponding\n\t\t\t\t//  depth materials per each chunk instead of just once per object)\n\n\t\t\t\tobjectMaterial = getObjectMaterial( object );\n\n\t\t\t\tuseMorphing = object.geometry.morphTargets !== undefined && object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;\n\t\t\t\tuseSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;\n\n\t\t\t\tif ( object.customDepthMaterial ) {\n\n\t\t\t\t\tmaterial = object.customDepthMaterial;\n\n\t\t\t\t} else if ( useSkinning ) {\n\n\t\t\t\t\tmaterial = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;\n\n\t\t\t\t} else if ( useMorphing ) {\n\n\t\t\t\t\tmaterial = _depthMaterialMorph;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial = _depthMaterial;\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setMaterialFaces( objectMaterial );\n\n\t\t\t\tif ( buffer instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, _lights, fog, material, buffer, object );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_renderer.renderBuffer( shadowCamera, _lights, fog, material, buffer, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// set matrices and render immediate objects\n\n\t\t\tfor ( j = 0, jl = _webglObjectsImmediate.length; j < jl; j ++ ) {\n\n\t\t\t\twebglObject = _webglObjectsImmediate[ j ];\n\t\t\t\tobject = webglObject.object;\n\n\t\t\t\tif ( object.visible && object.castShadow ) {\n\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\t_renderer.renderImmediateObject( shadowCamera, _lights, fog, _depthMaterial, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore GL state\n\n\t\tvar clearColor = _renderer.getClearColor(),\n\t\tclearAlpha = _renderer.getClearAlpha();\n\n\t\t_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );\n\t\t_gl.enable( _gl.BLEND );\n\n\t\tif ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {\n\n\t\t\t_gl.cullFace( _gl.BACK );\n\n\t\t}\n\n\t\t_renderer.resetGLState();\n\n\t};\n\n\tfunction projectObject( scene, object, shadowCamera ){\n\n\t\tif ( object.visible ) {\n\n\t\t\tvar webglObjects = _webglObjects[ object.id ];\n\n\t\t\tif ( webglObjects && object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject( object ) === true) ) {\n\n\t\t\t\tfor ( var i = 0, l = webglObjects.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar webglObject = webglObjects[ i ];\n\n\t\t\t\t\tobject._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\t\t\t\t\t_renderList.push( webglObject );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( scene, object.children[ i ], shadowCamera );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVirtualLight( light, cascade ) {\n\n\t\tvar virtualLight = new THREE.DirectionalLight();\n\n\t\tvirtualLight.isVirtual = true;\n\n\t\tvirtualLight.onlyShadow = true;\n\t\tvirtualLight.castShadow = true;\n\n\t\tvirtualLight.shadowCameraNear = light.shadowCameraNear;\n\t\tvirtualLight.shadowCameraFar = light.shadowCameraFar;\n\n\t\tvirtualLight.shadowCameraLeft = light.shadowCameraLeft;\n\t\tvirtualLight.shadowCameraRight = light.shadowCameraRight;\n\t\tvirtualLight.shadowCameraBottom = light.shadowCameraBottom;\n\t\tvirtualLight.shadowCameraTop = light.shadowCameraTop;\n\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\n\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\n\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\n\t\tvirtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];\n\t\tvirtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];\n\n\t\tvirtualLight.pointsWorld = [];\n\t\tvirtualLight.pointsFrustum = [];\n\n\t\tvar pointsWorld = virtualLight.pointsWorld,\n\t\t\tpointsFrustum = virtualLight.pointsFrustum;\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tpointsWorld[ i ] = new THREE.Vector3();\n\t\t\tpointsFrustum[ i ] = new THREE.Vector3();\n\n\t\t}\n\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\n\n\t\tpointsFrustum[ 0 ].set( - 1, - 1, nearZ );\n\t\tpointsFrustum[ 1 ].set(  1, - 1, nearZ );\n\t\tpointsFrustum[ 2 ].set( - 1,  1, nearZ );\n\t\tpointsFrustum[ 3 ].set(  1,  1, nearZ );\n\n\t\tpointsFrustum[ 4 ].set( - 1, - 1, farZ );\n\t\tpointsFrustum[ 5 ].set(  1, - 1, farZ );\n\t\tpointsFrustum[ 6 ].set( - 1,  1, farZ );\n\t\tpointsFrustum[ 7 ].set(  1,  1, farZ );\n\n\t\treturn virtualLight;\n\n\t}\n\n\t// Synchronize virtual light with the original light\n\n\tfunction updateVirtualLight( light, cascade ) {\n\n\t\tvar virtualLight = light.shadowCascadeArray[ cascade ];\n\n\t\tvirtualLight.position.copy( light.position );\n\t\tvirtualLight.target.position.copy( light.target.position );\n\t\tvirtualLight.lookAt( virtualLight.target );\n\n\t\tvirtualLight.shadowCameraVisible = light.shadowCameraVisible;\n\t\tvirtualLight.shadowDarkness = light.shadowDarkness;\n\n\t\tvirtualLight.shadowBias = light.shadowCascadeBias[ cascade ];\n\n\t\tvar nearZ = light.shadowCascadeNearZ[ cascade ];\n\t\tvar farZ = light.shadowCascadeFarZ[ cascade ];\n\n\t\tvar pointsFrustum = virtualLight.pointsFrustum;\n\n\t\tpointsFrustum[ 0 ].z = nearZ;\n\t\tpointsFrustum[ 1 ].z = nearZ;\n\t\tpointsFrustum[ 2 ].z = nearZ;\n\t\tpointsFrustum[ 3 ].z = nearZ;\n\n\t\tpointsFrustum[ 4 ].z = farZ;\n\t\tpointsFrustum[ 5 ].z = farZ;\n\t\tpointsFrustum[ 6 ].z = farZ;\n\t\tpointsFrustum[ 7 ].z = farZ;\n\n\t}\n\n\t// Fit shadow camera's ortho frustum to camera frustum\n\n\tfunction updateShadowCamera( camera, light ) {\n\n\t\tvar shadowCamera = light.shadowCamera,\n\t\t\tpointsFrustum = light.pointsFrustum,\n\t\t\tpointsWorld = light.pointsWorld;\n\n\t\t_min.set( Infinity, Infinity, Infinity );\n\t\t_max.set( - Infinity, - Infinity, - Infinity );\n\n\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\tvar p = pointsWorld[ i ];\n\n\t\t\tp.copy( pointsFrustum[ i ] );\n\t\t\tp.unproject( camera );\n\n\t\t\tp.applyMatrix4( shadowCamera.matrixWorldInverse );\n\n\t\t\tif ( p.x < _min.x ) _min.x = p.x;\n\t\t\tif ( p.x > _max.x ) _max.x = p.x;\n\n\t\t\tif ( p.y < _min.y ) _min.y = p.y;\n\t\t\tif ( p.y > _max.y ) _max.y = p.y;\n\n\t\t\tif ( p.z < _min.z ) _min.z = p.z;\n\t\t\tif ( p.z > _max.z ) _max.z = p.z;\n\n\t\t}\n\n\t\tshadowCamera.left = _min.x;\n\t\tshadowCamera.right = _max.x;\n\t\tshadowCamera.top = _max.y;\n\t\tshadowCamera.bottom = _min.y;\n\n\t\t// can't really fit near/far\n\t\t//shadowCamera.near = _min.z;\n\t\t//shadowCamera.far = _max.z;\n\n\t\tshadowCamera.updateProjectionMatrix();\n\n\t}\n\n\t// For the moment just ignore objects that have multiple materials with different animation methods\n\t// Only the first material will be taken into account for deciding which depth material to use for shadow maps\n\n\tfunction getObjectMaterial( object ) {\n\n\t\treturn object.material instanceof THREE.MeshFaceMaterial\n\t\t\t? object.material.materials[ 0 ]\n\t\t\t: object.material;\n\n\t};\n\n};\n\n// File:src/renderers/webgl/plugins/SpritePlugin.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SpritePlugin = function ( renderer, sprites ) {\n\n\tvar gl = renderer.context;\n\n\tvar vertexBuffer, elementBuffer;\n\tvar program, attributes, uniforms;\n\n\tvar texture;\n\t\n\tvar init = function () {\n\n\t\tvar vertices = new Float32Array( [\n\t\t\t- 0.5, - 0.5,  0, 0,\n\t\t\t  0.5, - 0.5,  1, 0,\n\t\t\t  0.5,   0.5,  1, 1,\n\t\t\t- 0.5,   0.5,  0, 1\n\t\t] );\n\n\t\tvar faces = new Uint16Array( [\n\t\t\t0, 1, 2,\n\t\t\t0, 2, 3\n\t\t] );\n\n\t\tvertexBuffer  = gl.createBuffer();\n\t\telementBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\n\n\t\tprogram = createProgram();\n\n\t\tattributes = {\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\n\t\t};\n\n\t\tuniforms = {\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\n\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\n\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\n\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\n\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\n\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\n\t\t};\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = 8;\n\t\tcanvas.height = 8;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fillRect( 0, 0, 8, 8 );\n\n\t\ttexture = new THREE.Texture( canvas );\n\t\ttexture.needsUpdate = true;\n\n\t};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( sprites.length === 0 ) return;\n\n\t\t// setup gl\n\n\t\tif ( program === undefined ) {\n\n\t\t\tinit();\n\n\t\t}\n\n\t\tgl.useProgram( program );\n\n\t\tgl.enableVertexAttribArray( attributes.position );\n\t\tgl.enableVertexAttribArray( attributes.uv );\n\n\t\tgl.disable( gl.CULL_FACE );\n\t\tgl.enable( gl.BLEND );\n\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\n\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\n\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\n\n\t\tgl.activeTexture( gl.TEXTURE0 );\n\t\tgl.uniform1i( uniforms.map, 0 );\n\n\t\tvar oldFogType = 0;\n\t\tvar sceneFogType = 0;\n\t\tvar fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\n\n\t\t\tif ( fog instanceof THREE.Fog ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\n\t\t\t\toldFogType = 1;\n\t\t\t\tsceneFogType = 1;\n\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\n\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\n\t\t\t\toldFogType = 2;\n\t\t\t\tsceneFogType = 2;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\n\t\t\toldFogType = 0;\n\t\t\tsceneFogType = 0;\n\n\t\t}\n\n\n\t\t// update positions and sort\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\n\t\t\tsprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\n\n\t\t\tif ( sprite.renderDepth === null ) {\n\n\t\t\t\tsprite.z = - sprite._modelViewMatrix.elements[ 14 ];\n\n\t\t\t} else {\n\n\t\t\t\tsprite.z = sprite.renderDepth;\n\n\t\t\t}\n\n\t\t}\n\n\t\tsprites.sort( painterSortStable );\n\n\t\t// render all sprites\n\n\t\tvar scale = [];\n\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\n\n\t\t\tvar sprite = sprites[ i ];\n\t\t\tvar material = sprite.material;\n\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );\n\n\t\t\tscale[ 0 ] = sprite.scale.x;\n\t\t\tscale[ 1 ] = sprite.scale.y;\n\n\t\t\tvar fogType = 0;\n\n\t\t\tif ( scene.fog && material.fog ) {\n\n\t\t\t\tfogType = sceneFogType;\n\n\t\t\t}\n\n\t\t\tif ( oldFogType !== fogType ) {\n\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\n\t\t\t\toldFogType = fogType;\n\n\t\t\t}\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\n\n\t\t\t}\n\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\n\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\n\n\t\t\trenderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\n\t\t\trenderer.setDepthTest( material.depthTest );\n\t\t\trenderer.setDepthWrite( material.depthWrite );\n\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\n\n\t\t\t\trenderer.setTexture( material.map, 0 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setTexture( texture, 0 );\n\n\t\t\t}\n\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\n\n\t\t}\n\n\t\t// restore gl\n\n\t\tgl.enable( gl.CULL_FACE );\n\t\t\n\t\trenderer.resetGLState();\n\n\t};\n\n\tfunction createProgram () {\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( vertexShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform float rotation;',\n\t\t\t'uniform vec2 scale;',\n\t\t\t'uniform vec2 uvOffset;',\n\t\t\t'uniform vec2 uvScale;',\n\n\t\t\t'attribute vec2 position;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\n\n\t\t\t\t'vec2 alignedPosition = position * scale;',\n\n\t\t\t\t'vec2 rotatedPosition;',\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n\n\t\t\t\t'vec4 finalPosition;',\n\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\n\n\t\t\t\t'gl_Position = finalPosition;',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.shaderSource( fragmentShader, [\n\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\n\n\t\t\t'uniform vec3 color;',\n\t\t\t'uniform sampler2D map;',\n\t\t\t'uniform float opacity;',\n\n\t\t\t'uniform int fogType;',\n\t\t\t'uniform vec3 fogColor;',\n\t\t\t'uniform float fogDensity;',\n\t\t\t'uniform float fogNear;',\n\t\t\t'uniform float fogFar;',\n\t\t\t'uniform float alphaTest;',\n\n\t\t\t'varying vec2 vUV;',\n\n\t\t\t'void main() {',\n\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\n\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\n\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n\n\t\t\t\t'if ( fogType > 0 ) {',\n\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\n\t\t\t\t\t'float fogFactor = 0.0;',\n\n\t\t\t\t\t'if ( fogType == 1 ) {',\n\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\n\n\t\t\t\t\t'} else {',\n\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\n\t\t\t\t\t\t'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n\n\t\t\t\t\t'}',\n\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\n\n\t\t\t\t'}',\n\n\t\t\t'}'\n\n\t\t].join( '\\n' ) );\n\n\t\tgl.compileShader( vertexShader );\n\t\tgl.compileShader( fragmentShader );\n\n\t\tgl.attachShader( program, vertexShader );\n\t\tgl.attachShader( program, fragmentShader );\n\n\t\tgl.linkProgram( program );\n\n\t\treturn program;\n\n\t};\n\n\tfunction painterSortStable ( a, b ) {\n\n\t\tif ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn b.id - a.id;\n\n\t\t}\n\n\t};\n\n};\n\n// File:src/extras/GeometryUtils.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GeometryUtils = {\n\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\n\t\tvar matrix;\n\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\n\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\tmatrix = geometry2.matrix;\n\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t}\n\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t},\n\n\tcenter: function ( geometry ) {\n\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\treturn geometry.center();\n\n\t}\n\n};\n\n// File:src/extras/ImageUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Daosheng Mu / https://github.com/DaoshengMu/\n */\n\nTHREE.ImageUtils = {\n\n\tcrossOrigin: undefined,\n\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\n\n\t\tvar loader = new THREE.ImageLoader();\n\t\tloader.crossOrigin = this.crossOrigin;\n\n\t\tvar texture = new THREE.Texture( undefined, mapping );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t}, undefined, function ( event ) {\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t} );\n\n\t\ttexture.sourceFile = url;\n\n\t\treturn texture;\n\n\t},\n\n\tloadTextureCube: function ( array, mapping, onLoad, onError ) {\n\n\t\tvar images = [];\n\n\t\tvar loader = new THREE.ImageLoader();\n\t\tloader.crossOrigin = this.crossOrigin;\n\n\t\tvar texture = new THREE.CubeTexture( images, mapping );\n\n\t\t// no flipping needed for cube textures\n\n\t\ttexture.flipY = false;\n\n\t\tvar loaded = 0;\n\n\t\tvar loadTexture = function ( i ) {\n\n\t\t\tloader.load( array[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfor ( var i = 0, il = array.length; i < il; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tloadCompressedTexture: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )\n\n\t},\n\n\tloadCompressedTextureCube: function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )\n\n\t},\n\n\tgetNormalMap: function ( image, depth ) {\n\n\t\t// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/\n\n\t\tvar cross = function ( a, b ) {\n\n\t\t\treturn [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];\n\n\t\t}\n\n\t\tvar subtract = function ( a, b ) {\n\n\t\t\treturn [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];\n\n\t\t}\n\n\t\tvar normalize = function ( a ) {\n\n\t\t\tvar l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );\n\t\t\treturn [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];\n\n\t\t}\n\n\t\tdepth = depth | 1;\n\n\t\tvar width = image.width;\n\t\tvar height = image.height;\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tvar data = context.getImageData( 0, 0, width, height ).data;\n\t\tvar imageData = context.createImageData( width, height );\n\t\tvar output = imageData.data;\n\n\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\tfor ( var y = 0; y < height; y ++ ) {\n\n\t\t\t\tvar ly = y - 1 < 0 ? 0 : y - 1;\n\t\t\t\tvar uy = y + 1 > height - 1 ? height - 1 : y + 1;\n\t\t\t\tvar lx = x - 1 < 0 ? 0 : x - 1;\n\t\t\t\tvar ux = x + 1 > width - 1 ? width - 1 : x + 1;\n\n\t\t\t\tvar points = [];\n\t\t\t\tvar origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];\n\t\t\t\tpoints.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );\n\t\t\t\tpoints.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );\n\n\t\t\t\tvar normals = [];\n\t\t\t\tvar num_points = points.length;\n\n\t\t\t\tfor ( var i = 0; i < num_points; i ++ ) {\n\n\t\t\t\t\tvar v1 = points[ i ];\n\t\t\t\t\tvar v2 = points[ ( i + 1 ) % num_points ];\n\t\t\t\t\tv1 = subtract( v1, origin );\n\t\t\t\t\tv2 = subtract( v2, origin );\n\t\t\t\t\tnormals.push( normalize( cross( v1, v2 ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar normal = [ 0, 0, 0 ];\n\n\t\t\t\tfor ( var i = 0; i < normals.length; i ++ ) {\n\n\t\t\t\t\tnormal[ 0 ] += normals[ i ][ 0 ];\n\t\t\t\t\tnormal[ 1 ] += normals[ i ][ 1 ];\n\t\t\t\t\tnormal[ 2 ] += normals[ i ][ 2 ];\n\n\t\t\t\t}\n\n\t\t\t\tnormal[ 0 ] /= normals.length;\n\t\t\t\tnormal[ 1 ] /= normals.length;\n\t\t\t\tnormal[ 2 ] /= normals.length;\n\n\t\t\t\tvar idx = ( y * width + x ) * 4;\n\n\t\t\t\toutput[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;\n\t\t\t\toutput[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;\n\t\t\t\toutput[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;\n\t\t\t\toutput[ idx + 3 ] = 255;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\treturn canvas;\n\n\t},\n\n\tgenerateDataTexture: function ( width, height, color ) {\n\n\t\tvar size = width * height;\n\t\tvar data = new Uint8Array( 3 * size );\n\n\t\tvar r = Math.floor( color.r * 255 );\n\t\tvar g = Math.floor( color.g * 255 );\n\t\tvar b = Math.floor( color.b * 255 );\n\n\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\tdata[ i * 3 ] \t   = r;\n\t\t\tdata[ i * 3 + 1 ] = g;\n\t\t\tdata[ i * 3 + 2 ] = b;\n\n\t\t}\n\n\t\tvar texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t}\n\n};\n\n// File:src/extras/SceneUtils.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\n\n\t\tvar group = new THREE.Object3D();\n\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t},\n\n\tdetach: function ( child, parent, scene ) {\n\n\t\tchild.applyMatrix( parent.matrixWorld );\n\t\tparent.remove( child );\n\t\tscene.add( child );\n\n\t},\n\n\tattach: function ( child, scene, parent ) {\n\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\t\tchild.applyMatrix( matrixWorldInverse );\n\n\t\tscene.remove( child );\n\t\tparent.add( child );\n\n\t}\n\n};\n\n// File:src/extras/FontUtils.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * For Text operations in three.js (See TextGeometry)\n *\n * It uses techniques used in:\n *\n * \ttypeface.js and canvastext\n * \t\tFor converting fonts and rendering with javascript\n *\t\thttp://typeface.neocracy.org\n *\n *\tTriangulation ported from AS3\n *\t\tSimple Polygon Triangulation\n *\t\thttp://actionsnippet.com/?p=1462\n *\n * \tA Method to triangulate shapes with holes\n *\t\thttp://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/\n *\n */\n\nTHREE.FontUtils = {\n\n\tfaces: {},\n\n\t// Just for now. face[weight][style]\n\n\tface: 'helvetiker',\n\tweight: 'normal',\n\tstyle: 'normal',\n\tsize: 150,\n\tdivisions: 10,\n\n\tgetFace: function () {\n\n\t\ttry {\n\n\t\t\treturn this.faces[ this.face ][ this.weight ][ this.style ];\n\n\t\t} catch (e) {\n\n\t\t\tthrow \"The font \" + this.face + \" with \" + this.weight + \" weight and \" + this.style + \" style is missing.\"\n\n\t\t};\n\n\t},\n\n\tloadFace: function ( data ) {\n\n\t\tvar family = data.familyName.toLowerCase();\n\n\t\tvar ThreeFont = this;\n\n\t\tThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};\n\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};\n\t\tThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\n\n\t\tvar face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;\n\n\t\treturn data;\n\n\t},\n\n\tdrawText: function ( text ) {\n\n\t\tvar characterPts = [], allPts = [];\n\n\t\t// RenderText\n\n\t\tvar i, p,\n\t\t\tface = this.getFace(),\n\t\t\tscale = this.size / face.resolution,\n\t\t\toffset = 0,\n\t\t\tchars = String( text ).split( '' ),\n\t\t\tlength = chars.length;\n\n\t\tvar fontPaths = [];\n\n\t\tfor ( i = 0; i < length; i ++ ) {\n\n\t\t\tvar path = new THREE.Path();\n\n\t\t\tvar ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );\n\t\t\toffset += ret.offset;\n\n\t\t\tfontPaths.push( ret.path );\n\n\t\t}\n\n\t\t// get the width\n\n\t\tvar width = offset / 2;\n\t\t//\n\t\t// for ( p = 0; p < allPts.length; p++ ) {\n\t\t//\n\t\t// \tallPts[ p ].x -= width;\n\t\t//\n\t\t// }\n\n\t\t//var extract = this.extractPoints( allPts, characterPts );\n\t\t//extract.contour = allPts;\n\n\t\t//extract.paths = fontPaths;\n\t\t//extract.offset = width;\n\n\t\treturn { paths: fontPaths, offset: width };\n\n\t},\n\n\n\n\n\textractGlyphPoints: function ( c, face, scale, offset, path ) {\n\n\t\tvar pts = [];\n\n\t\tvar i, i2, divisions,\n\t\t\toutline, action, length,\n\t\t\tscaleX, scaleY,\n\t\t\tx, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,\n\t\t\tlaste,\n\t\t\tglyph = face.glyphs[ c ] || face.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) return;\n\n\t\tif ( glyph.o ) {\n\n\t\t\toutline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\t\t\tlength = outline.length;\n\n\t\t\tscaleX = scale;\n\t\t\tscaleY = scale;\n\n\t\t\tfor ( i = 0; i < length; ) {\n\n\t\t\t\taction = outline[ i ++ ];\n\n\t\t\t\t//console.log( action );\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm':\n\n\t\t\t\t\t// Move To\n\n\t\t\t\t\tx = outline[ i ++ ] * scaleX + offset;\n\t\t\t\t\ty = outline[ i ++ ] * scaleY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l':\n\n\t\t\t\t\t// Line To\n\n\t\t\t\t\tx = outline[ i ++ ] * scaleX + offset;\n\t\t\t\t\ty = outline[ i ++ ] * scaleY;\n\t\t\t\t\tpath.lineTo( x,y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q':\n\n\t\t\t\t\t// QuadraticCurveTo\n\n\t\t\t\t\tcpx  = outline[ i ++ ] * scaleX + offset;\n\t\t\t\t\tcpy  = outline[ i ++ ] * scaleY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scaleX + offset;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scaleY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\n\t\t\t\t\t  }\n\n\t\t\t\t  }\n\n\t\t\t\t  break;\n\n\t\t\t\tcase 'b':\n\n\t\t\t\t\t// Cubic Bezier Curve\n\n\t\t\t\t\tcpx  = outline[ i ++ ] *  scaleX + offset;\n\t\t\t\t\tcpy  = outline[ i ++ ] *  scaleY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] *  scaleX + offset;\n\t\t\t\t\tcpy1 = outline[ i ++ ] *  scaleY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] *  scaleX + offset;\n\t\t\t\t\tcpy2 = outline[ i ++ ] *  scaleY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tlaste = pts[ pts.length - 1 ];\n\n\t\t\t\t\tif ( laste ) {\n\n\t\t\t\t\t\tcpx0 = laste.x;\n\t\t\t\t\t\tcpy0 = laste.y;\n\n\t\t\t\t\t\tfor ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {\n\n\t\t\t\t\t\t\tvar t = i2 / divisions;\n\t\t\t\t\t\t\tvar tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\t\t\t\tvar ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\n\n\t\treturn { offset: glyph.ha * scale, path:path };\n\t}\n\n};\n\n\nTHREE.FontUtils.generateShapes = function ( text, parameters ) {\n\n\t// Parameters \n\n\tparameters = parameters || {};\n\n\tvar size = parameters.size !== undefined ? parameters.size : 100;\n\tvar curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments : 4;\n\n\tvar font = parameters.font !== undefined ? parameters.font : 'helvetiker';\n\tvar weight = parameters.weight !== undefined ? parameters.weight : 'normal';\n\tvar style = parameters.style !== undefined ? parameters.style : 'normal';\n\n\tTHREE.FontUtils.size = size;\n\tTHREE.FontUtils.divisions = curveSegments;\n\n\tTHREE.FontUtils.face = font;\n\tTHREE.FontUtils.weight = weight;\n\tTHREE.FontUtils.style = style;\n\n\t// Get a Font data json object\n\n\tvar data = THREE.FontUtils.drawText( text );\n\n\tvar paths = data.paths;\n\tvar shapes = [];\n\n\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t}\n\n\treturn shapes;\n\n};\n\n\n/**\n * This code is a quick port of code written in C++ which was submitted to\n * flipcode.com by John W. Ratcliff  // July 22, 2000\n * See original code and more information here:\n * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n *\n * ported to actionscript by Zevan Rosser\n * www.actionsnippet.com\n *\n * ported to javascript by Joshua Koo\n * http://www.lab4games.net/zz85/blog\n *\n */\n\n\n( function ( namespace ) {\n\n\tvar EPSILON = 0.0000000001;\n\n\t// takes in an contour array and returns\n\n\tvar process = function ( contour, indices ) {\n\n\t\tvar n = contour.length;\n\n\t\tif ( n < 3 ) return null;\n\n\t\tvar result = [],\n\t\t\tverts = [],\n\t\t\tvertIndices = [];\n\n\t\t/* we want a counter-clockwise polygon in verts */\n\n\t\tvar u, v, w;\n\n\t\tif ( area( contour ) > 0.0 ) {\n\n\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\n\n\t\t} else {\n\n\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\n\n\t\t}\n\n\t\tvar nv = n;\n\n\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\n\n\t\tvar count = 2 * nv;   /* error detection */\n\n\t\tfor ( v = nv - 1; nv > 2; ) {\n\n\t\t\t/* if we loop, it is probably a non-simple polygon */\n\n\t\t\tif ( ( count -- ) <= 0 ) {\n\n\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\n\n\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\n\t\t\t\t//return null;\n\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\n\t\t\t\tconsole.log( 'Warning, unable to triangulate polygon!' );\n\n\t\t\t\tif ( indices ) return vertIndices;\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\n\n\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\n\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\n\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\n\n\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\n\n\t\t\t\tvar a, b, c, s, t;\n\n\t\t\t\t/* true names of the vertices */\n\n\t\t\t\ta = verts[ u ];\n\t\t\t\tb = verts[ v ];\n\t\t\t\tc = verts[ w ];\n\n\t\t\t\t/* output Triangle */\n\n\t\t\t\tresult.push( [ contour[ a ],\n\t\t\t\t\tcontour[ b ],\n\t\t\t\t\tcontour[ c ] ] );\n\n\n\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\n\n\t\t\t\t/* remove v from the remaining polygon */\n\n\t\t\t\tfor ( s = v, t = v + 1; t < nv; s++, t++ ) {\n\n\t\t\t\t\tverts[ s ] = verts[ t ];\n\n\t\t\t\t}\n\n\t\t\t\tnv --;\n\n\t\t\t\t/* reset error detection counter */\n\n\t\t\t\tcount = 2 * nv;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( indices ) return vertIndices;\n\t\treturn result;\n\n\t};\n\n\t// calculate area of the contour polygon\n\n\tvar area = function ( contour ) {\n\n\t\tvar n = contour.length;\n\t\tvar a = 0.0;\n\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t};\n\n\tvar snip = function ( contour, u, v, w, n, verts ) {\n\n\t\tvar p;\n\t\tvar ax, ay, bx, by;\n\t\tvar cx, cy, px, py;\n\n\t\tax = contour[ verts[ u ] ].x;\n\t\tay = contour[ verts[ u ] ].y;\n\n\t\tbx = contour[ verts[ v ] ].x;\n\t\tby = contour[ verts[ v ] ].y;\n\n\t\tcx = contour[ verts[ w ] ].x;\n\t\tcy = contour[ verts[ w ] ].y;\n\n\t\tif ( EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\n\n\t\tvar aX, aY, bX, bY, cX, cY;\n\t\tvar apx, apy, bpx, bpy, cpx, cpy;\n\t\tvar cCROSSap, bCROSScp, aCROSSbp;\n\n\t\taX = cx - bx;  aY = cy - by;\n\t\tbX = ax - cx;  bY = ay - cy;\n\t\tcX = bx - ax;  cY = by - ay;\n\n\t\tfor ( p = 0; p < n; p ++ ) {\n\n\t\t\tpx = contour[ verts[ p ] ].x\n\t\t\tpy = contour[ verts[ p ] ].y\n\n\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\n\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\n\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\n\n\t\t\tapx = px - ax;  apy = py - ay;\n\t\t\tbpx = px - bx;  bpy = py - by;\n\t\t\tcpx = px - cx;  cpy = py - cy;\n\n\t\t\t// see if p is inside triangle abc\n\n\t\t\taCROSSbp = aX * bpy - aY * bpx;\n\t\t\tcCROSSap = cX * apy - cY * apx;\n\t\t\tbCROSScp = bX * cpy - bY * cpx;\n\n\t\t\tif ( ( aCROSSbp >= - EPSILON ) && ( bCROSScp >= - EPSILON ) && ( cCROSSap >= - EPSILON ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n\n\tnamespace.Triangulate = process;\n\tnamespace.Triangulate.area = area;\n\n\treturn namespace;\n\n} )( THREE.FontUtils );\n\n// To use the typeface.js face files, hook up the API\nself._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };\nTHREE.typeface_js = self._typeface_js;\n\n// File:src/extras/audio/Audio.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.Audio = function ( listener ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'Audio';\n\n\tthis.context = listener.context;\n\tthis.source = this.context.createBufferSource();\n\n\tthis.gain = this.context.createGain();\n\tthis.gain.connect( this.context.destination );\n\n\tthis.panner = this.context.createPanner();\n\tthis.panner.connect( this.gain );\n\n};\n\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Audio.prototype.load = function ( file ) {\n\n\tvar scope = this;\n\n\tvar request = new XMLHttpRequest();\n\trequest.open( 'GET', file, true );\n\trequest.responseType = 'arraybuffer';\n\trequest.onload = function ( e ) {\n\n\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\n\n\t\t\tscope.source.buffer = buffer;\n\t\t\tscope.source.connect( scope.panner );\n\t\t\tscope.source.start( 0 );\n\n\t\t} );\n\n\t};\n\trequest.send();\n\n\treturn this;\n\n};\n\nTHREE.Audio.prototype.setLoop = function ( value ) {\n\n\tthis.source.loop = value;\n\n};\n\nTHREE.Audio.prototype.setRefDistance = function ( value ) {\n\n\tthis.panner.refDistance = value;\n\n};\n\nTHREE.Audio.prototype.setRolloffFactor = function ( value ) {\n\n\tthis.panner.rolloffFactor = value;\n\n};\n\nTHREE.Audio.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\n\n\t\tthis.panner.setPosition( position.x, position.y, position.z );\n\n\t};\n\n} )();\n\n// File:src/extras/audio/AudioListener.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AudioListener = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.type = 'AudioListener';\n\n\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\n\n};\n\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\n\n\tvar position = new THREE.Vector3();\n\tvar quaternion = new THREE.Quaternion();\n\tvar scale = new THREE.Vector3();\n\n\tvar orientation = new THREE.Vector3();\n\tvar velocity = new THREE.Vector3();\n\n\tvar positionPrev = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tvar listener = this.context.listener;\n\n\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\torientation.set( 0, 0, -1 ).applyQuaternion( quaternion );\n\t\tvelocity.subVectors( position, positionPrev );\n\n\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );\n\t\tlistener.setVelocity( velocity.x, velocity.y, velocity.z );\n\n\t\tpositionPrev.copy( position );\n\n\t};\n\n} )();\n\n// File:src/extras/core/Curve.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of Curve methods\n * .getPoint(t), getTangent(t)\n * .getPointAt(u), getTagentAt(u)\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following classes subclasses THREE.Curve:\n *\n * -- 2d classes --\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.CubicBezierCurve\n * THREE.SplineCurve\n * THREE.ArcCurve\n * THREE.EllipseCurve\n *\n * -- 3d classes --\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n * THREE.CubicBezierCurve3\n * THREE.SplineCurve3\n * THREE.ClosedSplineCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath\n *\n **/\n\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\n\nTHREE.Curve = function () {\n\n};\n\n// Virtual base class method to overwrite and implement in subclasses\n//\t- t [0 .. 1]\n\nTHREE.Curve.prototype.getPoint = function ( t ) {\n\n\tconsole.log( \"Warning, getPoint() not implemented!\" );\n\treturn null;\n\n};\n\n// Get point at relative position in curve according to arc length\n// - u [0 .. 1]\n\nTHREE.Curve.prototype.getPointAt = function ( u ) {\n\n\tvar t = this.getUtoTmapping( u );\n\treturn this.getPoint( t );\n\n};\n\n// Get sequence of points using getPoint( t )\n\nTHREE.Curve.prototype.getPoints = function ( divisions ) {\n\n\tif ( ! divisions ) divisions = 5;\n\n\tvar d, pts = [];\n\n\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\tpts.push( this.getPoint( d / divisions ) );\n\n\t}\n\n\treturn pts;\n\n};\n\n// Get sequence of points using getPointAt( u )\n\nTHREE.Curve.prototype.getSpacedPoints = function ( divisions ) {\n\n\tif ( ! divisions ) divisions = 5;\n\n\tvar d, pts = [];\n\n\tfor ( d = 0; d <= divisions; d ++ ) {\n\n\t\tpts.push( this.getPointAt( d / divisions ) );\n\n\t}\n\n\treturn pts;\n\n};\n\n// Get total curve arc length\n\nTHREE.Curve.prototype.getLength = function () {\n\n\tvar lengths = this.getLengths();\n\treturn lengths[ lengths.length - 1 ];\n\n};\n\n// Get list of cumulative segment lengths\n\nTHREE.Curve.prototype.getLengths = function ( divisions ) {\n\n\tif ( ! divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;\n\n\tif ( this.cacheArcLengths\n\t\t&& ( this.cacheArcLengths.length == divisions + 1 )\n\t\t&& ! this.needsUpdate) {\n\n\t\t//console.log( \"cached\", this.cacheArcLengths );\n\t\treturn this.cacheArcLengths;\n\n\t}\n\n\tthis.needsUpdate = false;\n\n\tvar cache = [];\n\tvar current, last = this.getPoint( 0 );\n\tvar p, sum = 0;\n\n\tcache.push( 0 );\n\n\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\tcurrent = this.getPoint ( p / divisions );\n\t\tsum += current.distanceTo( last );\n\t\tcache.push( sum );\n\t\tlast = current;\n\n\t}\n\n\tthis.cacheArcLengths = cache;\n\n\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\n\n};\n\n\nTHREE.Curve.prototype.updateArcLengths = function() {\n\tthis.needsUpdate = true;\n\tthis.getLengths();\n};\n\n// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\n\nTHREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {\n\n\tvar arcLengths = this.getLengths();\n\n\tvar i = 0, il = arcLengths.length;\n\n\tvar targetArcLength; // The targeted u distance value to get\n\n\tif ( distance ) {\n\n\t\ttargetArcLength = distance;\n\n\t} else {\n\n\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t}\n\n\t//var time = Date.now();\n\n\t// binary search for the index with largest value smaller than target u distance\n\n\tvar low = 0, high = il - 1, comparison;\n\n\twhile ( low <= high ) {\n\n\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\tif ( comparison < 0 ) {\n\n\t\t\tlow = i + 1;\n\t\t\tcontinue;\n\n\t\t} else if ( comparison > 0 ) {\n\n\t\t\thigh = i - 1;\n\t\t\tcontinue;\n\n\t\t} else {\n\n\t\t\thigh = i;\n\t\t\tbreak;\n\n\t\t\t// DONE\n\n\t\t}\n\n\t}\n\n\ti = high;\n\n\t//console.log('b' , i, low, high, Date.now()- time);\n\n\tif ( arcLengths[ i ] == targetArcLength ) {\n\n\t\tvar t = i / ( il - 1 );\n\t\treturn t;\n\n\t}\n\n\t// we could get finer grain at lengths, or use simple interpolatation between two points\n\n\tvar lengthBefore = arcLengths[ i ];\n    var lengthAfter = arcLengths[ i + 1 ];\n\n    var segmentLength = lengthAfter - lengthBefore;\n\n    // determine where we are between the 'before' and 'after' points\n\n    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n    // add that fractional amount to t\n\n    var t = ( i + segmentFraction ) / ( il -1 );\n\n\treturn t;\n\n};\n\n// Returns a unit vector tangent at t\n// In case any sub curve does not implement its tangent derivation,\n// 2 points a small delta apart will be used to find its gradient\n// which seems to give a reasonable approximation\n\nTHREE.Curve.prototype.getTangent = function( t ) {\n\n\tvar delta = 0.0001;\n\tvar t1 = t - delta;\n\tvar t2 = t + delta;\n\n\t// Capping in case of danger\n\n\tif ( t1 < 0 ) t1 = 0;\n\tif ( t2 > 1 ) t2 = 1;\n\n\tvar pt1 = this.getPoint( t1 );\n\tvar pt2 = this.getPoint( t2 );\n\n\tvar vec = pt2.clone().sub(pt1);\n\treturn vec.normalize();\n\n};\n\n\nTHREE.Curve.prototype.getTangentAt = function ( u ) {\n\n\tvar t = this.getUtoTmapping( u );\n\treturn this.getTangent( t );\n\n};\n\n\n\n\n\n/**************************************************************\n *\tUtils\n **************************************************************/\n\nTHREE.Curve.Utils = {\n\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\n\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\n\n\t},\n\n\t// Puay Bing, thanks for helping with this derivative!\n\n\ttangentCubicBezier: function (t, p0, p1, p2, p3 ) {\n\n\t\treturn - 3 * p0 * (1 - t) * (1 - t)  +\n\t\t\t3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +\n\t\t\t6 * t *  p2 * (1-t) - 3 * t * t * p2 +\n\t\t\t3 * t * t * p3;\n\n\t},\n\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\n\n\t\t// To check if my formulas are correct\n\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\n\n\t\treturn h00 + h10 + h01 + h11;\n\n\t},\n\n\t// Catmull-Rom\n\n\tinterpolate: function( p0, p1, p2, p3, t ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n};\n\n\n// TODO: Transformation for Curves?\n\n/**************************************************************\n *\t3D Curves\n **************************************************************/\n\n// A Factory method for creating new curve subclasses\n\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\n\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\n\tconstructor.prototype.getPoint = getPointFunc;\n\n\treturn constructor;\n\n};\n\n// File:src/extras/core/CurvePath.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nTHREE.CurvePath = function () {\n\n\tthis.curves = [];\n\tthis.bends = [];\n\t\n\tthis.autoClose = false; // Automatically closes the path\n};\n\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.CurvePath.prototype.add = function ( curve ) {\n\n\tthis.curves.push( curve );\n\n};\n\nTHREE.CurvePath.prototype.checkConnection = function() {\n\t// TODO\n\t// If the ending of curve is not connected to the starting\n\t// or the next curve, then, this is not a real path\n};\n\nTHREE.CurvePath.prototype.closePath = function() {\n\t// TODO Test\n\t// and verify for vector3 (needs to implement equals)\n\t// Add a line curve if start and end of lines are not connected\n\tvar startPoint = this.curves[0].getPoint(0);\n\tvar endPoint = this.curves[this.curves.length-1].getPoint(1);\n\t\n\tif (! startPoint.equals(endPoint)) {\n\t\tthis.curves.push( new THREE.LineCurve(endPoint, startPoint) );\n\t}\n\t\n};\n\n// To get accurate point with reference to\n// entire path distance at time t,\n// following has to be done:\n\n// 1. Length of each sub path have to be known\n// 2. Locate and identify type of curve\n// 3. Get t for the curve\n// 4. Return curve.getPointAt(t')\n\nTHREE.CurvePath.prototype.getPoint = function( t ) {\n\n\tvar d = t * this.getLength();\n\tvar curveLengths = this.getCurveLengths();\n\tvar i = 0, diff, curve;\n\n\t// To think about boundaries points.\n\n\twhile ( i < curveLengths.length ) {\n\n\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\tdiff = curveLengths[ i ] - d;\n\t\t\tcurve = this.curves[ i ];\n\n\t\t\tvar u = 1 - diff / curve.getLength();\n\n\t\t\treturn curve.getPointAt( u );\n\n\t\t\tbreak;\n\t\t}\n\n\t\ti ++;\n\n\t}\n\n\treturn null;\n\n\t// loop where sum != 0, sum > d , sum+1 <d\n\n};\n\n/*\nTHREE.CurvePath.prototype.getTangent = function( t ) {\n};*/\n\n\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n// getPoint() depends on getLength\n\nTHREE.CurvePath.prototype.getLength = function() {\n\n\tvar lens = this.getCurveLengths();\n\treturn lens[ lens.length - 1 ];\n\n};\n\n// Compute lengths and cache them\n// We cannot overwrite getLengths() because UtoT mapping uses it.\n\nTHREE.CurvePath.prototype.getCurveLengths = function() {\n\n\t// We use cache values if curves and cache array are same length\n\n\tif ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {\n\n\t\treturn this.cacheLengths;\n\n\t};\n\n\t// Get length of subsurve\n\t// Push sums into cached array\n\n\tvar lengths = [], sums = 0;\n\tvar i, il = this.curves.length;\n\n\tfor ( i = 0; i < il; i ++ ) {\n\n\t\tsums += this.curves[ i ].getLength();\n\t\tlengths.push( sums );\n\n\t}\n\n\tthis.cacheLengths = lengths;\n\n\treturn lengths;\n\n};\n\n\n\n// Returns min and max coordinates\n\nTHREE.CurvePath.prototype.getBoundingBox = function () {\n\n\tvar points = this.getPoints();\n\n\tvar maxX, maxY, maxZ;\n\tvar minX, minY, minZ;\n\n\tmaxX = maxY = Number.NEGATIVE_INFINITY;\n\tminX = minY = Number.POSITIVE_INFINITY;\n\n\tvar p, i, il, sum;\n\n\tvar v3 = points[0] instanceof THREE.Vector3;\n\n\tsum = v3 ? new THREE.Vector3() : new THREE.Vector2();\n\n\tfor ( i = 0, il = points.length; i < il; i ++ ) {\n\n\t\tp = points[ i ];\n\n\t\tif ( p.x > maxX ) maxX = p.x;\n\t\telse if ( p.x < minX ) minX = p.x;\n\n\t\tif ( p.y > maxY ) maxY = p.y;\n\t\telse if ( p.y < minY ) minY = p.y;\n\n\t\tif ( v3 ) {\n\n\t\t\tif ( p.z > maxZ ) maxZ = p.z;\n\t\t\telse if ( p.z < minZ ) minZ = p.z;\n\n\t\t}\n\n\t\tsum.add( p );\n\n\t}\n\n\tvar ret = {\n\n\t\tminX: minX,\n\t\tminY: minY,\n\t\tmaxX: maxX,\n\t\tmaxY: maxY\n\n\t};\n\n\tif ( v3 ) {\n\n\t\tret.maxZ = maxZ;\n\t\tret.minZ = minZ;\n\n\t}\n\n\treturn ret;\n\n};\n\n/**************************************************************\n *\tCreate Geometries Helpers\n **************************************************************/\n\n/// Generate geometry from path points (for Line or Points objects)\n\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\n\n\tvar pts = this.getPoints( divisions, true );\n\treturn this.createGeometry( pts );\n\n};\n\n// Generate geometry from equidistance sampling along the path\n\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\n\n\tvar pts = this.getSpacedPoints( divisions, true );\n\treturn this.createGeometry( pts );\n\n};\n\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < points.length; i ++ ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );\n\n\t}\n\n\treturn geometry;\n\n};\n\n\n/**************************************************************\n *\tBend / Wrap Helper Methods\n **************************************************************/\n\n// Wrap path / Bend modifiers?\n\nTHREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {\n\n\tthis.bends.push( bendpath );\n\n};\n\nTHREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {\n\n\tvar oldPts = this.getPoints( segments ); // getPoints getSpacedPoints\n\tvar i, il;\n\n\tif ( ! bends ) {\n\n\t\tbends = this.bends;\n\n\t}\n\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\n\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\n\n\t}\n\n\treturn oldPts;\n\n};\n\nTHREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {\n\n\tvar oldPts = this.getSpacedPoints( segments );\n\n\tvar i, il;\n\n\tif ( ! bends ) {\n\n\t\tbends = this.bends;\n\n\t}\n\n\tfor ( i = 0, il = bends.length; i < il; i ++ ) {\n\n\t\toldPts = this.getWrapPoints( oldPts, bends[ i ] );\n\n\t}\n\n\treturn oldPts;\n\n};\n\n// This returns getPoints() bend/wrapped around the contour of a path.\n// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html\n\nTHREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {\n\n\tvar bounds = this.getBoundingBox();\n\n\tvar i, il, p, oldX, oldY, xNorm;\n\n\tfor ( i = 0, il = oldPts.length; i < il; i ++ ) {\n\n\t\tp = oldPts[ i ];\n\n\t\toldX = p.x;\n\t\toldY = p.y;\n\n\t\txNorm = oldX / bounds.maxX;\n\n\t\t// If using actual distance, for length > path, requires line extrusions\n\t\t//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance\n\n\t\txNorm = path.getUtoTmapping( xNorm, oldX );\n\n\t\t// check for out of bounds?\n\n\t\tvar pathPt = path.getPoint( xNorm );\n\t\tvar normal = path.getTangent( xNorm );\n\t\tnormal.set( - normal.y, normal.x ).multiplyScalar( oldY );\n\n\t\tp.x = pathPt.x + normal.x;\n\t\tp.y = pathPt.y + normal.y;\n\n\t}\n\n\treturn oldPts;\n\n};\n\n\n// File:src/extras/core/Gyroscope.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Gyroscope = function () {\n\n\tTHREE.Object3D.call( this );\n\n};\n\nTHREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.Gyroscope.prototype.updateMatrixWorld = ( function () {\n\n\tvar translationObject = new THREE.Vector3();\n\tvar quaternionObject = new THREE.Quaternion();\n\tvar scaleObject = new THREE.Vector3();\n\n\tvar translationWorld = new THREE.Vector3();\n\tvar quaternionWorld = new THREE.Quaternion();\n\tvar scaleWorld = new THREE.Vector3();\n\n\treturn function ( force ) {\n\n\t\tthis.matrixAutoUpdate && this.updateMatrix();\n\n\t\t// update matrixWorld\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent ) {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\tthis.matrixWorld.decompose( translationWorld, quaternionWorld, scaleWorld );\n\t\t\t\tthis.matrix.decompose( translationObject, quaternionObject, scaleObject );\n\n\t\t\t\tthis.matrixWorld.compose( translationWorld, quaternionObject, scaleWorld );\n\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t}\n\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t};\n\t\n}() );\n\n// File:src/extras/core/Path.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n *\n **/\n\nTHREE.Path = function ( points ) {\n\n\tTHREE.CurvePath.call(this);\n\n\tthis.actions = [];\n\n\tif ( points ) {\n\n\t\tthis.fromPoints( points );\n\n\t}\n\n};\n\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\n\nTHREE.PathActions = {\n\n\tMOVE_TO: 'moveTo',\n\tLINE_TO: 'lineTo',\n\tQUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve\n\tBEZIER_CURVE_TO: 'bezierCurveTo', \t\t// Bezier cubic curve\n\tCSPLINE_THRU: 'splineThru',\t\t\t\t// Catmull-rom spline\n\tARC: 'arc',\t\t\t\t\t\t\t\t// Circle\n\tELLIPSE: 'ellipse'\n};\n\n// TODO Clean up PATH API\n\n// Create path using straight lines to connect all points\n// - vectors: array of Vector2\n\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\n\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\n\n\tfor ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {\n\n\t\tthis.lineTo( vectors[ v ].x, vectors[ v ].y );\n\n\t};\n\n};\n\n// startPath() endPath()?\n\nTHREE.Path.prototype.moveTo = function ( x, y ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\tthis.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.lineTo = function ( x, y ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCPx, aCPy ),\n\t\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,\n\t\t\t\t\t\t\t\t\t\t\t   aCP2x, aCP2y,\n\t\t\t\t\t\t\t\t\t\t\t   aX, aY ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tvar curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\n\t\t\t\t\t\t\t\t\t\t\tnew THREE.Vector2( aX, aY ) );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );\n\n};\n\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\n\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n//---\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\n\tArray.prototype.push.apply( npts, pts );\n\n\tvar curve = new THREE.SplineCurve( npts );\n\tthis.curves.push( curve );\n\n\tthis.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );\n\n};\n\n// FUTURE: Change the API or follow canvas API?\n\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius,\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tthis.absarc(aX + x0, aY + y0, aRadius,\n\t\taStartAngle, aEndAngle, aClockwise );\n\n };\n\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius,\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\n\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n };\n\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\n\n\tvar lastargs = this.actions[ this.actions.length - 1].args;\n\tvar x0 = lastargs[ lastargs.length - 2 ];\n\tvar y0 = lastargs[ lastargs.length - 1 ];\n\n\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius,\n\t\taStartAngle, aEndAngle, aClockwise );\n\n };\n\n\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,\n\t\t\t\t\t\t\t\t\t  aStartAngle, aEndAngle, aClockwise ) {\n\n\tvar args = Array.prototype.slice.call( arguments );\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,\n\t\t\t\t\t\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\tthis.curves.push( curve );\n\n\tvar lastPoint = curve.getPoint(1);\n\targs.push(lastPoint.x);\n\targs.push(lastPoint.y);\n\n\tthis.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );\n\n };\n\nTHREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {\n\n\tif ( ! divisions ) divisions = 40;\n\n\tvar points = [];\n\n\tfor ( var i = 0; i < divisions; i ++ ) {\n\n\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t//if( !this.getPoint( i / divisions ) ) throw \"DIE\";\n\n\t}\n\n\t// if ( closedPath ) {\n\t//\n\t// \tpoints.push( points[ 0 ] );\n\t//\n\t// }\n\n\treturn points;\n\n};\n\n/* Return an array of vectors based on contour of the path */\n\nTHREE.Path.prototype.getPoints = function( divisions, closedPath ) {\n\n\tif (this.useSpacedPoints) {\n\t\tconsole.log('tata');\n\t\treturn this.getSpacedPoints( divisions, closedPath );\n\t}\n\n\tdivisions = divisions || 12;\n\n\tvar points = [];\n\n\tvar i, il, item, action, args;\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\n\t\tlaste, j,\n\t\tt, tx, ty;\n\n\tfor ( i = 0, il = this.actions.length; i < il; i ++ ) {\n\n\t\titem = this.actions[ i ];\n\n\t\taction = item.action;\n\t\targs = item.args;\n\n\t\tswitch( action ) {\n\n\t\tcase THREE.PathActions.MOVE_TO:\n\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\tbreak;\n\n\t\tcase THREE.PathActions.LINE_TO:\n\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\n\n\t\t\tbreak;\n\n\t\tcase THREE.PathActions.QUADRATIC_CURVE_TO:\n\n\t\t\tcpx  = args[ 2 ];\n\t\t\tcpy  = args[ 3 ];\n\n\t\t\tcpx1 = args[ 0 ];\n\t\t\tcpy1 = args[ 1 ];\n\n\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\tcpx0 = laste.x;\n\t\t\t\tcpy0 = laste.y;\n\n\t\t\t} else {\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t}\n\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\tt = j / divisions;\n\n\t\t\t\ttx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );\n\t\t\t\tty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase THREE.PathActions.BEZIER_CURVE_TO:\n\n\t\t\tcpx  = args[ 4 ];\n\t\t\tcpy  = args[ 5 ];\n\n\t\t\tcpx1 = args[ 0 ];\n\t\t\tcpy1 = args[ 1 ];\n\n\t\t\tcpx2 = args[ 2 ];\n\t\t\tcpy2 = args[ 3 ];\n\n\t\t\tif ( points.length > 0 ) {\n\n\t\t\t\tlaste = points[ points.length - 1 ];\n\n\t\t\t\tcpx0 = laste.x;\n\t\t\t\tcpy0 = laste.y;\n\n\t\t\t} else {\n\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\n\n\t\t\t}\n\n\n\t\t\tfor ( j = 1; j <= divisions; j ++ ) {\n\n\t\t\t\tt = j / divisions;\n\n\t\t\t\ttx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );\n\t\t\t\tty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase THREE.PathActions.CSPLINE_THRU:\n\n\t\t\tlaste = this.actions[ i - 1 ].args;\n\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\n\t\t\tvar spts = [ last ];\n\n\t\t\tvar n = divisions * args[ 0 ].length;\n\n\t\t\tspts = spts.concat( args[ 0 ] );\n\n\t\t\tvar spline = new THREE.SplineCurve( spts );\n\n\t\t\tfor ( j = 1; j <= n; j ++ ) {\n\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) ) ;\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase THREE.PathActions.ARC:\n\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\taRadius = args[ 2 ],\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\n\t\t\t\taClockwise = !! args[ 5 ];\n\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\tvar angle;\n\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\tt = j / tdivisions;\n\n\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t}\n\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\n\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\t//console.log(points);\n\n\t\t  break;\n\t\t  \n\t\tcase THREE.PathActions.ELLIPSE:\n\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\n\t\t\t\txRadius = args[ 2 ],\n\t\t\t\tyRadius = args[ 3 ],\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\n\t\t\t\taClockwise = !! args[ 6 ];\n\n\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\n\t\t\tvar angle;\n\t\t\tvar tdivisions = divisions * 2;\n\n\t\t\tfor ( j = 1; j <= tdivisions; j ++ ) {\n\n\t\t\t\tt = j / tdivisions;\n\n\t\t\t\tif ( ! aClockwise ) {\n\n\t\t\t\t\tt = 1 - t;\n\n\t\t\t\t}\n\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\n\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\n\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\n\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\n\n\t\t\t}\n\n\t\t\t//console.log(points);\n\n\t\t  break;\n\n\t\t} // end switch\n\n\t}\n\n\n\n\t// Normalize to remove the closing point by default.\n\tvar lastPoint = points[ points.length - 1];\n\tvar EPSILON = 0.0000000001;\n\tif ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&\n\t\t\t Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)\n\t\tpoints.splice( points.length - 1, 1);\n\tif ( closedPath ) {\n\n\t\tpoints.push( points[ 0 ] );\n\n\t}\n\n\treturn points;\n\n};\n\n//\n// Breaks path into shapes\n//\n//\tAssumptions (if parameter isCCW==true the opposite holds):\n//\t- solid shapes are defined clockwise (CW)\n//\t- holes are defined counterclockwise (CCW)\n//\n//\tIf parameter noHoles==true:\n//  - all subPaths are regarded as solid shapes\n//  - definition order CW/CCW has no relevance\n//\n\nTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\n\n\tfunction extractSubpaths( inActions ) {\n\n\t\tvar i, il, item, action, args;\n\n\t\tvar subPaths = [], lastPath = new THREE.Path();\n\n\t\tfor ( i = 0, il = inActions.length; i < il; i ++ ) {\n\n\t\t\titem = inActions[ i ];\n\n\t\t\targs = item.args;\n\t\t\taction = item.action;\n\n\t\t\tif ( action == THREE.PathActions.MOVE_TO ) {\n\n\t\t\t\tif ( lastPath.actions.length != 0 ) {\n\n\t\t\t\t\tsubPaths.push( lastPath );\n\t\t\t\t\tlastPath = new THREE.Path();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlastPath[ action ].apply( lastPath, args );\n\n\t\t}\n\n\t\tif ( lastPath.actions.length != 0 ) {\n\n\t\t\tsubPaths.push( lastPath );\n\n\t\t}\n\n\t\t// console.log(subPaths);\n\n\t\treturn\tsubPaths;\n\t}\n\n\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\tvar shapes = [];\n\n\t\tfor ( var i = 0, il = inSubpaths.length; i < il; i ++ ) {\n\n\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\tvar tmpShape = new THREE.Shape();\n\t\t\ttmpShape.actions = tmpPath.actions;\n\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\tshapes.push( tmpShape );\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\t};\n\n\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\t\tvar EPSILON = 0.0000000001;\n\n\t\tvar polyLen = inPolygon.length;\n\n\t\t// inPt on polygon contour => immediate success    or\n\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t//  with the horizontal line through inPt, left of inPt\n\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\tvar inside = false;\n\t\tfor( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\t\t\tvar edgeLowPt  = inPolygon[ p ];\n\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\tif ( Math.abs(edgeDy) > EPSILON ) {\t\t\t// not parallel\n\t\t\t\tif ( edgeDy < 0 ) {\n\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\t\t\t\t}\n\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\tif ( inPt.y == edgeLowPt.y ) {\n\t\t\t\t\tif ( inPt.x == edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t} else {\n\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\tif ( perpEdge == 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\t\t\t\t}\n\t\t\t} else {\t\t// parallel or colinear\n\t\t\t\tif ( inPt.y != edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t// egde lies on the same horizontal line as inPt\n\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t// continue;\n\t\t\t}\n\t\t}\n\n\t\treturn\tinside;\n\t}\n\n\n\tvar subPaths = extractSubpaths( this.actions );\n\tif ( subPaths.length == 0 ) return [];\n\n\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\tif ( subPaths.length == 1) {\n\n\t\ttmpPath = subPaths[0];\n\t\ttmpShape = new THREE.Shape();\n\t\ttmpShape.actions = tmpPath.actions;\n\t\ttmpShape.curves = tmpPath.curves;\n\t\tshapes.push( tmpShape );\n\t\treturn shapes;\n\n\t}\n\n\tvar holesFirst = ! THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );\n\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t// console.log(\"Holes first\", holesFirst);\n\t\n\tvar betterShapeHoles = [];\n\tvar newShapes = [];\n\tvar newShapeHoles = [];\n\tvar mainIdx = 0;\n\tvar tmpPoints;\n\n\tnewShapes[mainIdx] = undefined;\n\tnewShapeHoles[mainIdx] = [];\n\n\tvar i, il;\n\n\tfor ( i = 0, il = subPaths.length; i < il; i ++ ) {\n\n\t\ttmpPath = subPaths[ i ];\n\t\ttmpPoints = tmpPath.getPoints();\n\t\tsolid = THREE.Shape.Utils.isClockWise( tmpPoints );\n\t\tsolid = isCCW ? ! solid : solid;\n\n\t\tif ( solid ) {\n\n\t\t\tif ( (! holesFirst ) && ( newShapes[mainIdx] ) )\tmainIdx ++;\n\n\t\t\tnewShapes[mainIdx] = { s: new THREE.Shape(), p: tmpPoints };\n\t\t\tnewShapes[mainIdx].s.actions = tmpPath.actions;\n\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\n\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\t//console.log('cw', i);\n\n\t\t} else {\n\n\t\t\tnewShapeHoles[mainIdx].push( { h: tmpPath, p: tmpPoints[0] } );\n\n\t\t\t//console.log('ccw', i);\n\n\t\t}\n\n\t}\n\n\t// only Holes? -> probably all Shapes with wrong orientation\n\tif ( ! newShapes[0] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\tif ( newShapes.length > 1 ) {\n\t\tvar ambigious = false;\n\t\tvar toChange = [];\n\n\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t}\n\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\t\t\tvar sh = newShapes[sIdx];\n\t\t\tvar sho = newShapeHoles[sIdx];\n\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\tvar hole_unassigned = true;\n\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[s2Idx].p ) ) {\n\t\t\t\t\t\tif ( sIdx != s2Idx )\t\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push( ho );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tambigious = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( hole_unassigned ) { betterShapeHoles[sIdx].push( ho ); }\n\t\t\t}\n\t\t}\n\t\t// console.log(\"ambigious: \", ambigious);\n\t\tif ( toChange.length > 0 ) {\n\t\t\t// console.log(\"to change: \", toChange);\n\t\t\tif (! ambigious)\tnewShapeHoles = betterShapeHoles;\n\t\t}\n\t}\n\n\tvar tmpHoles, j, jl;\n\tfor ( i = 0, il = newShapes.length; i < il; i ++ ) {\n\t\ttmpShape = newShapes[i].s;\n\t\tshapes.push( tmpShape );\n\t\ttmpHoles = newShapeHoles[i];\n\t\tfor ( j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\t\t\ttmpShape.holes.push( tmpHoles[j].h );\n\t\t}\n\t}\n\n\t//console.log(\"shape\", shapes);\n\n\treturn shapes;\n\n};\n\n// File:src/extras/core/Shape.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\n\nTHREE.Shape = function () {\n\n\tTHREE.Path.apply( this, arguments );\n\tthis.holes = [];\n\n};\n\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\n\n// Convenience method to return ExtrudeGeometry\n\nTHREE.Shape.prototype.extrude = function ( options ) {\n\n\tvar extruded = new THREE.ExtrudeGeometry( this, options );\n\treturn extruded;\n\n};\n\n// Convenience method to return ShapeGeometry\n\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\n\n\tvar geometry = new THREE.ShapeGeometry( this, options );\n\treturn geometry;\n\n};\n\n// Get points of holes\n\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\n\n\tvar i, il = this.holes.length, holesPts = [];\n\n\tfor ( i = 0; i < il; i ++ ) {\n\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );\n\n\t}\n\n\treturn holesPts;\n\n};\n\n// Get points of holes (spaced by regular distance)\n\nTHREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {\n\n\tvar i, il = this.holes.length, holesPts = [];\n\n\tfor ( i = 0; i < il; i ++ ) {\n\n\t\tholesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );\n\n\t}\n\n\treturn holesPts;\n\n};\n\n\n// Get points of shape and holes (keypoints based on segments parameter)\n\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\n\n\treturn {\n\n\t\tshape: this.getTransformedPoints( divisions ),\n\t\tholes: this.getPointsHoles( divisions )\n\n\t};\n\n};\n\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\n\n\tif (this.useSpacedPoints) {\n\t\treturn this.extractAllSpacedPoints(divisions);\n\t}\n\n\treturn this.extractAllPoints(divisions);\n\n};\n\n//\n// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {\n//\n// \treturn {\n//\n// \t\tshape: this.transform( bend, divisions ),\n// \t\tholes: this.getPointsHoles( divisions, bend )\n//\n// \t};\n//\n// };\n\n// Get points of shape and holes (spaced by regular distance)\n\nTHREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {\n\n\treturn {\n\n\t\tshape: this.getTransformedSpacedPoints( divisions ),\n\t\tholes: this.getSpacedPointsHoles( divisions )\n\n\t};\n\n};\n\n/**************************************************************\n *\tUtils\n **************************************************************/\n\nTHREE.Shape.Utils = {\n\n\ttriangulateShape: function ( contour, holes ) {\n\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\n\t\t\t// inOtherPt needs to be colinear to the inSegment\n\t\t\tif ( inSegPt1.x != inSegPt2.x ) {\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\n\t\t\t\t} else {\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\n\t\t\t\t} else {\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\n\t\t\tvar EPSILON = 0.0000000001;\n\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n\t\t\tif ( Math.abs(limit) > EPSILON ) {\t\t\t// not parallel\n\n\t\t\t\tvar perpSeg2;\n\t\t\t\tif ( limit > 0 ) {\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\n\t\t\t\t} else {\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\n\t\t\t\t}\n\n\t\t\t\t// i.e. to reduce rounding errors\n\t\t\t\t// intersection at endpoint of segment#1?\n\t\t\t\tif ( perpSeg2 == 0 ) {\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )\t\treturn [];\n\t\t\t\t\treturn  [ inSeg1Pt1 ];\n\t\t\t\t}\n\t\t\t\tif ( perpSeg2 == limit ) {\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\n\t\t\t\t\t\t ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )\t\treturn [];\n\t\t\t\t\treturn  [ inSeg1Pt2 ];\n\t\t\t\t}\n\t\t\t\t// intersection at endpoint of segment#2?\n\t\t\t\tif ( perpSeg1 == 0 )\t\treturn  [ inSeg2Pt1 ];\n\t\t\t\tif ( perpSeg1 == limit )\treturn  [ inSeg2Pt2 ];\n\n\t\t\t\t// return real intersection point\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\n\n\t\t\t} else {\t\t// parallel or colinear\n\t\t\t\tif ( ( perpSeg1 != 0 ) ||\n\t\t\t\t\t ( seg2dy * seg1seg2dx != seg2dx * seg1seg2dy ) ) \t\t\treturn [];\n\n\t\t\t\t// they are collinear or degenerate\n\t\t\t\tvar seg1Pt = ( (seg1dx == 0) && (seg1dy == 0) );\t// segment1 ist just a point?\n\t\t\t\tvar seg2Pt = ( (seg2dx == 0) && (seg2dy == 0) );\t// segment2 ist just a point?\n\t\t\t\t// both segments are points\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\n\t\t\t\t\tif ( (inSeg1Pt1.x != inSeg2Pt1.x) ||\n\t\t\t\t\t\t (inSeg1Pt1.y != inSeg2Pt1.y) )\t\treturn [];   \t// they are distinct  points\n\t\t\t\t\treturn  [ inSeg1Pt1 ];                 \t\t\t\t\t// they are the same point\n\t\t\t\t}\n\t\t\t\t// segment#1  is a single point\n\t\t\t\tif ( seg1Pt ) {\n\t\t\t\t\tif (! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\n\t\t\t\t\treturn  [ inSeg1Pt1 ];\n\t\t\t\t}\n\t\t\t\t// segment#2  is a single point\n\t\t\t\tif ( seg2Pt ) {\n\t\t\t\t\tif (! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\n\t\t\t\t\treturn  [ inSeg2Pt1 ];\n\t\t\t\t}\n\n\t\t\t\t// they are collinear segments, which might overlap\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\n\t\t\t\tif (seg1dx != 0) {\t\t// the segments are NOT on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\n\t\t\t\t\t}\n\t\t\t\t} else {\t\t\t\t// the segments are on a vertical line\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\n\t\t\t\t\t}\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\n\t\t\t\t\tif ( seg1maxVal == seg2minVal )\t{\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg2min ];\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\n\t\t\t\t} else {\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\n\t\t\t\t\tif ( seg1minVal == seg2maxVal )\t{\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\n\t\t\t\t\t\treturn [ seg1min ];\n\t\t\t\t\t}\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\n\t\t\t// The order of legs is important\n\n\t\t\tvar EPSILON = 0.0000000001;\n\n\t\t\t// translation of all points, so that Vertex is at (0,0)\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\n\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n\t\t\tif ( Math.abs(from2toAngle) > EPSILON ) {\t\t\t// angle != 180 deg.\n\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n\t\t\t\tif ( from2toAngle > 0 ) {\t\t\t\t// main angle < 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\n\t\t\t\t} else {\t\t\t\t\t\t\t\t// main angle > 180 deg.\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\n\t\t\t\t}\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t// angle == 180 deg.\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n\t\t\t\treturn\t( from2otherAngle > 0 );\n\t\t\t}\n\t\t}\n\n\n\t\tfunction removeHoles( contour, holes ) {\n\n\t\t\tvar shape = contour.concat(); // work on this shape\n\t\t\tvar hole;\n\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\n\t\t\t\t// Check if hole point lies within angle around shape point\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\n\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\n\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\n\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[inShapeIdx], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[inHoleIdx] );\n\t\t\t\tif (! insideAngle ) {\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n\t\t\t\t\treturn\tfalse;\n\t\t\t\t}\n\n\t\t\t\t// Check if shape point lies within angle around hole point\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\n\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\n\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\n\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[inHoleIdx], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[inShapeIdx] );\n\t\t\t\tif (! insideAngle ) {\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n\t\t\t\t\treturn\tfalse;\n\t\t\t\t}\n\n\t\t\t\treturn\ttrue;\n\t\t\t}\n\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\n\t\t\t\t// checks for intersections with shape edges\n\t\t\t\tvar sIdx, nextIdx, intersection;\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\n\t\t\t\t\tnextIdx = sIdx+1; nextIdx %= shape.length;\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true );\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\t\t\t}\n\n\t\t\t\treturn\tfalse;\n\t\t\t}\n\n\t\t\tvar indepHoles = [];\n\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\n\t\t\t\t// checks for intersections with hole edges\n\t\t\t\tvar ihIdx, chkHole,\n\t\t\t\t\thIdx, nextIdx, intersection;\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\n\t\t\t\t\tchkHole = holes[indepHoles[ihIdx]];\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\n\t\t\t\t\t\tnextIdx = hIdx+1; nextIdx %= chkHole.length;\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true );\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn\tfalse;\n\t\t\t}\n\n\t\t\tvar holeIndex, shapeIndex,\n\t\t\t\tshapePt, holePt,\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\n\t\t\t\ttmpShape1, tmpShape2,\n\t\t\t\ttmpHole1, tmpHole2;\n\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tindepHoles.push( h );\n\n\t\t\t}\n\n\t\t\tvar minShapeIndex = 0;\n\t\t\tvar counter = indepHoles.length * 2;\n\t\t\twhile ( indepHoles.length > 0 ) {\n\t\t\t\tcounter --;\n\t\t\t\tif ( counter < 0 ) {\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// search for shape-vertex and hole-vertex,\n\t\t\t\t// which can be connected without intersections\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\n\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\n\t\t\t\t\tholeIndex\t= - 1;\n\n\t\t\t\t\t// search for hole which can be reached without intersections\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\n\t\t\t\t\t\tholeIdx = indepHoles[h];\n\n\t\t\t\t\t\t// prevent multiple checks\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n\t\t\t\t\t\tif ( failedCuts[cutKey] !== undefined )\t\t\tcontinue;\n\n\t\t\t\t\t\thole = holes[holeIdx];\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\n\t\t\t\t\t\t\tif (! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\n\n\t\t\t\t\t\t\tholeIndex = h2;\n\t\t\t\t\t\t\tindepHoles.splice(h,1);\n\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex+1 );\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex+1 );\n\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\n\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\n\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\n\t\t\t\t\t\tfailedCuts[cutKey] = true;\t\t\t// remember failure\n\t\t\t\t\t}\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shape; \t\t\t/* shape with no holes */\n\t\t}\n\n\n\t\tvar i, il, f, face,\n\t\t\tkey, index,\n\t\t\tallPointsMap = {};\n\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n\t\tvar allpoints = contour.concat();\n\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tArray.prototype.push.apply( allpoints, holes[h] );\n\n\t\t}\n\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\n\n\t\t// prepare all points map\n\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\n\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\n\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\n\n\t\t\t\tconsole.log( \"Duplicate point\", key );\n\n\t\t\t}\n\n\t\t\tallPointsMap[ key ] = i;\n\n\t\t}\n\n\t\t// remove holes by cutting paths to holes and adding them to the shape\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\n\n\t\tvar triangles = THREE.FontUtils.Triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\n\t\t//console.log( \"triangles\",triangles, triangles.length );\n\n\t\t// check all face vertices against all points map\n\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\n\n\t\t\tface = triangles[ i ];\n\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\n\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\n\n\t\t\t\tindex = allPointsMap[ key ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tface[ f ] = index;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangles.concat();\n\n\t},\n\n\tisClockWise: function ( pts ) {\n\n\t\treturn THREE.FontUtils.Triangulate.area( pts ) < 0;\n\n\t},\n\n\t// Bezier Curves formulas obtained from\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n\t// Quad Bezier Functions\n\n\tb2p0: function ( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t},\n\n\tb2p1: function ( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t},\n\n\tb2p2: function ( t, p ) {\n\n\t\treturn t * t * p;\n\n\t},\n\n\tb2: function ( t, p0, p1, p2 ) {\n\n\t\treturn this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );\n\n\t},\n\n\t// Cubic Bezier Functions\n\n\tb3p0: function ( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t},\n\n\tb3p1: function ( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t},\n\n\tb3p2: function ( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * t * t * p;\n\n\t},\n\n\tb3p3: function ( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t},\n\n\tb3: function ( t, p0, p1, p2, p3 ) {\n\n\t\treturn this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );\n\n\t}\n\n};\n\n\n// File:src/extras/curves/LineCurve.js\n\n/**************************************************************\n *\tLine\n **************************************************************/\n\nTHREE.LineCurve = function ( v1, v2 ) {\n\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\n\n\tvar point = this.v2.clone().sub(this.v1);\n\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\treturn point;\n\n};\n\n// Line curve is linear, so we can overwrite default getPointAt\n\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\n\n\treturn this.getPoint( u );\n\n};\n\nTHREE.LineCurve.prototype.getTangent = function( t ) {\n\n\tvar tangent = this.v2.clone().sub(this.v1);\n\n\treturn tangent.normalize();\n\n};\n\n// File:src/extras/curves/QuadraticBezierCurve.js\n\n/**************************************************************\n *\tQuadratic Bezier curve\n **************************************************************/\n\n\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\n};\n\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\n\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar vector = new THREE.Vector2();\n\n\tvector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\n\tvector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\n\n\treturn vector;\n\n};\n\n\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar vector = new THREE.Vector2();\n\n\tvector.x = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );\n\tvector.y = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );\n\n\t// returns unit vector\n\n\treturn vector.normalize();\n\n};\n\n// File:src/extras/curves/CubicBezierCurve.js\n\n/**************************************************************\n *\tCubic Bezier curve\n **************************************************************/\n\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\n\n\tthis.v0 = v0;\n\tthis.v1 = v1;\n\tthis.v2 = v2;\n\tthis.v3 = v3;\n\n};\n\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\n\n\tvar tx, ty;\n\n\ttx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n\tty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n\n\treturn new THREE.Vector2( tx, ty );\n\n};\n\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\n\n\tvar tx, ty;\n\n\ttx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n\tty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n\n\tvar tangent = new THREE.Vector2( tx, ty );\n\ttangent.normalize();\n\n\treturn tangent;\n\n};\n\n// File:src/extras/curves/SplineCurve.js\n\n/**************************************************************\n *\tSpline curve\n **************************************************************/\n\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\n\n\tthis.points = ( points == undefined ) ? [] : points;\n\n};\n\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\n\n\tvar points = this.points;\n\tvar point = ( points.length - 1 ) * t;\n\n\tvar intPoint = Math.floor( point );\n\tvar weight = point - intPoint;\n\n\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ]\n\tvar point1 = points[ intPoint ]\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length -1 : intPoint + 1 ]\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length -1 : intPoint + 2 ]\n\n\tvar vector = new THREE.Vector2();\n\n\tvector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );\n\tvector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );\n\n\treturn vector;\n\n};\n\n// File:src/extras/curves/EllipseCurve.js\n\n/**************************************************************\n *\tEllipse curve\n **************************************************************/\n\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tthis.aX = aX;\n\tthis.aY = aY;\n\n\tthis.xRadius = xRadius;\n\tthis.yRadius = yRadius;\n\n\tthis.aStartAngle = aStartAngle;\n\tthis.aEndAngle = aEndAngle;\n\n\tthis.aClockwise = aClockwise;\n\n};\n\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\n\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\n\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\n\n\tvar angle;\n\n\tif ( this.aClockwise === true ) {\n\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\n\n\t} else {\n\n\t\tangle = this.aStartAngle + t * deltaAngle;\n\n\t}\n\t\n\tvar vector = new THREE.Vector2();\n\n\tvector.x = this.aX + this.xRadius * Math.cos( angle );\n\tvector.y = this.aY + this.yRadius * Math.sin( angle );\n\n\treturn vector;\n\n};\n\n// File:src/extras/curves/ArcCurve.js\n\n/**************************************************************\n *\tArc curve\n **************************************************************/\n\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n};\n\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\n\n// File:src/extras/curves/LineCurve3.js\n\n/**************************************************************\n *\tLine3D\n **************************************************************/\n\nTHREE.LineCurve3 = THREE.Curve.create(\n\n\tfunction ( v1, v2 ) {\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\n\t\tvector.multiplyScalar( t );\n\t\tvector.add( this.v1 );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/QuadraticBezierCurve3.js\n\n/**************************************************************\n *\tQuadratic Bezier 3D curve\n **************************************************************/\n\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );\n\t\tvector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );\n\t\tvector.z = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/CubicBezierCurve3.js\n\n/**************************************************************\n *\tCubic Bezier 3D curve\n **************************************************************/\n\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\n\n\tfunction ( v0, v1, v2, v3 ) {\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.x = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );\n\t\tvector.y = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );\n\t\tvector.z = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/SplineCurve3.js\n\n/**************************************************************\n *\tSpline 3D curve\n **************************************************************/\n\n\nTHREE.SplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */) {\n\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\n\t\tvar point1 = points[ intPoint ];\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );\n\t\tvector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );\n\t\tvector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/curves/ClosedSplineCurve3.js\n\n/**************************************************************\n *\tClosed Spline 3D curve\n **************************************************************/\n\n\nTHREE.ClosedSplineCurve3 = THREE.Curve.create(\n\n\tfunction ( points /* array of Vector3 */) {\n\n\t\tthis.points = ( points == undefined ) ? [] : points;\n\n\t},\n\n\tfunction ( t ) {\n\n\t\tvar points = this.points;\n\t\tvar point = ( points.length - 0 ) * t; // This needs to be from 0-length +1\n\n\t\tvar intPoint = Math.floor( point );\n\t\tvar weight = point - intPoint;\n\n\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\n\n\t\tvar point0 = points[ ( intPoint - 1 ) % points.length ];\n\t\tvar point1 = points[ ( intPoint     ) % points.length ];\n\t\tvar point2 = points[ ( intPoint + 1 ) % points.length ];\n\t\tvar point3 = points[ ( intPoint + 2 ) % points.length ];\n\n\t\tvar vector = new THREE.Vector3();\n\n\t\tvector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );\n\t\tvector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );\n\t\tvector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );\n\n\t\treturn vector;\n\n\t}\n\n);\n\n// File:src/extras/animation/AnimationHandler.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n */\n\nTHREE.AnimationHandler = {\n\n\tLINEAR: 0,\n\tCATMULLROM: 1,\n\tCATMULLROM_FORWARD: 2,\n\n\t//\n\n\tadd: function () { console.warn( 'THREE.AnimationHandler.add() has been deprecated.' ); },\n\tget: function () { console.warn( 'THREE.AnimationHandler.get() has been deprecated.' ); },\n\tremove: function () { console.warn( 'THREE.AnimationHandler.remove() has been deprecated.' ); },\n\n\t//\n\n\tanimations: [],\n\n\tinit: function ( data ) {\n\n\t\tif ( data.initialized === true ) return;\n\n\t\t// loop through all keys\n\n\t\tfor ( var h = 0; h < data.hierarchy.length; h ++ ) {\n\n\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n\t\t\t\t// remove minus times\n\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].time < 0 ) {\n\n\t\t\t\t\t data.hierarchy[ h ].keys[ k ].time = 0;\n\n\t\t\t\t}\n\n\t\t\t\t// create quaternions\n\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].rot !== undefined &&\n\t\t\t\t  ! ( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {\n\n\t\t\t\t\tvar quat = data.hierarchy[ h ].keys[ k ].rot;\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion().fromArray( quat );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// prepare morph target keys\n\n\t\t\tif ( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {\n\n\t\t\t\t// get all used\n\n\t\t\t\tvar usedMorphTargets = {};\n\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\tvar morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];\n\t\t\t\t\t\tusedMorphTargets[ morphTargetName ] = - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tdata.hierarchy[ h ].usedMorphTargets = usedMorphTargets;\n\n\n\t\t\t\t// set all used on all frames\n\n\t\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n\t\t\t\t\tvar influences = {};\n\n\t\t\t\t\tfor ( var morphTargetName in usedMorphTargets ) {\n\n\t\t\t\t\t\tfor ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {\n\n\t\t\t\t\t\t\t\tinfluences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {\n\n\t\t\t\t\t\t\tinfluences[ morphTargetName ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// remove all keys that are on the same time\n\n\t\t\tfor ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n\t\t\t\tif ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {\n\n\t\t\t\t\tdata.hierarchy[ h ].keys.splice( k, 1 );\n\t\t\t\t\tk --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// set index\n\n\t\t\tfor ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {\n\n\t\t\t\tdata.hierarchy[ h ].keys[ k ].index = k;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdata.initialized = true;\n\n\t\treturn data;\n\n\t},\n\n\tparse: function ( root ) {\n\n\t\tvar parseRecurseHierarchy = function ( root, hierarchy ) {\n\n\t\t\thierarchy.push( root );\n\n\t\t\tfor ( var c = 0; c < root.children.length; c ++ )\n\t\t\t\tparseRecurseHierarchy( root.children[ c ], hierarchy );\n\n\t\t};\n\n\t\t// setup hierarchy\n\n\t\tvar hierarchy = [];\n\n\t\tif ( root instanceof THREE.SkinnedMesh ) {\n\n\t\t\tfor ( var b = 0; b < root.skeleton.bones.length; b ++ ) {\n\n\t\t\t\thierarchy.push( root.skeleton.bones[ b ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparseRecurseHierarchy( root, hierarchy );\n\n\t\t}\n\n\t\treturn hierarchy;\n\n\t},\n\n\tplay: function ( animation ) {\n\n\t\tif ( this.animations.indexOf( animation ) === - 1 ) {\n\n\t\t\tthis.animations.push( animation );\n\n\t\t}\n\n\t},\n\n\tstop: function ( animation ) {\n\n\t\tvar index = this.animations.indexOf( animation );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.animations.splice( index, 1 );\n\n\t\t}\n\n\t},\n\n\tupdate: function ( deltaTimeMS ) {\n\n\t\tfor ( var i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\tthis.animations[ i ].resetBlendWeights( );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\tthis.animations[ i ].update( deltaTimeMS );\n\n\t\t}\n\n\t}\n\n};\n\n// File:src/extras/animation/Animation.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.Animation = function ( root, data ) {\n\n\tthis.root = root;\n\tthis.data = THREE.AnimationHandler.init( data );\n\tthis.hierarchy = THREE.AnimationHandler.parse( root );\n\n\tthis.currentTime = 0;\n\tthis.timeScale = 1;\n\n\tthis.isPlaying = false;\n\tthis.loop = true;\n\tthis.weight = 0;\n\n\tthis.interpolationType = THREE.AnimationHandler.LINEAR;\n\n};\n\n\nTHREE.Animation.prototype.keyTypes = [ \"pos\", \"rot\", \"scl\" ];\n\n\nTHREE.Animation.prototype.play = function ( startTime, weight ) {\n\n\tthis.currentTime = startTime !== undefined ? startTime : 0;\n\tthis.weight = weight !== undefined ? weight: 1;\n\n\tthis.isPlaying = true;\n\n\tthis.reset();\n\n\tTHREE.AnimationHandler.play( this );\n\n};\n\n\nTHREE.Animation.prototype.stop = function() {\n\n\tthis.isPlaying = false;\n\n\tTHREE.AnimationHandler.stop( this );\n\n};\n\nTHREE.Animation.prototype.reset = function () {\n\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n\t\tvar object = this.hierarchy[ h ];\n\n\t\tobject.matrixAutoUpdate = true;\n\n\t\tif ( object.animationCache === undefined ) {\n\n\t\t\tobject.animationCache = {\n\t\t\t\tanimations: {},\n\t\t\t\tblending: {\n\t\t\t\t\tpositionWeight: 0.0,\n\t\t\t\t\tquaternionWeight: 0.0,\n\t\t\t\t\tscaleWeight: 0.0\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tif ( object.animationCache.animations[this.data.name] === undefined ) {\n\n\t\t\tobject.animationCache.animations[this.data.name] = {};\n\t\t\tobject.animationCache.animations[this.data.name].prevKey = { pos: 0, rot: 0, scl: 0 };\n\t\t\tobject.animationCache.animations[this.data.name].nextKey = { pos: 0, rot: 0, scl: 0 };\n\t\t\tobject.animationCache.animations[this.data.name].originalMatrix = object.matrix;\n\n\t\t}\n\n\t\tvar animationCache = object.animationCache.animations[this.data.name];\n\n\t\t// Get keys to match our current time\n\n\t\tfor ( var t = 0; t < 3; t ++ ) {\n\n\t\t\tvar type = this.keyTypes[ t ];\n\n\t\t\tvar prevKey = this.data.hierarchy[ h ].keys[ 0 ];\n\t\t\tvar nextKey = this.getNextKeyWith( type, h, 1 );\n\n\t\t\twhile ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {\n\n\t\t\t\tprevKey = nextKey;\n\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\n\n\t\t\t}\n\n\t\t\tanimationCache.prevKey[ type ] = prevKey;\n\t\t\tanimationCache.nextKey[ type ] = nextKey;\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Animation.prototype.resetBlendWeights = function () {\n\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n\t\tvar object = this.hierarchy[ h ];\n\n\t\tif ( object.animationCache !== undefined ) {\n\n\t\t\tobject.animationCache.blending.positionWeight = 0.0;\n\t\t\tobject.animationCache.blending.quaternionWeight = 0.0;\n\t\t\tobject.animationCache.blending.scaleWeight = 0.0;\n\n\t\t}\n\n\t}\n\n};\n\nTHREE.Animation.prototype.update = (function(){\n\n\tvar points = [];\n\tvar target = new THREE.Vector3();\n\tvar newVector = new THREE.Vector3();\n\tvar newQuat = new THREE.Quaternion();\n\n\t// Catmull-Rom spline\n\n\tvar interpolateCatmullRom = function ( points, scale ) {\n\n\t\tvar c = [], v3 = [],\n\t\tpoint, intPoint, weight, w2, w3,\n\t\tpa, pb, pc, pd;\n\n\t\tpoint = ( points.length - 1 ) * scale;\n\t\tintPoint = Math.floor( point );\n\t\tweight = point - intPoint;\n\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\n\t\tc[ 1 ] = intPoint;\n\t\tc[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;\n\t\tc[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;\n\n\t\tpa = points[ c[ 0 ] ];\n\t\tpb = points[ c[ 1 ] ];\n\t\tpc = points[ c[ 2 ] ];\n\t\tpd = points[ c[ 3 ] ];\n\n\t\tw2 = weight * weight;\n\t\tw3 = weight * w2;\n\n\t\tv3[ 0 ] = interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );\n\t\tv3[ 1 ] = interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );\n\t\tv3[ 2 ] = interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );\n\n\t\treturn v3;\n\n\t};\n\n\tvar interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\n\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t};\n\n\treturn function ( delta ) {\n\n\t\tif ( this.isPlaying === false ) return;\n\n\t\tthis.currentTime += delta * this.timeScale;\n\n\t\tif ( this.weight === 0 )\n\t\t\treturn;\n\n\t\t//\n\n\t\tvar duration = this.data.length;\n\n\t\tif ( this.currentTime > duration || this.currentTime < 0 ) {\n\n\t\t\tif ( this.loop ) {\n\n\t\t\t\tthis.currentTime %= duration;\n\n\t\t\t\tif ( this.currentTime < 0 )\n\t\t\t\t\tthis.currentTime += duration;\n\n\t\t\t\tthis.reset();\n\n\t\t\t} else {\n\n\t\t\t\tthis.stop();\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n\t\t\tvar object = this.hierarchy[ h ];\n\t\t\tvar animationCache = object.animationCache.animations[this.data.name];\n\t\t\tvar blending = object.animationCache.blending;\n\n\t\t\t// loop through pos/rot/scl\n\n\t\t\tfor ( var t = 0; t < 3; t ++ ) {\n\n\t\t\t\t// get keys\n\n\t\t\t\tvar type    = this.keyTypes[ t ];\n\t\t\t\tvar prevKey = animationCache.prevKey[ type ];\n\t\t\t\tvar nextKey = animationCache.nextKey[ type ];\n\n\t\t\t\tif ( ( this.timeScale > 0 && nextKey.time <= this.currentTime ) ||\n\t\t\t\t\t( this.timeScale < 0 && prevKey.time >= this.currentTime ) ) {\n\n\t\t\t\t\tprevKey = this.data.hierarchy[ h ].keys[ 0 ];\n\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, 1 );\n\n\t\t\t\t\twhile ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {\n\n\t\t\t\t\t\tprevKey = nextKey;\n\t\t\t\t\t\tnextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationCache.prevKey[ type ] = prevKey;\n\t\t\t\t\tanimationCache.nextKey[ type ] = nextKey;\n\n\t\t\t\t}\n\n\t\t\t\tobject.matrixAutoUpdate = true;\n\t\t\t\tobject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\tvar scale = ( this.currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );\n\n\t\t\t\tvar prevXYZ = prevKey[ type ];\n\t\t\t\tvar nextXYZ = nextKey[ type ];\n\n\t\t\t\tif ( scale < 0 ) scale = 0;\n\t\t\t\tif ( scale > 1 ) scale = 1;\n\n\t\t\t\t// interpolate\n\n\t\t\t\tif ( type === \"pos\" ) {\n\n\t\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {\n\n\t\t\t\t\t\tnewVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\n\t\t\t\t\t\tnewVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\n\t\t\t\t\t\tnewVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\n\n\t\t\t\t\t\t// blend\n\t\t\t\t\t\tvar proportionalWeight = this.weight / ( this.weight + blending.positionWeight );\n\t\t\t\t\t\tobject.position.lerp( newVector, proportionalWeight );\n\t\t\t\t\t\tblending.positionWeight += this.weight;\n\n\t\t\t\t\t} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n\t\t\t\t\t\t\t\tthis.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n\t\t\t\t\t\tpoints[ 0 ] = this.getPrevKeyWith( \"pos\", h, prevKey.index - 1 )[ \"pos\" ];\n\t\t\t\t\t\tpoints[ 1 ] = prevXYZ;\n\t\t\t\t\t\tpoints[ 2 ] = nextXYZ;\n\t\t\t\t\t\tpoints[ 3 ] = this.getNextKeyWith( \"pos\", h, nextKey.index + 1 )[ \"pos\" ];\n\n\t\t\t\t\t\tscale = scale * 0.33 + 0.33;\n\n\t\t\t\t\t\tvar currentPoint = interpolateCatmullRom( points, scale );\n\t\t\t\t\t\tvar proportionalWeight = this.weight / ( this.weight + blending.positionWeight );\n\t\t\t\t\t\tblending.positionWeight += this.weight;\n\n\t\t\t\t\t\t// blend\n\n\t\t\t\t\t\tvar vector = object.position;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvector.x = vector.x + ( currentPoint[ 0 ] - vector.x ) * proportionalWeight;\n\t\t\t\t\t\tvector.y = vector.y + ( currentPoint[ 1 ] - vector.y ) * proportionalWeight;\n\t\t\t\t\t\tvector.z = vector.z + ( currentPoint[ 2 ] - vector.z ) * proportionalWeight;\n\n\t\t\t\t\t\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n\t\t\t\t\t\t\tvar forwardPoint = interpolateCatmullRom( points, scale * 1.01 );\n\n\t\t\t\t\t\t\ttarget.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );\n\t\t\t\t\t\t\ttarget.sub( vector );\n\t\t\t\t\t\t\ttarget.y = 0;\n\t\t\t\t\t\t\ttarget.normalize();\n\n\t\t\t\t\t\t\tvar angle = Math.atan2( target.x, target.z );\n\t\t\t\t\t\t\tobject.rotation.set( 0, angle, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( type === \"rot\" ) {\n\n\t\t\t\t\tTHREE.Quaternion.slerp( prevXYZ, nextXYZ, newQuat, scale );\n\n\t\t\t\t\t// Avoid paying the cost of an additional slerp if we don't have to\n\t\t\t\t\tif ( blending.quaternionWeight === 0 ) {\n\n\t\t\t\t\t\tobject.quaternion.copy(newQuat);\n\t\t\t\t\t\tblending.quaternionWeight = this.weight;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar proportionalWeight = this.weight / ( this.weight + blending.quaternionWeight );\n\t\t\t\t\t\tTHREE.Quaternion.slerp( object.quaternion, newQuat, object.quaternion, proportionalWeight );\n\t\t\t\t\t\tblending.quaternionWeight += this.weight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( type === \"scl\" ) {\n\n\t\t\t\t\tnewVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;\n\t\t\t\t\tnewVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;\n\t\t\t\t\tnewVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;\n\n\t\t\t\t\tvar proportionalWeight = this.weight / ( this.weight + blending.scaleWeight );\n\t\t\t\t\tobject.scale.lerp( newVector, proportionalWeight );\n\t\t\t\t\tblending.scaleWeight += this.weight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n})();\n\n\n\n\n\n// Get next key with\n\nTHREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {\n\n\tvar keys = this.data.hierarchy[ h ].keys;\n\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n\t\t this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n\t\tkey = key < keys.length - 1 ? key : keys.length - 1;\n\n\t} else {\n\n\t\tkey = key % keys.length;\n\n\t}\n\n\tfor ( ; key < keys.length; key ++ ) {\n\n\t\tif ( keys[ key ][ type ] !== undefined ) {\n\n\t\t\treturn keys[ key ];\n\n\t\t}\n\n\t}\n\n\treturn this.data.hierarchy[ h ].keys[ 0 ];\n\n};\n\n// Get previous key with\n\nTHREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {\n\n\tvar keys = this.data.hierarchy[ h ].keys;\n\n\tif ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||\n\t\tthis.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {\n\n\t\tkey = key > 0 ? key : 0;\n\n\t} else {\n\n\t\tkey = key >= 0 ? key : key + keys.length;\n\n\t}\n\n\n\tfor ( ; key >= 0; key -- ) {\n\n\t\tif ( keys[ key ][ type ] !== undefined ) {\n\n\t\t\treturn keys[ key ];\n\n\t\t}\n\n\t}\n\n\treturn this.data.hierarchy[ h ].keys[ keys.length - 1 ];\n\n};\n\n// File:src/extras/animation/KeyFrameAnimation.js\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author khang duong\n * @author erik kitson\n */\n\nTHREE.KeyFrameAnimation = function ( data ) {\n\n\tthis.root = data.node;\n\tthis.data = THREE.AnimationHandler.init( data );\n\tthis.hierarchy = THREE.AnimationHandler.parse( this.root );\n\tthis.currentTime = 0;\n\tthis.timeScale = 0.001;\n\tthis.isPlaying = false;\n\tthis.isPaused = true;\n\tthis.loop = true;\n\n\t// initialize to first keyframes\n\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n\t\tvar keys = this.data.hierarchy[h].keys,\n\t\t\tsids = this.data.hierarchy[h].sids,\n\t\t\tobj = this.hierarchy[h];\n\n\t\tif ( keys.length && sids ) {\n\n\t\t\tfor ( var s = 0; s < sids.length; s ++ ) {\n\n\t\t\t\tvar sid = sids[ s ],\n\t\t\t\t\tnext = this.getNextKeyWith( sid, h, 0 );\n\n\t\t\t\tif ( next ) {\n\n\t\t\t\t\tnext.apply( sid );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tobj.matrixAutoUpdate = false;\n\t\t\tthis.data.hierarchy[h].node.updateMatrix();\n\t\t\tobj.matrixWorldNeedsUpdate = true;\n\n\t\t}\n\n\t}\n\n};\n\n\nTHREE.KeyFrameAnimation.prototype.play = function ( startTime ) {\n\n\tthis.currentTime = startTime !== undefined ? startTime : 0;\n\n\tif ( this.isPlaying === false ) {\n\n\t\tthis.isPlaying = true;\n\n\t\t// reset key cache\n\n\t\tvar h, hl = this.hierarchy.length,\n\t\t\tobject,\n\t\t\tnode;\n\n\t\tfor ( h = 0; h < hl; h ++ ) {\n\n\t\t\tobject = this.hierarchy[ h ];\n\t\t\tnode = this.data.hierarchy[ h ];\n\n\t\t\tif ( node.animationCache === undefined ) {\n\n\t\t\t\tnode.animationCache = {};\n\t\t\t\tnode.animationCache.prevKey = null;\n\t\t\t\tnode.animationCache.nextKey = null;\n\t\t\t\tnode.animationCache.originalMatrix = object.matrix;\n\n\t\t\t}\n\n\t\t\tvar keys = this.data.hierarchy[h].keys;\n\n\t\t\tif (keys.length) {\n\n\t\t\t\tnode.animationCache.prevKey = keys[ 0 ];\n\t\t\t\tnode.animationCache.nextKey = keys[ 1 ];\n\n\t\t\t\tthis.startTime = Math.min( keys[0].time, this.startTime );\n\t\t\t\tthis.endTime = Math.max( keys[keys.length - 1].time, this.endTime );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.update( 0 );\n\n\t}\n\n\tthis.isPaused = false;\n\n\tTHREE.AnimationHandler.play( this );\n\n};\n\n\nTHREE.KeyFrameAnimation.prototype.stop = function() {\n\n\tthis.isPlaying = false;\n\tthis.isPaused  = false;\n\n\tTHREE.AnimationHandler.stop( this );\n\n\t// reset JIT matrix and remove cache\n\n\tfor ( var h = 0; h < this.data.hierarchy.length; h ++ ) {\n\t\t\n\t\tvar obj = this.hierarchy[ h ];\n\t\tvar node = this.data.hierarchy[ h ];\n\n\t\tif ( node.animationCache !== undefined ) {\n\n\t\t\tvar original = node.animationCache.originalMatrix;\n\n\t\t\toriginal.copy( obj.matrix );\n\t\t\tobj.matrix = original;\n\n\t\t\tdelete node.animationCache;\n\n\t\t}\n\n\t}\n\n};\n\n\n// Update\n\nTHREE.KeyFrameAnimation.prototype.update = function ( delta ) {\n\n\tif ( this.isPlaying === false ) return;\n\n\tthis.currentTime += delta * this.timeScale;\n\n\t//\n\n\tvar duration = this.data.length;\n\n\tif ( this.loop === true && this.currentTime > duration ) {\n\n\t\tthis.currentTime %= duration;\n\n\t}\n\n\tthis.currentTime = Math.min( this.currentTime, duration );\n\n\tfor ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {\n\n\t\tvar object = this.hierarchy[ h ];\n\t\tvar node = this.data.hierarchy[ h ];\n\n\t\tvar keys = node.keys,\n\t\t\tanimationCache = node.animationCache;\n\n\n\t\tif ( keys.length ) {\n\n\t\t\tvar prevKey = animationCache.prevKey;\n\t\t\tvar nextKey = animationCache.nextKey;\n\n\t\t\tif ( nextKey.time <= this.currentTime ) {\n\n\t\t\t\twhile ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {\n\n\t\t\t\t\tprevKey = nextKey;\n\t\t\t\t\tnextKey = keys[ prevKey.index + 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tanimationCache.prevKey = prevKey;\n\t\t\t\tanimationCache.nextKey = nextKey;\n\n\t\t\t}\n\n\t\t\tif ( nextKey.time >= this.currentTime ) {\n\n\t\t\t\tprevKey.interpolate( nextKey, this.currentTime );\n\n\t\t\t} else {\n\n\t\t\t\tprevKey.interpolate( nextKey, nextKey.time );\n\n\t\t\t}\n\n\t\t\tthis.data.hierarchy[ h ].node.updateMatrix();\n\t\t\tobject.matrixWorldNeedsUpdate = true;\n\n\t\t}\n\n\t}\n\n};\n\n// Get next key with\n\nTHREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {\n\n\tvar keys = this.data.hierarchy[ h ].keys;\n\tkey = key % keys.length;\n\n\tfor ( ; key < keys.length; key ++ ) {\n\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\n\n\t\t\treturn keys[ key ];\n\n\t\t}\n\n\t}\n\n\treturn keys[ 0 ];\n\n};\n\n// Get previous key with\n\nTHREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {\n\n\tvar keys = this.data.hierarchy[ h ].keys;\n\tkey = key >= 0 ? key : key + keys.length;\n\n\tfor ( ; key >= 0; key -- ) {\n\n\t\tif ( keys[ key ].hasTarget( sid ) ) {\n\n\t\t\treturn keys[ key ];\n\n\t\t}\n\n\t}\n\n\treturn keys[ keys.length - 1 ];\n\n};\n\n// File:src/extras/animation/MorphAnimation.js\n\n/**\n * @author mrdoob / http://mrdoob.com\n */\n\nTHREE.MorphAnimation = function ( mesh ) {\n\n\tthis.mesh = mesh;\n\tthis.frames = mesh.morphTargetInfluences.length;\n\tthis.currentTime = 0;\n\tthis.duration = 1000;\n\tthis.loop = true;\n\n\tthis.isPlaying = false;\n\n};\n\nTHREE.MorphAnimation.prototype = {\n\n\tplay: function () {\n\n\t\tthis.isPlaying = true;\n\n\t},\n\n\tpause: function () {\n\n\t\tthis.isPlaying = false;\n\n\t},\n\n\tupdate: ( function () {\n\n\t\tvar lastFrame = 0;\n\t\tvar currentFrame = 0;\n\n\t\treturn function ( delta ) {\n\n\t\t\tif ( this.isPlaying === false ) return;\n\n\t\t\tthis.currentTime += delta;\n\n\t\t\tif ( this.loop === true && this.currentTime > this.duration ) {\n\n\t\t\t\tthis.currentTime %= this.duration;\n\n\t\t\t}\n\n\t\t\tthis.currentTime = Math.min( this.currentTime, this.duration );\n\n\t\t\tvar interpolation = this.duration / this.frames;\n\t\t\tvar frame = Math.floor( this.currentTime / interpolation );\n\n\t\t\tif ( frame != currentFrame ) {\n\n\t\t\t\tthis.mesh.morphTargetInfluences[ lastFrame ] = 0;\n\t\t\t\tthis.mesh.morphTargetInfluences[ currentFrame ] = 1;\n\t\t\t\tthis.mesh.morphTargetInfluences[ frame ] = 0;\n\n\t\t\t\tlastFrame = currentFrame;\n\t\t\t\tcurrentFrame = frame;\n\n\t\t\t}\n\n\t\t\tthis.mesh.morphTargetInfluences[ frame ] = ( this.currentTime % interpolation ) / interpolation;\n\t\t\tthis.mesh.morphTargetInfluences[ lastFrame ] = 1 - this.mesh.morphTargetInfluences[ frame ];\n\n\t\t}\n\n\t} )()\n\n};\n\n// File:src/extras/geometries/BoxGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n */\n\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'BoxGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\tdepth: depth,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tdepthSegments: depthSegments\n\t};\n\n\tthis.widthSegments = widthSegments || 1;\n\tthis.heightSegments = heightSegments || 1;\n\tthis.depthSegments = depthSegments || 1;\n\n\tvar scope = this;\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\tvar depth_half = depth / 2;\n\n\tbuildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px\n\tbuildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx\n\tbuildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py\n\tbuildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny\n\tbuildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz\n\tbuildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz\n\n\tfunction buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {\n\n\t\tvar w, ix, iy,\n\t\tgridX = scope.widthSegments,\n\t\tgridY = scope.heightSegments,\n\t\twidth_half = width / 2,\n\t\theight_half = height / 2,\n\t\toffset = scope.vertices.length;\n\n\t\tif ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {\n\n\t\t\tw = 'z';\n\n\t\t} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {\n\n\t\t\tw = 'y';\n\t\t\tgridY = scope.depthSegments;\n\n\t\t} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {\n\n\t\t\tw = 'x';\n\t\t\tgridX = scope.depthSegments;\n\n\t\t}\n\n\t\tvar gridX1 = gridX + 1,\n\t\tgridY1 = gridY + 1,\n\t\tsegment_width = width / gridX,\n\t\tsegment_height = height / gridY,\n\t\tnormal = new THREE.Vector3();\n\n\t\tnormal[ w ] = depth > 0 ? 1 : - 1;\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar vector = new THREE.Vector3();\n\t\t\t\tvector[ u ] = ( ix * segment_width - width_half ) * udir;\n\t\t\t\tvector[ v ] = ( iy * segment_height - height_half ) * vdir;\n\t\t\t\tvector[ w ] = depth;\n\n\t\t\t\tscope.vertices.push( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tvar uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );\n\t\t\t\tvar uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );\n\t\t\t\tvar uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );\n\t\t\t\tvar uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );\n\n\t\t\t\tvar face = new THREE.Face3( a + offset, b + offset, d + offset );\n\t\t\t\tface.normal.copy( normal );\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\tscope.faces.push( face );\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\t\tface = new THREE.Face3( b + offset, c + offset, d + offset );\n\t\t\t\tface.normal.copy( normal );\n\t\t\t\tface.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );\n\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\tscope.faces.push( face );\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.mergeVertices();\n\n};\n\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/CircleGeometry.js\n\n/**\n * @author hughes\n */\n\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CircleGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tsegments: segments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tradius = radius || 50;\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tvar i, uvs = [],\n\tcenter = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );\n\n\tthis.vertices.push(center);\n\tuvs.push( centerUV );\n\n\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\tvar vertex = new THREE.Vector3();\n\t\tvar segment = thetaStart + i / segments * thetaLength;\n\n\t\tvertex.x = radius * Math.cos( segment );\n\t\tvertex.y = radius * Math.sin( segment );\n\n\t\tthis.vertices.push( vertex );\n\t\tuvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );\n\n\t}\n\n\tvar n = new THREE.Vector3( 0, 0, 1 );\n\n\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\tthis.faces.push( new THREE.Face3( i, i + 1, 0, [ n.clone(), n.clone(), n.clone() ] ) );\n\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ i ].clone(), uvs[ i + 1 ].clone(), centerUV.clone() ] );\n\n\t}\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/CubeGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nTHREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\tconsole.warn( 'THREE.CubeGeometry has been renamed to THREE.BoxGeometry.' );\n\treturn new THREE.BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments );\n\n };\n\n// File:src/extras/geometries/CylinderGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'CylinderGeometry';\n\n\tthis.parameters = {\n\t\tradiusTop: radiusTop,\n\t\tradiusBottom: radiusBottom,\n\t\theight: height,\n\t\tradialSegments: radialSegments,\n\t\theightSegments: heightSegments,\n\t\topenEnded: openEnded\n\t};\n\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n\theight = height !== undefined ? height : 100;\n\n\tradialSegments = radialSegments || 8;\n\theightSegments = heightSegments || 1;\n\n\topenEnded = openEnded !== undefined ? openEnded : false;\n\n\tvar heightHalf = height / 2;\n\n\tvar x, y, vertices = [], uvs = [];\n\n\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\t\tvar uvsRow = [];\n\n\t\tvar v = y / heightSegments;\n\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\tvar u = x / radialSegments;\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = radius * Math.sin( u * Math.PI * 2 );\n\t\t\tvertex.y = - v * height + heightHalf;\n\t\t\tvertex.z = radius * Math.cos( u * Math.PI * 2 );\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t\tverticesRow.push( this.vertices.length - 1 );\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\t\tuvs.push( uvsRow );\n\n\t}\n\n\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\n\tvar na, nb;\n\n\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\tif ( radiusTop !== 0 ) {\n\n\t\t\tna = this.vertices[ vertices[ 0 ][ x ] ].clone();\n\t\t\tnb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();\n\n\t\t} else {\n\n\t\t\tna = this.vertices[ vertices[ 1 ][ x ] ].clone();\n\t\t\tnb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();\n\n\t\t}\n\n\t\tna.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();\n\t\tnb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();\n\n\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x ];\n\t\t\tvar v2 = vertices[ y + 1 ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x + 1 ];\n\t\t\tvar v4 = vertices[ y ][ x + 1 ];\n\n\t\t\tvar n1 = na.clone();\n\t\t\tvar n2 = na.clone();\n\t\t\tvar n3 = nb.clone();\n\t\t\tvar n4 = nb.clone();\n\n\t\t\tvar uv1 = uvs[ y ][ x ].clone();\n\t\t\tvar uv2 = uvs[ y + 1 ][ x ].clone();\n\t\t\tvar uv3 = uvs[ y + 1 ][ x + 1 ].clone();\n\t\t\tvar uv4 = uvs[ y ][ x + 1 ].clone();\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// top cap\n\n\tif ( openEnded === false && radiusTop > 0 ) {\n\n\t\tthis.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ 0 ][ x ];\n\t\t\tvar v2 = vertices[ 0 ][ x + 1 ];\n\t\t\tvar v3 = this.vertices.length - 1;\n\n\t\t\tvar n1 = new THREE.Vector3( 0, 1, 0 );\n\t\t\tvar n2 = new THREE.Vector3( 0, 1, 0 );\n\t\t\tvar n3 = new THREE.Vector3( 0, 1, 0 );\n\n\t\t\tvar uv1 = uvs[ 0 ][ x ].clone();\n\t\t\tvar uv2 = uvs[ 0 ][ x + 1 ].clone();\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 0 );\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n\t\t}\n\n\t}\n\n\t// bottom cap\n\n\tif ( openEnded === false && radiusBottom > 0 ) {\n\n\t\tthis.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );\n\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = this.vertices.length - 1;\n\n\t\t\tvar n1 = new THREE.Vector3( 0, - 1, 0 );\n\t\t\tvar n2 = new THREE.Vector3( 0, - 1, 0 );\n\t\t\tvar n3 = new THREE.Vector3( 0, - 1, 0 );\n\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\n\t\t\tvar uv3 = new THREE.Vector2( uv2.x, 1 );\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n}\n\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/ExtrudeGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n *\n *  material: <int> // material index for front and back faces\n *  extrudeMaterial: <int> // material index for extrusion and beveled faces\n *  uvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\n\n\tif ( typeof( shapes ) === \"undefined\" ) {\n\t\tshapes = [];\n\t\treturn;\n\t}\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ExtrudeGeometry';\n\n\tshapes = shapes instanceof Array ? shapes : [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n\t// can't really use automatic vertex normals\n\t// as then front and back sides get smoothed too\n\t// should do separate smoothing just for sides\n\n\t//this.computeVertexNormals();\n\n\t//console.log( \"took\", ( Date.now() - startTime ) );\n\n};\n\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\tvar sl = shapes.length;\n\n\tfor ( var s = 0; s < sl; s ++ ) {\n\t\tvar shape = shapes[ s ];\n\t\tthis.addShape( shape, options );\n\t}\n};\n\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tvar amount = options.amount !== undefined ? options.amount : 100;\n\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar steps = options.steps !== undefined ? options.steps : 1;\n\n\tvar extrudePath = options.extrudePath;\n\tvar extrudePts, extrudeByPath = false;\n\n\tvar material = options.material;\n\tvar extrudeMaterial = options.extrudeMaterial;\n\n\t// Use default WorldUVGenerator if no UV generators are specified.\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n\n\tvar splineTube, binormal, normal, position2;\n\tif ( extrudePath ) {\n\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\textrudeByPath = true;\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t// SETUP TNB variables\n\n\t\t// Reuse TNB from TubeGeomtry for now.\n\t\t// TODO1 - have a .isClosed in spline?\n\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);\n\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\tbinormal = new THREE.Vector3();\n\t\tnormal = new THREE.Vector3();\n\t\tposition2 = new THREE.Vector3();\n\n\t}\n\n\t// Safeguards if bevels are not enabled\n\n\tif ( ! bevelEnabled ) {\n\n\t\tbevelSegments = 0;\n\t\tbevelThickness = 0;\n\t\tbevelSize = 0;\n\n\t}\n\n\t// Variables initalization\n\n\tvar ahole, h, hl; // looping of holes\n\tvar scope = this;\n\tvar bevelPoints = [];\n\n\tvar shapesOffset = this.vertices.length;\n\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.Shape.Utils.isClockWise( vertices ) ;\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\n\t\t\tif ( THREE.Shape.Utils.isClockWise( ahole ) ) {\n\n\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n\n\t}\n\n\n\tvar faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );\n\n\t/* Vertices */\n\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\tvertices = vertices.concat( ahole );\n\n\t}\n\n\n\tfunction scalePt2 ( pt, vec, size ) {\n\n\t\tif ( ! vec ) console.log( \"die\" );\n\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t}\n\n\tvar b, bs, t, z,\n\t\tvert, vlen = vertices.length,\n\t\tface, flen = faces.length,\n\t\tcont, clen = contour.length;\n\n\n\t// Find directions for point movement\n\n\tvar RAD_TO_DEGREES = 180 / Math.PI;\n\n\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\tvar EPSILON = 0.0000000001;\n\t\t\n\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t//   shiftet by 1 unit (length of normalized vector) to the left\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t//\n\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\n\n\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n\t\t\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\t\t\n\t\t// check for colinear edges\n\t\tvar colinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\t\n\t\tif ( Math.abs( colinear0 ) > EPSILON ) {\t\t// not colinear\n\t\t\t\n\t\t\t// length of vectors for normalizing\n\t\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\t\t\t\n\t\t\t// shift adjacent points by unit vectors to the left\n\t\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\t\t\t\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\t\n\t\t\t// scaling factor for v_prev to intersection point\n\t\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\t\n\t\t\t// vector from inPt to intersection point\n\t\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\t\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t//  but prevent crazy spikes\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y )\n\t\t\tif ( v_trans_lensq <= 2 ) {\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\n\t\t\t} else {\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\t\t\t}\n\t\t\t\n\t\t} else {\t\t// handle special case of colinear edges\n\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\n\t\t\tif ( v_prev_x > EPSILON ) {\n\t\t\t\tif ( v_next_x > EPSILON ) { direction_eq = true; }\n\t\t\t} else {\n\t\t\t\tif ( v_prev_x < - EPSILON ) {\n\t\t\t\t\tif ( v_next_x < - EPSILON ) { direction_eq = true; }\n\t\t\t\t} else {\n\t\t\t\t\tif ( Math.sign(v_prev_y) == Math.sign(v_next_y) ) { direction_eq = true; }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( direction_eq ) {\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\tv_trans_y =  v_prev_x;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\t\t\t} else {\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\t\t\t}\n\n\t\t}\n\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t}\n\n\n\tvar contourMovements = [];\n\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\tif ( j === il ) j = 0;\n\t\tif ( k === il ) k = 0;\n\n\t\t//  (j)---(i)---(k)\n\t\t// console.log('i,j,k', i, j , k)\n\n\t\tvar pt_i = contour[ i ];\n\t\tvar pt_j = contour[ j ];\n\t\tvar pt_k = contour[ k ];\n\n\t\tcontourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t}\n\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\tahole = holes[ h ];\n\n\t\toneHoleMovements = [];\n\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\tif ( j === il ) j = 0;\n\t\t\tif ( k === il ) k = 0;\n\n\t\t\t//  (j)---(i)---(k)\n\t\t\toneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t}\n\n\t\tholesMovements.push( oneHoleMovements );\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t}\n\n\n\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\n\t\t//z = bevelThickness * t;\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved\n\t\t//bs = bevelSize * t ; // linear\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tv( vert.x, vert.y,  - z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbs = bevelSize;\n\n\t// Back facing vertices\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\tif ( ! extrudeByPath ) {\n\n\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t} else {\n\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\tnormal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);\n\t\t\tbinormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);\n\n\t\t\tposition2.copy( extrudePts[0] ).add(normal).add(binormal);\n\n\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t}\n\n\t}\n\n\t// Add stepped vertices...\n\t// Including front facing vertices\n\n\tvar s;\n\n\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\n\n\t\t\t} else {\n\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\tnormal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );\n\t\t\t\tbinormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );\n\n\t\t\t\tposition2.copy( extrudePts[s] ).add( normal ).add( binormal );\n\n\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Add bevel segments planes\n\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\tt = b / bevelSegments;\n\t\tz = bevelThickness * ( 1 - t );\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\t\tbs = bevelSize * Math.sin ( t * Math.PI/2 ) ;\n\n\t\t// contract shape\n\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t}\n\n\t\t// expand holes\n\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Faces */\n\n\t// Top and bottom faces\n\n\tbuildLidFaces();\n\n\t// Sides faces\n\n\tbuildSideFaces();\n\n\n\t/////  Internal functions\n\n\tfunction buildLidFaces() {\n\n\t\tif ( bevelEnabled ) {\n\n\t\t\tvar layer = 0 ; // steps + 1\n\t\t\tvar offset = vlen * layer;\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset );\n\n\t\t\t}\n\n\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\toffset = vlen * layer;\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Bottom faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t}\n\n\t\t\t// Top faces\n\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\tface = faces[ i ];\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// Create faces for the z-sides of the shape\n\n\tfunction buildSideFaces() {\n\n\t\tvar layeroffset = 0;\n\t\tsidewalls( contour, layeroffset );\n\t\tlayeroffset += contour.length;\n\n\t\tfor ( h = 0, hl = holes.length;  h < hl; h ++ ) {\n\n\t\t\tahole = holes[ h ];\n\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t//, true\n\t\t\tlayeroffset += ahole.length;\n\n\t\t}\n\n\t}\n\n\tfunction sidewalls( contour, layeroffset ) {\n\n\t\tvar j, k;\n\t\ti = contour.length;\n\n\t\twhile ( --i >= 0 ) {\n\n\t\t\tj = i;\n\t\t\tk = i - 1;\n\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\n\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\n\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tfunction v( x, y, z ) {\n\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\n\n\t}\n\n\tfunction f3( a, b, c ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\n\t\t// normal, color, material\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\n\n \t\tscope.faceVertexUvs[ 0 ].push( uvs );\n\n\t}\n\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\n\n\t\ta += shapesOffset;\n\t\tb += shapesOffset;\n\t\tc += shapesOffset;\n\t\td += shapesOffset;\n\n \t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );\n \t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );\n\n \t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\n\n \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\n \t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\n\n\t}\n\n};\n\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\n\t\treturn [\n\t\t\tnew THREE.Vector2( a.x, a.y ),\n\t\t\tnew THREE.Vector2( b.x, b.y ),\n\t\t\tnew THREE.Vector2( c.x, c.y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\n\n\t\tvar vertices = geometry.vertices;\n\n\t\tvar a = vertices[ indexA ];\n\t\tvar b = vertices[ indexB ];\n\t\tvar c = vertices[ indexC ];\n\t\tvar d = vertices[ indexD ];\n\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\n\t\t\t];\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\n\t\t\t];\n\t\t}\n\t}\n};\n\n// File:src/extras/geometries/ShapeGeometry.js\n\n/**\n * @author jonobr1 / http://jonobr1.com\n *\n * Creates a one-sided polygonal geometry from a path shape. Similar to\n * ExtrudeGeometry.\n *\n * parameters = {\n *\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n *\n *\tmaterial: <int> // material index for front and back faces\n *\tuvGenerator: <Object> // object that provides UV generator functions\n *\n * }\n **/\n\nTHREE.ShapeGeometry = function ( shapes, options ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ShapeGeometry';\n\n\tif ( shapes instanceof Array === false ) shapes = [ shapes ];\n\n\tthis.addShapeList( shapes, options );\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n/**\n * Add an array of shapes to THREE.ShapeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\n\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\tthis.addShape( shapes[ i ], options );\n\n\t}\n\n\treturn this;\n\n};\n\n/**\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n */\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\n\n\tif ( options === undefined ) options = {};\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\n\tvar material = options.material;\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\n\n\t//\n\n\tvar i, l, hole, s;\n\n\tvar shapesOffset = this.vertices.length;\n\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\tvar vertices = shapePoints.shape;\n\tvar holes = shapePoints.holes;\n\n\tvar reverse = ! THREE.Shape.Utils.isClockWise( vertices );\n\n\tif ( reverse ) {\n\n\t\tvertices = vertices.reverse();\n\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\t\thole = holes[ i ];\n\n\t\t\tif ( THREE.Shape.Utils.isClockWise( hole ) ) {\n\n\t\t\t\tholes[ i ] = hole.reverse();\n\n\t\t\t}\n\n\t\t}\n\n\t\treverse = false;\n\n\t}\n\n\tvar faces = THREE.Shape.Utils.triangulateShape( vertices, holes );\n\n\t// Vertices\n\n\tvar contour = vertices;\n\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\n\n\t\thole = holes[ i ];\n\t\tvertices = vertices.concat( hole );\n\n\t}\n\n\t//\n\n\tvar vert, vlen = vertices.length;\n\tvar face, flen = faces.length;\n\tvar cont, clen = contour.length;\n\n\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\tvert = vertices[ i ];\n\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\n\n\t}\n\n\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\tface = faces[ i ];\n\n\t\tvar a = face[ 0 ] + shapesOffset;\n\t\tvar b = face[ 1 ] + shapesOffset;\n\t\tvar c = face[ 2 ] + shapesOffset;\n\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\n\n\t}\n\n};\n\n// File:src/extras/geometries/LatheGeometry.js\n\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://exocortex.com\n */\n\n// points - to create a closed torus, one must use a set of points \n//    like so: [ a, b, c, d, a ], see first is the same as last.\n// segments - the number of circumference segments to create\n// phiStart - the starting radian\n// phiLength - the radian (0 to 2*PI) range of the lathed section\n//    2*pi is a closed lathe, less than 2PI is a portion.\n\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'LatheGeometry';\n\n\tthis.parameters = {\n\t\tpoints: points,\n\t\tsegments: segments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength\n\t};\n\n\tsegments = segments || 12;\n\tphiStart = phiStart || 0;\n\tphiLength = phiLength || 2 * Math.PI;\n\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\n\tvar inverseSegments = 1.0 / segments;\n\n\tfor ( var i = 0, il = segments; i <= il; i ++ ) {\n\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\tvar c = Math.cos( phi ),\n\t\t\ts = Math.sin( phi );\n\n\t\tfor ( var j = 0, jl = points.length; j < jl; j ++ ) {\n\n\t\t\tvar pt = points[ j ];\n\n\t\t\tvar vertex = new THREE.Vector3();\n\n\t\t\tvertex.x = c * pt.x - s * pt.y;\n\t\t\tvertex.y = s * pt.x + c * pt.y;\n\t\t\tvertex.z = pt.z;\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t}\n\n\t}\n\n\tvar np = points.length;\n\n\tfor ( var i = 0, il = segments; i < il; i ++ ) {\n\n\t\tfor ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {\n\n\t\t\tvar base = j + np * i;\n\t\t\tvar a = base;\n\t\t\tvar b = base + np;\n\t\t\tvar c = base + 1 + np;\n\t\t\tvar d = base + 1;\n\n\t\t\tvar u0 = i * inverseSegments;\n\t\t\tvar v0 = j * inversePointLength;\n\t\t\tvar u1 = u0 + inverseSegments;\n\t\t\tvar v1 = v0 + inversePointLength;\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\n\n\t\t\t\tnew THREE.Vector2( u0, v0 ),\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\n\t\t\t\tnew THREE.Vector2( u0, v1 )\n\n\t\t\t] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\n\t\t\tthis.faceVertexUvs[ 0 ].push( [\n\n\t\t\t\tnew THREE.Vector2( u1, v0 ),\n\t\t\t\tnew THREE.Vector2( u1, v1 ),\n\t\t\t\tnew THREE.Vector2( u0, v1 )\n\n\t\t\t] );\n\n\n\t\t}\n\n\t}\n\n\tthis.mergeVertices();\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/PlaneGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tconsole.info( 'THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.' );\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PlaneGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\n};\n\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/PlaneBufferGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n */\n\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\n\n\tTHREE.BufferGeometry.call( this );\n\n\tthis.type = 'PlaneBufferGeometry';\n\n\tthis.parameters = {\n\t\twidth: width,\n\t\theight: height,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments\n\t};\n\n\tvar width_half = width / 2;\n\tvar height_half = height / 2;\n\n\tvar gridX = widthSegments || 1;\n\tvar gridY = heightSegments || 1;\n\n\tvar gridX1 = gridX + 1;\n\tvar gridY1 = gridY + 1;\n\n\tvar segment_width = width / gridX;\n\tvar segment_height = height / gridY;\n\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\n\n\tvar offset = 0;\n\tvar offset2 = 0;\n\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\n\n\t\tvar y = iy * segment_height - height_half;\n\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\tvertices[ offset     ] = x;\n\t\t\tvertices[ offset + 1 ] = - y;\n\n\t\t\tnormals[ offset + 2 ] = 1;\n\n\t\t\tuvs[ offset2     ] = ix / gridX;\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\n\n\t\t\toffset += 3;\n\t\t\toffset2 += 2;\n\n\t\t}\n\n\t}\n\n\toffset = 0;\n\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\n\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\n\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\tvar a = ix + gridX1 * iy;\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\tindices[ offset     ] = a;\n\t\t\tindices[ offset + 1 ] = b;\n\t\t\tindices[ offset + 2 ] = d;\n\n\t\t\tindices[ offset + 3 ] = b;\n\t\t\tindices[ offset + 4 ] = c;\n\t\t\tindices[ offset + 5 ] = d;\n\n\t\t\toffset += 6;\n\n\t\t}\n\n\t}\n\n\tthis.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\n\n};\n\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\n\n// File:src/extras/geometries/RingGeometry.js\n\n/**\n * @author Kaleb Murphy\n */\n\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'RingGeometry';\n\n\tthis.parameters = {\n\t\tinnerRadius: innerRadius,\n\t\touterRadius: outerRadius,\n\t\tthetaSegments: thetaSegments,\n\t\tphiSegments: phiSegments,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength\n\t};\n\n\tinnerRadius = innerRadius || 0;\n\touterRadius = outerRadius || 50;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;\n\n\tvar i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\n\tfor ( i = 0; i < phiSegments + 1; i ++ ) { // concentric circles inside ring\n\n\t\tfor ( o = 0; o < thetaSegments + 1; o ++ ) { // number of segments per circle\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvar segment = thetaStart + o / thetaSegments * thetaLength;\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tthis.vertices.push( vertex );\n\t\t\tuvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );\n\t\t}\n\n\t\tradius += radiusStep;\n\n\t}\n\n\tvar n = new THREE.Vector3( 0, 0, 1 );\n\n\tfor ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring\n\n\t\tvar thetaSegment = i * (thetaSegments + 1);\n\n\t\tfor ( o = 0; o < thetaSegments ; o ++ ) { // number of segments per circle\n\n\t\t\tvar segment = o + thetaSegment;\n\n\t\t\tvar v1 = segment;\n\t\t\tvar v2 = segment + thetaSegments + 1;\n\t\t\tvar v3 = segment + thetaSegments + 2;\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);\n\n\t\t\tv1 = segment;\n\t\t\tv2 = segment + thetaSegments + 2;\n\t\t\tv3 = segment + 1;\n\n\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);\n\n\t\t}\n\t}\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n\n// File:src/extras/geometries/SphereGeometry.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'SphereGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\twidthSegments: widthSegments,\n\t\theightSegments: heightSegments,\n\t\tphiStart: phiStart,\n\t\tphiLength: phiLength,\n\t\tthetaStart: thetaStart,\n\t\tthetaLength: thetaLength \n\t};\n\n\tradius = radius || 50;\n\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\tphiStart = phiStart !== undefined ? phiStart : 0;\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\tvar x, y, vertices = [], uvs = [];\n\n\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\tvar verticesRow = [];\n\t\tvar uvsRow = [];\n\n\t\tfor ( x = 0; x <= widthSegments; x ++ ) {\n\n\t\t\tvar u = x / widthSegments;\n\t\t\tvar v = y / heightSegments;\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t\tverticesRow.push( this.vertices.length - 1 );\n\t\t\tuvsRow.push( new THREE.Vector2( u, 1 - v ) );\n\n\t\t}\n\n\t\tvertices.push( verticesRow );\n\t\tuvs.push( uvsRow );\n\n\t}\n\n\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\tfor ( x = 0; x < widthSegments; x ++ ) {\n\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\n\t\t\tvar v2 = vertices[ y ][ x ];\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\n\n\t\t\tvar n1 = this.vertices[ v1 ].clone().normalize();\n\t\t\tvar n2 = this.vertices[ v2 ].clone().normalize();\n\t\t\tvar n3 = this.vertices[ v3 ].clone().normalize();\n\t\t\tvar n4 = this.vertices[ v4 ].clone().normalize();\n\n\t\t\tvar uv1 = uvs[ y ][ x + 1 ].clone();\n\t\t\tvar uv2 = uvs[ y ][ x ].clone();\n\t\t\tvar uv3 = uvs[ y + 1 ][ x ].clone();\n\t\t\tvar uv4 = uvs[ y + 1 ][ x + 1 ].clone();\n\n\t\t\tif ( Math.abs( this.vertices[ v1 ].y ) === radius ) {\n\n\t\t\t\tuv1.x = ( uv1.x + uv2.x ) / 2;\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );\n\n\t\t\t} else if ( Math.abs( this.vertices[ v3 ].y ) === radius ) {\n\n\t\t\t\tuv3.x = ( uv3.x + uv4.x ) / 2;\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );\n\n\t\t\t} else {\n\n\t\t\t\tthis.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );\n\n\t\t\t\tthis.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n};\n\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/TextGeometry.js\n\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * For creating 3D text geometry in three.js\n *\n * Text = 3D Text\n *\n * parameters = {\n *  size: \t\t\t<float>, \t// size of the text\n *  height: \t\t<float>, \t// thickness to extrude text\n *  curveSegments: \t<int>,\t\t// number of points on the curves\n *\n *  font: \t\t\t<string>,\t\t// font name\n *  weight: \t\t<string>,\t\t// font weight (normal, bold)\n *  style: \t\t\t<string>,\t\t// font style  (normal, italics)\n *\n *  bevelEnabled:\t<bool>,\t\t\t// turn on bevel\n *  bevelThickness: <float>, \t\t// how deep into text bevel goes\n *  bevelSize:\t\t<float>, \t\t// how far from text outline is bevel\n *  }\n *\n */\n\n/*\tUsage Examples\n\n\t// TextGeometry wrapper\n\n\tvar text3d = new TextGeometry( text, options );\n\n\t// Complete manner\n\n\tvar textShapes = THREE.FontUtils.generateShapes( text, options );\n\tvar text3d = new ExtrudeGeometry( textShapes, options );\n\n*/\n\n\nTHREE.TextGeometry = function ( text, parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar textShapes = THREE.FontUtils.generateShapes( text, parameters );\n\n\t// translate parameters to ExtrudeGeometry API\n\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\n\n\t// defaults\n\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\tTHREE.ExtrudeGeometry.call( this, textShapes, parameters );\n\n\tthis.type = 'TextGeometry';\n\n};\n\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\n\n// File:src/extras/geometries/TorusGeometry.js\n\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n */\n\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tarc: arc\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = radialSegments || 8;\n\ttubularSegments = tubularSegments || 6;\n\tarc = arc || Math.PI * 2;\n\n\tvar center = new THREE.Vector3(), uvs = [], normals = [];\n\n\tfor ( var j = 0; j <= radialSegments; j ++ ) {\n\n\t\tfor ( var i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar u = i / tubularSegments * arc;\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\tcenter.y = radius * Math.sin( u );\n\n\t\t\tvar vertex = new THREE.Vector3();\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\tthis.vertices.push( vertex );\n\n\t\t\tuvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );\n\t\t\tnormals.push( vertex.clone().sub( center ).normalize() );\n\n\t\t}\n\n\t}\n\n\tfor ( var j = 1; j <= radialSegments; j ++ ) {\n\n\t\tfor ( var i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\tvar face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );\n\t\t\tthis.faces.push( face );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );\n\n\t\t\tface = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );\n\t\t\tthis.faces.push( face );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );\n\n\t\t}\n\n\t}\n\n\tthis.computeFaceNormals();\n\n};\n\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/TorusKnotGeometry.js\n\n/**\n * @author oosmoxiecode\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\n */\n\nTHREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TorusKnotGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\ttube: tube,\n\t\tradialSegments: radialSegments,\n\t\ttubularSegments: tubularSegments,\n\t\tp: p,\n\t\tq: q,\n\t\theightScale: heightScale\n\t};\n\n\tradius = radius || 100;\n\ttube = tube || 40;\n\tradialSegments = radialSegments || 64;\n\ttubularSegments = tubularSegments || 8;\n\tp = p || 2;\n\tq = q || 3;\n\theightScale = heightScale || 1;\n\t\n\tvar grid = new Array( radialSegments );\n\tvar tang = new THREE.Vector3();\n\tvar n = new THREE.Vector3();\n\tvar bitan = new THREE.Vector3();\n\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\n\n\t\tgrid[ i ] = new Array( tubularSegments );\n\t\tvar u = i / radialSegments * 2 * p * Math.PI;\n\t\tvar p1 = getPos( u, q, p, radius, heightScale );\n\t\tvar p2 = getPos( u + 0.01, q, p, radius, heightScale );\n\t\ttang.subVectors( p2, p1 );\n\t\tn.addVectors( p2, p1 );\n\n\t\tbitan.crossVectors( tang, n );\n\t\tn.crossVectors( bitan, tang );\n\t\tbitan.normalize();\n\t\tn.normalize();\n\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\n\n\t\t\tvar v = j / tubularSegments * 2 * Math.PI;\n\t\t\tvar cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\tvar pos = new THREE.Vector3();\n\t\t\tpos.x = p1.x + cx * n.x + cy * bitan.x;\n\t\t\tpos.y = p1.y + cx * n.y + cy * bitan.y;\n\t\t\tpos.z = p1.z + cx * n.z + cy * bitan.z;\n\n\t\t\tgrid[ i ][ j ] = this.vertices.push( pos ) - 1;\n\n\t\t}\n\n\t}\n\n\tfor ( var i = 0; i < radialSegments; ++ i ) {\n\n\t\tfor ( var j = 0; j < tubularSegments; ++ j ) {\n\n\t\t\tvar ip = ( i + 1 ) % radialSegments;\n\t\t\tvar jp = ( j + 1 ) % tubularSegments;\n\n\t\t\tvar a = grid[ i ][ j ];\n\t\t\tvar b = grid[ ip ][ j ];\n\t\t\tvar c = grid[ ip ][ jp ];\n\t\t\tvar d = grid[ i ][ jp ];\n\n\t\t\tvar uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );\n\t\t\tvar uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );\n\t\t\tvar uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );\n\t\t\tvar uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n\tfunction getPos( u, in_q, in_p, radius, heightScale ) {\n\n\t\tvar cu = Math.cos( u );\n\t\tvar su = Math.sin( u );\n\t\tvar quOverP = in_q / in_p * u;\n\t\tvar cs = Math.cos( quOverP );\n\n\t\tvar tx = radius * ( 2 + cs ) * 0.5 * cu;\n\t\tvar ty = radius * ( 2 + cs ) * su * 0.5;\n\t\tvar tz = heightScale * radius * Math.sin( quOverP ) * 0.5;\n\n\t\treturn new THREE.Vector3( tx, ty, tz );\n\n\t}\n\n};\n\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/TubeGeometry.js\n\n/**\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n *\n * Modified from the TorusKnotGeometry by @oosmoxiecode\n *\n * Creates a tube which extrudes along a 3d spline\n *\n * Uses parallel transport frames as described in\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n */\n\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'TubeGeometry';\n\n\tthis.parameters = {\n\t\tpath: path,\n\t\tsegments: segments,\n\t\tradius: radius,\n\t\tradialSegments: radialSegments,\n\t\tclosed: closed\n\t};\n\n\tsegments = segments || 64;\n\tradius = radius || 1;\n\tradialSegments = radialSegments || 8;\n\tclosed = closed || false;\n\n\tvar grid = [];\n\n\tvar scope = this,\n\n\t\ttangent,\n\t\tnormal,\n\t\tbinormal,\n\n\t\tnumpoints = segments + 1,\n\n\t\tx, y, z,\n\t\ttx, ty, tz,\n\t\tu, v,\n\n\t\tcx, cy,\n\t\tpos, pos2 = new THREE.Vector3(),\n\t\ti, j,\n\t\tip, jp,\n\t\ta, b, c, d,\n\t\tuva, uvb, uvc, uvd;\n\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\n\t\ttangents = frames.tangents,\n\t\tnormals = frames.normals,\n\t\tbinormals = frames.binormals;\n\n\t// proxy internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\tfunction vert( x, y, z ) {\n\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\n\n\t}\n\n\t// consruct the grid\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tgrid[ i ] = [];\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\tpos = path.getPointAt( u );\n\n\t\ttangent = tangents[ i ];\n\t\tnormal = normals[ i ];\n\t\tbinormal = binormals[ i ];\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tv = j / radialSegments * 2 * Math.PI;\n\n\t\t\tcx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tcy = radius * Math.sin( v );\n\n\t\t\tpos2.copy( pos );\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\n\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\n\n\t\t}\n\t}\n\n\n\t// construct the mesh\n\n\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\n\n\t\t\tip = ( closed ) ? (i + 1) % segments : i + 1;\n\t\t\tjp = (j + 1) % radialSegments;\n\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\n\t\t\tb = grid[ ip ][ j ];\n\t\t\tc = grid[ ip ][ jp ];\n\t\t\td = grid[ i ][ jp ];\n\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\n\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\n\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\t}\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\n\n\tvar\ttangent = new THREE.Vector3(),\n\t\tnormal = new THREE.Vector3(),\n\t\tbinormal = new THREE.Vector3(),\n\n\t\ttangents = [],\n\t\tnormals = [],\n\t\tbinormals = [],\n\n\t\tvec = new THREE.Vector3(),\n\t\tmat = new THREE.Matrix4(),\n\n\t\tnumpoints = segments + 1,\n\t\ttheta,\n\t\tepsilon = 0.0001,\n\t\tsmallest,\n\n\t\ttx, ty, tz,\n\t\ti, u, v;\n\n\n\t// expose internals\n\tthis.tangents = tangents;\n\tthis.normals = normals;\n\tthis.binormals = binormals;\n\n\t// compute the tangent vectors for each segment on the path\n\n\tfor ( i = 0; i < numpoints; i ++ ) {\n\n\t\tu = i / ( numpoints - 1 );\n\n\t\ttangents[ i ] = path.getTangentAt( u );\n\t\ttangents[ i ].normalize();\n\n\t}\n\n\tinitialNormal3();\n\n\t/*\n\tfunction initialNormal1(lastBinormal) {\n\t\t// fixed start binormal. Has dangers of 0 vectors\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\t}\n\n\tfunction initialNormal2() {\n\n\t\t// This uses the Frenet-Serret formula for deriving binormal\n\t\tvar t2 = path.getTangentAt( epsilon );\n\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n\n\t}\n\t*/\n\n\tfunction initialNormal3() {\n\t\t// select an initial normal vector perpenicular to the first tangent vector,\n\t\t// and in the direction of the smallest tangent xyz component\n\n\t\tnormals[ 0 ] = new THREE.Vector3();\n\t\tbinormals[ 0 ] = new THREE.Vector3();\n\t\tsmallest = Number.MAX_VALUE;\n\t\ttx = Math.abs( tangents[ 0 ].x );\n\t\tty = Math.abs( tangents[ 0 ].y );\n\t\ttz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= smallest ) {\n\t\t\tsmallest = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\t\t}\n\n\t\tif ( ty <= smallest ) {\n\t\t\tsmallest = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\t\t}\n\n\t\tif ( tz <= smallest ) {\n\t\t\tnormal.set( 0, 0, 1 );\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\t}\n\n\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\tnormals[ i ] = normals[ i-1 ].clone();\n\n\t\tbinormals[ i ] = binormals[ i-1 ].clone();\n\n\t\tvec.crossVectors( tangents[ i-1 ], tangents[ i ] );\n\n\t\tif ( vec.length() > epsilon ) {\n\n\t\t\tvec.normalize();\n\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t}\n\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t}\n\n\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\tif ( closed ) {\n\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), - 1, 1 ) );\n\t\ttheta /= ( numpoints - 1 );\n\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {\n\n\t\t\ttheta = - theta;\n\n\t\t}\n\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\n\n\t\t\t// twist a little...\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t}\n};\n\n// File:src/extras/geometries/PolyhedronGeometry.js\n\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'PolyhedronGeometry';\n\n\tthis.parameters = {\n\t\tvertices: vertices,\n\t\tindices: indices,\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tradius = radius || 1;\n\tdetail = detail || 0;\n\n\tvar that = this;\n\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\n\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\n\n\t}\n\n\tvar midpoints = [], p = this.vertices;\n\n\tvar faces = [];\n\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\n\n\t\tvar v1 = p[ indices[ i     ] ];\n\t\tvar v2 = p[ indices[ i + 1 ] ];\n\t\tvar v3 = p[ indices[ i + 2 ] ];\n\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\n\t}\n\n\tvar centroid = new THREE.Vector3();\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tsubdivide( faces[ i ], detail );\n\n\t}\n\n\n\t// Handle case when face straddles the seam\n\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\n\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\tvar x0 = uvs[ 0 ].x;\n\t\tvar x1 = uvs[ 1 ].x;\n\t\tvar x2 = uvs[ 2 ].x;\n\n\t\tvar max = Math.max( x0, Math.max( x1, x2 ) );\n\t\tvar min = Math.min( x0, Math.min( x1, x2 ) );\n\n\t\tif ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary\n\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\n\n\t\t}\n\n\t}\n\n\n\t// Apply radius\n\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\tthis.vertices[ i ].multiplyScalar( radius );\n\n\t}\n\n\n\t// Merge vertices\n\n\tthis.mergeVertices();\n\n\tthis.computeFaceNormals();\n\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\n\n\n\t// Project vector onto sphere's surface\n\n\tfunction prepare( vector ) {\n\n\t\tvar vertex = vector.normalize().clone();\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\n\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\n\n\t\treturn vertex;\n\n\t}\n\n\n\t// Approximate a curved face with recursively sub-divided triangles.\n\n\tfunction make( v1, v2, v3 ) {\n\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );\n\t\tthat.faces.push( face );\n\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\n\n\t\tvar azi = azimuth( centroid );\n\n\t\tthat.faceVertexUvs[ 0 ].push( [\n\t\t\tcorrectUV( v1.uv, v1, azi ),\n\t\t\tcorrectUV( v2.uv, v2, azi ),\n\t\t\tcorrectUV( v3.uv, v3, azi )\n\t\t] );\n\n\t}\n\n\n\t// Analytically subdivide a face to the required detail level.\n\n\tfunction subdivide( face, detail ) {\n\n\t\tvar cols = Math.pow(2, detail);\n\t\tvar cells = Math.pow(4, detail);\n\t\tvar a = prepare( that.vertices[ face.a ] );\n\t\tvar b = prepare( that.vertices[ face.b ] );\n\t\tvar c = prepare( that.vertices[ face.c ] );\n\t\tvar v = [];\n\n\t\t// Construct all of the vertices for this subdivision.\n\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\n\n\t\t\tv[ i ] = [];\n\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\n\t\t\tvar rows = cols - i;\n\n\t\t\tfor ( var j = 0; j <= rows; j ++) {\n\n\t\t\t\tif ( j == 0 && i == cols ) {\n\n\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Construct all of the faces.\n\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {\n\n\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\tif ( j % 2 == 0 ) {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1],\n\t\t\t\t\t\tv[ i + 1 ][ k ],\n\t\t\t\t\t\tv[ i ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmake(\n\t\t\t\t\t\tv[ i ][ k + 1 ],\n\t\t\t\t\t\tv[ i + 1][ k + 1],\n\t\t\t\t\t\tv[ i + 1 ][ k ]\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\tfunction azimuth( vector ) {\n\n\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t}\n\n\n\t// Angle above the XZ plane.\n\n\tfunction inclination( vector ) {\n\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t}\n\n\n\t// Texture fixing helper. Spheres have some odd behaviours.\n\n\tfunction correctUV( uv, vector, azimuth ) {\n\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\n\t\treturn uv.clone();\n\n\t}\n\n\n};\n\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/DodecahedronGeometry.js\n\n/**\n * @author Abe Pazos / https://hamoid.com\n */\n\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\tvar r = 1 / t;\n\n\tvar vertices = [\n\n\t\t// (±1, ±1, ±1)\n\t\t-1, -1, -1,    -1, -1,  1,\n\t\t-1,  1, -1,    -1,  1,  1,\n\t\t 1, -1, -1,     1, -1,  1,\n\t\t 1,  1, -1,     1,  1,  1,\n\n\t\t// (0, ±1/φ, ±φ)\n\t\t 0, -r, -t,     0, -r,  t,\n\t\t 0,  r, -t,     0,  r,  t,\n\n\t\t// (±1/φ, ±φ, 0)\n\t\t-r, -t,  0,    -r,  t,  0,\n\t\t r, -t,  0,     r,  t,  0,\n\n\t\t// (±φ, 0, ±1/φ)\n\t\t-t,  0, -r,     t,  0, -r,\n\t\t-t,  0,  r,     t,  0,  r\n\t];\n\n\tvar indices = [\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n};\n\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/IcosahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\n\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\tvar vertices = [\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\n\t];\n\n\tvar indices = [\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'IcosahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n};\n\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/OctahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.OctahedronGeometry = function ( radius, detail ) {\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n\tvar vertices = [\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0,- 1, 0,    0, 0, 1,    0, 0,- 1\n\t];\n\n\tvar indices = [\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'OctahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n};\n\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/TetrahedronGeometry.js\n\n/**\n * @author timothypratley / https://github.com/timothypratley\n */\n\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\n\n\tvar vertices = [\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\n\t];\n\n\tvar indices = [\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\n\t];\n\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\n\n\tthis.type = 'TetrahedronGeometry';\n\n\tthis.parameters = {\n\t\tradius: radius,\n\t\tdetail: detail\n\t};\n\n};\n\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/geometries/ParametricGeometry.js\n\n/**\n * @author zz85 / https://github.com/zz85\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n *\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n *\n */\n\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\n\n\tTHREE.Geometry.call( this );\n\n\tthis.type = 'ParametricGeometry';\n\n\tthis.parameters = {\n\t\tfunc: func,\n\t\tslices: slices,\n\t\tstacks: stacks\n\t};\n\n\tvar verts = this.vertices;\n\tvar faces = this.faces;\n\tvar uvs = this.faceVertexUvs[ 0 ];\n\n\tvar i, il, j, p;\n\tvar u, v;\n\n\tvar stackCount = stacks + 1;\n\tvar sliceCount = slices + 1;\n\n\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\tv = i / stacks;\n\n\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\tu = j / slices;\n\n\t\t\tp = func( u, v );\n\t\t\tverts.push( p );\n\n\t\t}\n\t}\n\n\tvar a, b, c, d;\n\tvar uva, uvb, uvc, uvd;\n\n\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\ta = i * sliceCount + j;\n\t\t\tb = i * sliceCount + j + 1;\n\t\t\tc = (i + 1) * sliceCount + j + 1;\n\t\t\td = (i + 1) * sliceCount + j;\n\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\n\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\n\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\n\n\t\t}\n\n\t}\n\n\t// console.log(this);\n\n\t// magic bullet\n\t// var diff = this.mergeVertices();\n\t// console.log('removed ', diff, ' vertices by merging');\n\n\tthis.computeFaceNormals();\n\tthis.computeVertexNormals();\n\n};\n\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\n\n// File:src/extras/helpers/AxisHelper.js\n\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.AxisHelper = function ( size ) {\n\n\tsize = size || 1;\n\n\tvar vertices = new Float32Array( [\n\t\t0, 0, 0,  size, 0, 0,\n\t\t0, 0, 0,  0, size, 0,\n\t\t0, 0, 0,  0, 0, size\n\t] );\n\n\tvar colors = new Float32Array( [\n\t\t1, 0, 0,  1, 0.6, 0,\n\t\t0, 1, 0,  0.6, 1, 0,\n\t\t0, 0, 1,  0, 0.6, 1\n\t] );\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n};\n\nTHREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );\n\n// File:src/extras/helpers/ArrowHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://exocortex.com\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\n\nTHREE.ArrowHelper = ( function () {\n\n\tvar lineGeometry = new THREE.Geometry();\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\n\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\tconeGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );\n\n\treturn function ( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n}() );\n\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\n\n\tvar axis = new THREE.Vector3();\n\tvar radians;\n\n\treturn function ( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tradians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t}\n\n\t};\n\n}() );\n\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\tif ( headLength === undefined ) headLength = 0.2 * length;\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\tthis.line.scale.set( 1, length, 1 );\n\tthis.line.updateMatrix();\n\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\tthis.cone.position.y = length;\n\tthis.cone.updateMatrix();\n\n};\n\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\n\n\tthis.line.material.color.set( color );\n\tthis.cone.material.color.set( color );\n\n};\n\n// File:src/extras/helpers/BoxHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.BoxHelper = function ( object ) {\n\n\tvar geometry = new THREE.BufferGeometry();\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( 72 ), 3 ) );\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );\n\n\tif ( object !== undefined ) {\n\n\t\tthis.update( object );\n\n\t}\n\n};\n\nTHREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.BoxHelper.prototype.update = function ( object ) {\n\n\tvar geometry = object.geometry;\n\n\tif ( geometry.boundingBox === null ) {\n\n\t\tgeometry.computeBoundingBox();\n\n\t}\n\n\tvar min = geometry.boundingBox.min;\n\tvar max = geometry.boundingBox.max;\n\n\t/*\n\t  5____4\n\t1/___0/|\n\t| 6__|_7\n\t2/___3/\n\n\t0: max.x, max.y, max.z\n\t1: min.x, max.y, max.z\n\t2: min.x, min.y, max.z\n\t3: max.x, min.y, max.z\n\t4: max.x, max.y, min.z\n\t5: min.x, max.y, min.z\n\t6: min.x, min.y, min.z\n\t7: max.x, min.y, min.z\n\t*/\n\n\tvar vertices = this.geometry.attributes.position.array;\n\n\tvertices[  0 ] = max.x; vertices[  1 ] = max.y; vertices[  2 ] = max.z;\n\tvertices[  3 ] = min.x; vertices[  4 ] = max.y; vertices[  5 ] = max.z;\n\n\tvertices[  6 ] = min.x; vertices[  7 ] = max.y; vertices[  8 ] = max.z;\n\tvertices[  9 ] = min.x; vertices[ 10 ] = min.y; vertices[ 11 ] = max.z;\n\n\tvertices[ 12 ] = min.x; vertices[ 13 ] = min.y; vertices[ 14 ] = max.z;\n\tvertices[ 15 ] = max.x; vertices[ 16 ] = min.y; vertices[ 17 ] = max.z;\n\n\tvertices[ 18 ] = max.x; vertices[ 19 ] = min.y; vertices[ 20 ] = max.z;\n\tvertices[ 21 ] = max.x; vertices[ 22 ] = max.y; vertices[ 23 ] = max.z;\n\n\t//\n\n\tvertices[ 24 ] = max.x; vertices[ 25 ] = max.y; vertices[ 26 ] = min.z;\n\tvertices[ 27 ] = min.x; vertices[ 28 ] = max.y; vertices[ 29 ] = min.z;\n\n\tvertices[ 30 ] = min.x; vertices[ 31 ] = max.y; vertices[ 32 ] = min.z;\n\tvertices[ 33 ] = min.x; vertices[ 34 ] = min.y; vertices[ 35 ] = min.z;\n\n\tvertices[ 36 ] = min.x; vertices[ 37 ] = min.y; vertices[ 38 ] = min.z;\n\tvertices[ 39 ] = max.x; vertices[ 40 ] = min.y; vertices[ 41 ] = min.z;\n\n\tvertices[ 42 ] = max.x; vertices[ 43 ] = min.y; vertices[ 44 ] = min.z;\n\tvertices[ 45 ] = max.x; vertices[ 46 ] = max.y; vertices[ 47 ] = min.z;\n\n\t//\n\n\tvertices[ 48 ] = max.x; vertices[ 49 ] = max.y; vertices[ 50 ] = max.z;\n\tvertices[ 51 ] = max.x; vertices[ 52 ] = max.y; vertices[ 53 ] = min.z;\n\n\tvertices[ 54 ] = min.x; vertices[ 55 ] = max.y; vertices[ 56 ] = max.z;\n\tvertices[ 57 ] = min.x; vertices[ 58 ] = max.y; vertices[ 59 ] = min.z;\n\n\tvertices[ 60 ] = min.x; vertices[ 61 ] = min.y; vertices[ 62 ] = max.z;\n\tvertices[ 63 ] = min.x; vertices[ 64 ] = min.y; vertices[ 65 ] = min.z;\n\n\tvertices[ 66 ] = max.x; vertices[ 67 ] = min.y; vertices[ 68 ] = max.z;\n\tvertices[ 69 ] = max.x; vertices[ 70 ] = min.y; vertices[ 71 ] = min.z;\n\n\tthis.geometry.attributes.position.needsUpdate = true;\n\n\tthis.geometry.computeBoundingSphere();\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\n// File:src/extras/helpers/BoundingBoxHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\n// a helper to show the world-axis-aligned bounding box for an object\n\nTHREE.BoundingBoxHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\n\n\tthis.object = object;\n\n\tthis.box = new THREE.Box3();\n\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\n\n};\n\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.BoundingBoxHelper.prototype.update = function () {\n\n\tthis.box.setFromObject( this.object );\n\n\tthis.box.size( this.scale );\n\n\tthis.box.center( this.position );\n\n};\n\n// File:src/extras/helpers/CameraHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nTHREE.CameraHelper = function ( camera ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\n\n\tvar pointMap = {};\n\n\t// colors\n\n\tvar hexFrustum = 0xffaa00;\n\tvar hexCone = 0xff0000;\n\tvar hexUp = 0x00aaff;\n\tvar hexTarget = 0xffffff;\n\tvar hexCross = 0x333333;\n\n\t// near\n\n\taddLine( \"n1\", \"n2\", hexFrustum );\n\taddLine( \"n2\", \"n4\", hexFrustum );\n\taddLine( \"n4\", \"n3\", hexFrustum );\n\taddLine( \"n3\", \"n1\", hexFrustum );\n\n\t// far\n\n\taddLine( \"f1\", \"f2\", hexFrustum );\n\taddLine( \"f2\", \"f4\", hexFrustum );\n\taddLine( \"f4\", \"f3\", hexFrustum );\n\taddLine( \"f3\", \"f1\", hexFrustum );\n\n\t// sides\n\n\taddLine( \"n1\", \"f1\", hexFrustum );\n\taddLine( \"n2\", \"f2\", hexFrustum );\n\taddLine( \"n3\", \"f3\", hexFrustum );\n\taddLine( \"n4\", \"f4\", hexFrustum );\n\n\t// cone\n\n\taddLine( \"p\", \"n1\", hexCone );\n\taddLine( \"p\", \"n2\", hexCone );\n\taddLine( \"p\", \"n3\", hexCone );\n\taddLine( \"p\", \"n4\", hexCone );\n\n\t// up\n\n\taddLine( \"u1\", \"u2\", hexUp );\n\taddLine( \"u2\", \"u3\", hexUp );\n\taddLine( \"u3\", \"u1\", hexUp );\n\n\t// target\n\n\taddLine( \"c\", \"t\", hexTarget );\n\taddLine( \"p\", \"c\", hexCross );\n\n\t// cross\n\n\taddLine( \"cn1\", \"cn2\", hexCross );\n\taddLine( \"cn3\", \"cn4\", hexCross );\n\n\taddLine( \"cf1\", \"cf2\", hexCross );\n\taddLine( \"cf3\", \"cf4\", hexCross );\n\n\tfunction addLine( a, b, hex ) {\n\n\t\taddPoint( a, hex );\n\t\taddPoint( b, hex );\n\n\t}\n\n\tfunction addPoint( id, hex ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\n\n\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\tpointMap[ id ] = [];\n\n\t\t}\n\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\n\n\t}\n\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n\tthis.camera = camera;\n\tthis.matrix = camera.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.pointMap = pointMap;\n\n\tthis.update();\n\n};\n\nTHREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.CameraHelper.prototype.update = function () {\n\n\tvar geometry, pointMap;\n\t\n\tvar vector = new THREE.Vector3();\n\tvar camera = new THREE.Camera();\n\n\tvar setPoint = function ( point, x, y, z ) {\n\n\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\tvar points = pointMap[ point ];\n\n\t\tif ( points !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\treturn function () {\n\n\t\tgeometry = this.geometry;\n\t\tpointMap = this.pointMap;\n\n\t\tvar w = 1, h = 1;\n\n\t\t// we need just camera projection matrix\n\t\t// world matrix must be identity\n\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t// center / target\n\n\t\tsetPoint( \"c\", 0, 0, - 1 );\n\t\tsetPoint( \"t\", 0, 0,  1 );\n\n\t\t// near\n\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( \"f1\", - w, - h, 1 );\n\t\tsetPoint( \"f2\",   w, - h, 1 );\n\t\tsetPoint( \"f3\", - w,   h, 1 );\n\t\tsetPoint( \"f4\",   w,   h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\n\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t};\n\n}();\n\n// File:src/extras/helpers/DirectionalLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.DirectionalLightHelper = function ( light, size ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tsize = size || 1;\n\n\tvar geometry = new THREE.Geometry();\n\tgeometry.vertices.push(\n\t\tnew THREE.Vector3( - size,   size, 0 ),\n\t\tnew THREE.Vector3(   size,   size, 0 ),\n\t\tnew THREE.Vector3(   size, - size, 0 ),\n\t\tnew THREE.Vector3( - size, - size, 0 ),\n\t\tnew THREE.Vector3( - size,   size, 0 )\n\t);\n\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tthis.lightPlane = new THREE.Line( geometry, material );\n\tthis.add( this.lightPlane );\n\n\tgeometry = new THREE.Geometry();\n\tgeometry.vertices.push(\n\t\tnew THREE.Vector3(),\n\t\tnew THREE.Vector3()\n\t);\n\n\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tthis.targetLine = new THREE.Line( geometry, material );\n\tthis.add( this.targetLine );\n\n\tthis.update();\n\n};\n\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\n\n\tthis.lightPlane.geometry.dispose();\n\tthis.lightPlane.material.dispose();\n\tthis.targetLine.geometry.dispose();\n\tthis.targetLine.material.dispose();\n};\n\nTHREE.DirectionalLightHelper.prototype.update = function () {\n\n\tvar v1 = new THREE.Vector3();\n\tvar v2 = new THREE.Vector3();\n\tvar v3 = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\tv3.subVectors( v2, v1 );\n\n\t\tthis.lightPlane.lookAt( v3 );\n\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\n\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/EdgesHelper.js\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\n\nTHREE.EdgesHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tvar edge = [ 0, 0 ], hash = {};\n\tvar sortFunction = function ( a, b ) { return a - b };\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\tvar geometry = new THREE.BufferGeometry();\n\n\tvar geometry2 = object.geometry.clone();\n\n\tgeometry2.mergeVertices();\n\tgeometry2.computeFaceNormals();\n\n\tvar vertices = geometry2.vertices;\n\tvar faces = geometry2.faces;\n\tvar numEdges = 0;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\tedge.sort( sortFunction );\n\n\t\t\tvar key = edge.toString();\n\n\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\n\t\t\t\tnumEdges ++;\n\n\t\t\t} else {\n\n\t\t\t\thash[ key ].face2 = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\tvar index = 0;\n\n\tfor ( var key in hash ) {\n\n\t\tvar h = hash[ key ];\n\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) < 0.9999 ) { // hardwired const OK\n\n\t\t\tvar vertex = vertices[ h.vert1 ];\n\t\t\tcoords[ index ++ ] = vertex.x;\n\t\t\tcoords[ index ++ ] = vertex.y;\n\t\t\tcoords[ index ++ ] = vertex.z;\n\n\t\t\tvertex = vertices[ h.vert2 ];\n\t\t\tcoords[ index ++ ] = vertex.x;\n\t\t\tcoords[ index ++ ] = vertex.y;\n\t\t\tcoords[ index ++ ] = vertex.z;\n\n\t\t}\n\n\t}\n\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.EdgesHelper.prototype = Object.create( THREE.Line.prototype );\n\n// File:src/extras/helpers/FaceNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\tvar geometry = new THREE.Geometry();\n\n\tvar faces = this.object.geometry.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tgeometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );\n\n\t}\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.normalMatrix = new THREE.Matrix3();\n\n\tthis.update();\n\n};\n\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.FaceNormalsHelper.prototype.update = function () {\n\n\tvar vertices = this.geometry.vertices;\n\n\tvar object = this.object;\n\tvar objectVertices = object.geometry.vertices;\n\tvar objectFaces = object.geometry.faces;\n\tvar objectWorldMatrix = object.matrixWorld;\n\n\tobject.updateMatrixWorld( true );\n\n\tthis.normalMatrix.getNormalMatrix( objectWorldMatrix );\n\n\tfor ( var i = 0, i2 = 0, l = objectFaces.length; i < l; i ++, i2 += 2 ) {\n\n\t\tvar face = objectFaces[ i ];\n\n\t\tvertices[ i2 ].copy( objectVertices[ face.a ] )\n\t\t\t.add( objectVertices[ face.b ] )\n\t\t\t.add( objectVertices[ face.c ] )\n\t\t\t.divideScalar( 3 )\n\t\t\t.applyMatrix4( objectWorldMatrix );\n\n\t\tvertices[ i2 + 1 ].copy( face.normal )\n\t\t\t.applyMatrix3( this.normalMatrix )\n\t\t\t.normalize()\n\t\t\t.multiplyScalar( this.size )\n\t\t\t.add( vertices[ i2 ] );\n\n\t}\n\n\tthis.geometry.verticesNeedUpdate = true;\n\n\treturn this;\n\n};\n\n\n// File:src/extras/helpers/GridHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.GridHelper = function ( size, step ) {\n\n\tvar geometry = new THREE.Geometry();\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\n\n\tthis.color1 = new THREE.Color( 0x444444 );\n\tthis.color2 = new THREE.Color( 0x888888 );\n\n\tfor ( var i = - size; i <= size; i += step ) {\n\n\t\tgeometry.vertices.push(\n\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\n\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\n\t\t);\n\n\t\tvar color = i === 0 ? this.color1 : this.color2;\n\n\t\tgeometry.colors.push( color, color, color, color );\n\n\t}\n\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n};\n\nTHREE.GridHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\n\n\tthis.color1.set( colorCenterLine );\n\tthis.color2.set( colorGrid );\n\n\tthis.geometry.colorsNeedUpdate = true;\n\n}\n\n// File:src/extras/helpers/HemisphereLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );\n\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\n\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\n\n\t}\n\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\n\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\n\tthis.add( this.lightSphere );\n\n\tthis.update();\n\n};\n\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\n\tthis.lightSphere.geometry.dispose();\n\tthis.lightSphere.material.dispose();\n};\n\nTHREE.HemisphereLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\n\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\n\n\t}\n\n}();\n\n// File:src/extras/helpers/PointLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.PointLightHelper = function ( light, sphereSize ) {\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.matrix = this.light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\t/*\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tvar d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n};\n\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.PointLightHelper.prototype.dispose = function () {\n\n\tthis.geometry.dispose();\n\tthis.material.dispose();\n};\n\nTHREE.PointLightHelper.prototype.update = function () {\n\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t/*\n\tvar d = this.light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.visible = true;\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\t*/\n\n};\n\n// File:src/extras/helpers/SkeletonHelper.js\n\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n */\n\nTHREE.SkeletonHelper = function ( object ) {\n\n\tthis.bones = this.getBoneList( object );\n\n\tvar geometry = new THREE.Geometry();\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\n\n\t\t}\n\n\t}\n\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\tTHREE.Line.call( this, geometry, material, THREE.LinePieces );\n\n\tthis.root = object;\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\n\nTHREE.SkeletonHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\n\n\tvar boneList = [];\n\n\tif ( object instanceof THREE.Bone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n};\n\nTHREE.SkeletonHelper.prototype.update = function () {\n\n\tvar geometry = this.geometry;\n\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\n\n\tvar boneMatrix = new THREE.Matrix4();\n\n\tvar j = 0;\n\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\n\n\t\tvar bone = this.bones[ i ];\n\n\t\tif ( bone.parent instanceof THREE.Bone ) {\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\n\n\t\t\tj += 2;\n\n\t\t}\n\n\t}\n\n\tgeometry.verticesNeedUpdate = true;\n\n\tgeometry.computeBoundingSphere();\n\n};\n\n// File:src/extras/helpers/SpotLightHelper.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.SpotLightHelper = function ( light ) {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.light = light;\n\tthis.light.updateMatrixWorld();\n\n\tthis.matrix = light.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\n\n\tgeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );\n\tgeometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );\n\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\tthis.cone = new THREE.Mesh( geometry, material );\n\tthis.add( this.cone );\n\n\tthis.update();\n\n};\n\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\n\nTHREE.SpotLightHelper.prototype.dispose = function () {\n\tthis.cone.geometry.dispose();\n\tthis.cone.material.dispose();\n};\n\nTHREE.SpotLightHelper.prototype.update = function () {\n\n\tvar vector = new THREE.Vector3();\n\tvar vector2 = new THREE.Vector3();\n\n\treturn function () {\n\n\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\n\n\t};\n\n}();\n\n// File:src/extras/helpers/VertexNormalsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\tvar geometry = new THREE.Geometry();\n\n\tvar vertices = object.geometry.vertices;\n\n\tvar faces = object.geometry.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );\n\n\t\t}\n\n\t}\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.normalMatrix = new THREE.Matrix3();\n\n\tthis.update();\n\n};\n\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.VertexNormalsHelper.prototype.update = ( function ( object ) {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function( object ) {\n\n\t\tvar keys = [ 'a', 'b', 'c', 'd' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tthis.normalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\tvar vertices = this.geometry.vertices;\n\n\t\tvar verts = this.object.geometry.vertices;\n\n\t\tvar faces = this.object.geometry.faces;\n\n\t\tvar worldMatrix = this.object.matrixWorld;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tvar vertexId = face[ keys[ j ] ];\n\t\t\t\tvar vertex = verts[ vertexId ];\n\n\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\tvertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );\n\n\t\t\t\tv1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );\n\n\t\t\t\tv1.add( vertices[ idx ] );\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tvertices[ idx ].copy( v1 );\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.geometry.verticesNeedUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n}());\n\n// File:src/extras/helpers/VertexTangentsHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nTHREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {\n\n\tthis.object = object;\n\n\tthis.size = ( size !== undefined ) ? size : 1;\n\n\tvar color = ( hex !== undefined ) ? hex : 0x0000ff;\n\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\tvar geometry = new THREE.Geometry();\n\n\tvar vertices = object.geometry.vertices;\n\n\tvar faces = object.geometry.faces;\n\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\tvar face = faces[ i ];\n\n\t\tfor ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {\n\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\n\n\t\t}\n\n\t}\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );\n\n\tthis.matrixAutoUpdate = false;\n\n\tthis.update();\n\n};\n\nTHREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );\n\nTHREE.VertexTangentsHelper.prototype.update = ( function ( object ) {\n\n\tvar v1 = new THREE.Vector3();\n\n\treturn function( object ) {\n\n\t\tvar keys = [ 'a', 'b', 'c', 'd' ];\n\n\t\tthis.object.updateMatrixWorld( true );\n\n\t\tvar vertices = this.geometry.vertices;\n\n\t\tvar verts = this.object.geometry.vertices;\n\n\t\tvar faces = this.object.geometry.faces;\n\n\t\tvar worldMatrix = this.object.matrixWorld;\n\n\t\tvar idx = 0;\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {\n\n\t\t\t\tvar vertexId = face[ keys[ j ] ];\n\t\t\t\tvar vertex = verts[ vertexId ];\n\n\t\t\t\tvar tangent = face.vertexTangents[ j ];\n\n\t\t\t\tvertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );\n\n\t\t\t\tv1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );\n\n\t\t\t\tv1.add( vertices[ idx ] );\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tvertices[ idx ].copy( v1 );\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.geometry.verticesNeedUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n}());\n\n// File:src/extras/helpers/WireframeHelper.js\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.WireframeHelper = function ( object, hex ) {\n\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\n\n\tvar edge = [ 0, 0 ], hash = {};\n\tvar sortFunction = function ( a, b ) { return a - b };\n\n\tvar keys = [ 'a', 'b', 'c' ];\n\tvar geometry = new THREE.BufferGeometry();\n\n\tif ( object.geometry instanceof THREE.Geometry ) {\n\n\t\tvar vertices = object.geometry.vertices;\n\t\tvar faces = object.geometry.faces;\n\t\tvar numEdges = 0;\n\n\t\t// allocate maximal size\n\t\tvar edges = new Uint32Array( 6 * faces.length );\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\tvar key = edge.toString();\n\n\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j] ];\n\n\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t} else if ( object.geometry instanceof THREE.BufferGeometry ) {\n\n\t\tif ( object.geometry.attributes.index !== undefined ) { // Indexed BufferGeometry\n\n\t\t\tvar vertices = object.geometry.attributes.position.array;\n\t\t\tvar indices = object.geometry.attributes.index.array;\n\t\t\tvar drawcalls = object.geometry.drawcalls;\n\t\t\tvar numEdges = 0;\n\n\t\t\tif ( drawcalls.length === 0 ) {\n\n\t\t\t\tdrawcalls = [ { count : indices.length, index : 0, start : 0 } ];\n\n\t\t\t}\n\n\t\t\t// allocate maximal size\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\n\n\t\t\tfor ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {\n\n\t\t\t\tvar start = drawcalls[ o ].start;\n\t\t\t\tvar count = drawcalls[ o ].count;\n\t\t\t\tvar index = drawcalls[ o ].index;\n\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\n\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tedge[ 0 ] = index + indices[ i + j ];\n\t\t\t\t\t\tedge[ 1 ] = index + indices[ i + ( j + 1 ) % 3 ];\n\t\t\t\t\t\tedge.sort( sortFunction );\n\n\t\t\t\t\t\tvar key = edge.toString();\n\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\n\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\n\t\t\t\t\t\t\thash[ key ] = true;\n\t\t\t\t\t\t\tnumEdges ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\n\n\t\t\t\t\tvar index = 6 * i + 3 * j;\n\t\t\t\t\tvar index2 = 3 * edges[ 2 * i + j];\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t} else { // non-indexed BufferGeometry\n\n\t\t\tvar vertices = object.geometry.attributes.position.array;\n\t\t\tvar numEdges = vertices.length / 3;\n\t\t\tvar numTris = numEdges / 3;\n\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\n\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\n\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tvar index = 18 * i + 6 * j;\n\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\n\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\n\n\t\t}\n\n\t}\n\n\tTHREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );\n\n\tthis.matrix = object.matrixWorld;\n\tthis.matrixAutoUpdate = false;\n\n};\n\nTHREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );\n\n// File:src/extras/objects/ImmediateRenderObject.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ImmediateRenderObject = function () {\n\n\tTHREE.Object3D.call( this );\n\n\tthis.render = function ( renderCallback ) {};\n\n};\n\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\n\n// File:src/extras/objects/MorphBlendMesh.js\n\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.MorphBlendMesh = function( geometry, material ) {\n\n\tTHREE.Mesh.call( this, geometry, material );\n\n\tthis.animationsMap = {};\n\tthis.animationsList = [];\n\n\t// prepare default animation\n\t// (all frames played together in 1 second)\n\n\tvar numFrames = this.geometry.morphTargets.length;\n\n\tvar name = \"__default\";\n\n\tvar startFrame = 0;\n\tvar endFrame = numFrames - 1;\n\n\tvar fps = numFrames / 1;\n\n\tthis.createAnimation( name, startFrame, endFrame, fps );\n\tthis.setAnimationWeight( name, 1 );\n\n};\n\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\n\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\n\n\tvar animation = {\n\n\t\tstartFrame: start,\n\t\tendFrame: end,\n\n\t\tlength: end - start + 1,\n\n\t\tfps: fps,\n\t\tduration: ( end - start ) / fps,\n\n\t\tlastFrame: 0,\n\t\tcurrentFrame: 0,\n\n\t\tactive: false,\n\n\t\ttime: 0,\n\t\tdirection: 1,\n\t\tweight: 1,\n\n\t\tdirectionBackwards: false,\n\t\tmirroredLoop: false\n\n\t};\n\n\tthis.animationsMap[ name ] = animation;\n\tthis.animationsList.push( animation );\n\n};\n\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\n\n\tvar pattern = /([a-z]+)_?(\\d+)/;\n\n\tvar firstAnimation, frameRanges = {};\n\n\tvar geometry = this.geometry;\n\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\n\n\t\tvar morph = geometry.morphTargets[ i ];\n\t\tvar chunks = morph.name.match( pattern );\n\n\t\tif ( chunks && chunks.length > 1 ) {\n\n\t\t\tvar name = chunks[ 1 ];\n\t\t\tvar num = chunks[ 2 ];\n\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\n\n\t\t\tvar range = frameRanges[ name ];\n\n\t\t\tif ( i < range.start ) range.start = i;\n\t\t\tif ( i > range.end ) range.end = i;\n\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\n\n\t\t}\n\n\t}\n\n\tfor ( var name in frameRanges ) {\n\n\t\tvar range = frameRanges[ name ];\n\t\tthis.createAnimation( name, range.start, range.end, fps );\n\n\t}\n\n\tthis.firstAnimation = firstAnimation;\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = 1;\n\t\tanimation.directionBackwards = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.direction = - 1;\n\t\tanimation.directionBackwards = true;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.fps = fps;\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.duration = duration;\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.weight = weight;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = time;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\n\n\tvar time = 0;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\ttime = animation.time;\n\n\t}\n\n\treturn time;\n\n};\n\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\n\n\tvar duration = - 1;\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tduration = animation.duration;\n\n\t}\n\n\treturn duration;\n\n};\n\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.time = 0;\n\t\tanimation.active = true;\n\n\t} else {\n\n\t\tconsole.warn( \"animation[\" + name + \"] undefined\" );\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\n\n\tvar animation = this.animationsMap[ name ];\n\n\tif ( animation ) {\n\n\t\tanimation.active = false;\n\n\t}\n\n};\n\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\n\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\n\n\t\tvar animation = this.animationsList[ i ];\n\n\t\tif ( ! animation.active ) continue;\n\n\t\tvar frameTime = animation.duration / animation.length;\n\n\t\tanimation.time += animation.direction * delta;\n\n\t\tif ( animation.mirroredLoop ) {\n\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\n\n\t\t\t\tanimation.direction *= - 1;\n\n\t\t\t\tif ( animation.time > animation.duration ) {\n\n\t\t\t\t\tanimation.time = animation.duration;\n\t\t\t\t\tanimation.directionBackwards = true;\n\n\t\t\t\t}\n\n\t\t\t\tif ( animation.time < 0 ) {\n\n\t\t\t\t\tanimation.time = 0;\n\t\t\t\t\tanimation.directionBackwards = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tanimation.time = animation.time % animation.duration;\n\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\n\n\t\t}\n\n\t\tvar keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\n\t\tvar weight = animation.weight;\n\n\t\tif ( keyframe !== animation.currentFrame ) {\n\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\n\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\n\n\t\t\tanimation.lastFrame = animation.currentFrame;\n\t\t\tanimation.currentFrame = keyframe;\n\n\t\t}\n\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\n\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\n\n\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\n\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\n\n\t}\n\n};\n\n\n// Export the THREE object for **Node.js**, with\n// backwards-compatibility for the old `require()` API. If we're in\n// the browser, add `_` as a global object via a string identifier,\n// for Closure Compiler \"advanced\" mode.\nif (typeof exports !== 'undefined') {\n  if (typeof module !== 'undefined' && module.exports) {\n    exports = module.exports = THREE;\n  }\n  exports.THREE = THREE;\n} else {\n  this['THREE'] = THREE;\n}\n","var THREE = require('three');\nrequire('./MirrorLoader.js')(THREE);\nrequire('./WaterLoader.js')(THREE);\n\n\nvar Ball = require('./Ball.js');\n\nvar App = function(){\n   this.container = document.body;\n   \n   this.scene = new THREE.Scene();\n\n   this.height = window.innerHeight;\n   this.width = window.innerWidth;\n\n   this.camera = new THREE.PerspectiveCamera( 55, this.width / this.height, 0.5, 3000000 );\n   this.camera.up = new THREE.Vector3(0,0,1);\n   this.camera.position.set( 0, 50, 0 );\n   this.camera.lookAt(new THREE.Vector3(0,0,0));\n\n   this.renderer = new THREE.WebGLRenderer({ antialias: true });\n   this.renderer.setSize( this.width, this.height);\n   this.container.appendChild( this.renderer.domElement );\n\n   this.pointLight = new THREE.PointLight( 0xffffff, 1, 100 );\n   this.pointLight.position.set( 50, 50, 50 );\n\n   this.ambientLight = new THREE.AmbientLight( 0x202020 );\n   this.scene.add( this.ambientLight );\n\n   this.directionalLight = new THREE.DirectionalLight( 0xffffff, 1);\n   this.directionalLight.position.set( 0, 5, 0 );\n   this.directionalLight.position.normalize();\n   this.scene.add( this.directionalLight );\n\n   this.loader = new THREE.ImageLoader();\n\n   this.makeWater();\n   this.makeEnvironment();\n   \n   this.addBalls();\n};\n\nApp.prototype.makeWater = function(){\n\n   var waterNormals = new THREE.ImageUtils.loadTexture( '/textures/2.jpg' );\n       waterNormals.wrapS = waterNormals.wrapT = THREE.RepeatWrapping; \n\n   this.water = new THREE.Water( this.renderer, this.camera, this.scene, {\n\t\ttextureWidth: 2048 , \n\t\ttextureHeight: 2048,\n\t\twaterNormals: waterNormals,\n\t\talpha: 0.5,\n\t\tsunDirection: this.pointLight.position.normalize(),\n\t\tsunColor: 0xffffff,\n\t\twaterColor: 0xee0000,\n\t\tdistortionScale: 50.0\n\t} );\n\n   this.waterPlane = new THREE.Mesh(\n\tnew THREE.PlaneBufferGeometry( 20000, 20000 ),\n\tthis.water.material\n\t);\n\n   this.mirrorMesh = new THREE.Mesh(\n\t\tnew THREE.PlaneBufferGeometry( 20000, 20000 ),\n\t\tthis.water.material\n\t);\n\n   this.mirrorMesh.add( this.water );\n   this.mirrorMesh.rotation.x = - Math.PI * 0.5;\n   this.scene.add( this.mirrorMesh );\n};\n\nApp.prototype.makeEnvironment = function(){\n\tthis.cubeMap = new THREE.CubeTexture( [] );\n    this.cubeMap.format = THREE.RGBFormat;\n\n\n    this.loader.load( 'textures/justpink.jpg', (function ( image ) {\n      \t\tvar getSide = function ( x, y ) {\n\t   \t\t\tvar size = 1024;\n\t   \t\t\tvar canvas = document.createElement( 'canvas' );\n\t   \t\t\tcanvas.width = size;\n\t   \t\t\tcanvas.height = size;\n\t   \t\t\tvar context = canvas.getContext( '2d' );\n\t   \t\t\tcontext.drawImage( image, - x * size, - y * size );\n\t   \t\t\treturn canvas;\n\t   \t\t};\n\t   \n   \t\tthis.cubeMap.images[ 0 ] = getSide( 2, 1 ); // px\n   \t\tthis.cubeMap.images[ 1 ] = getSide( 0, 1 ); // nx\n   \t\tthis.cubeMap.images[ 2 ] = getSide( 1, 0 ); // py\n   \t\tthis.cubeMap.images[ 3 ] = getSide( 1, 2 ); // ny\n   \t\tthis.cubeMap.images[ 4 ] = getSide( 1, 1 ); // pz\n   \t\tthis.cubeMap.images[ 5 ] = getSide( 3, 1 ); // nz\n   \t\tthis.cubeMap.needsUpdate = true;\n   \t}).bind(this));\n\n    this.cubeShader = THREE.ShaderLib.cube;\n    this.cubeShader.uniforms.tCube.value = this.cubeMap;\n\n\tthis.skyBoxMaterial = new THREE.ShaderMaterial( {\n\t\tfragmentShader: this.cubeShader.fragmentShader,\n\t\tvertexShader: this.cubeShader.vertexShader,\n\t\tuniforms: this.cubeShader.uniforms,\n\t\tdepthWrite: false,\n\t\tside: THREE.BackSide\n\t});\n\n   this.skyBox = new THREE.Mesh(\n\t\tnew THREE.BoxGeometry( 1000000, 1000000, 1000000 ),\n\t\tthis.skyBoxMaterial\n\t);\n\n   this.scene.add( this.skyBox );\n\n};\n\nApp.prototype.addBalls = function(){\n\tthis.balls = [];\n\t\n\tvar counter = 7;\n\t\n\tvar textures = [\n\t\t\t{texturePath: \"/textures/videos/donttellme.mp4\", settings: {scale: 0.035, maxz: 0.50, minz: -1, direction: 1, position: {x: 25 , y: 0 , z: 0 }}}, \n\t\t\t{texturePath: \"/textures/videos/freakudown.mp4\", settings: {scale: 0.025, maxz: 1, minz: 3, direction: 1, position: {x: 0 , y: 25, z: 5 }}}, \n\t\t\t{texturePath: \"/textures/videos/givemeskin.mp4\", settings: {scale: 0.035, maxz: 0.05, minz: -0.50, direction: 0, position: {x: -25 , y: 0 , z: 0 }}},\n\t\t\t{texturePath: \"/textures/videos/groundunderwater.mp4\", settings: {scale: 0.035, maxz: 0.05, minz: -0.50, direction: 0, position: {x: -25 , y: 10 , z: 10 }}}, \n\t\t\t{texturePath: \"/textures/videos/illbemyownreflection.mp4\", settings: {scale: 0.025, maxz: 0.05, minz: -0.50, direction: 0, position: {x: -28, y: 10, z: -10 }}}, \n\t\t\t{texturePath: \"/textures/videos/matchbook.mp4\", settings: {scale: 0.025, maxz: 0.05, minz: -0.50, direction: 0, position: {x: 0 , y: 25 , z: -5 }}}, \n\t\t\t{texturePath: \"/textures/videos/twentyone.mp4\", settings: {scale: 0.025, maxz: 0.5, minz: -0.5, direction: 0, position: {x: 15 , y: 5 , z: 6 }}}\n\t];\n\t\n\ttextures.forEach(function(settings){\n\t\tvar self = this;\n\t\t\n\t\tvar video = document.createElement( 'video' );\n\t\t\tvideo.loop = true;\n\t\t\tvideo.src = settings.texturePath;\n\t\t\tvideo.load(); \n\t\t\tvideo.play();\n\t\t\t\n\t\t\tvideo.addEventListener(\"canplaythrough\", function videoload(e){\n\t\t\t\tvar vid = e.target;\n\t\t\t\t\tcounter--;\n\t\t\t\t\t\n\t\t\t\tvar videocanvas = document.createElement( 'canvas' );\n\t\t\t\tvar videocanvasctx = videocanvas.getContext( '2d' );\n\n\t\t\t\t\t// set its size\n\t\t\t\t\tvideocanvas.width = 320;\n\t\t\t\t\tvideocanvas.height = 380;\n\n\t\t\t\t\t// draw black rectangle so spheres don't start out transparent\n\t\t\t\t\tvideocanvasctx.fillStyle = \"#000000\";\n\t\t\t\t\tvideocanvasctx.fillRect( 0, 0, 380, 380 );\n\n\t\t\t\t\t// add canvas to new texture\n\t\t\t\t\tvar spheretexture = new THREE.Texture(videocanvas, new THREE.SphericalReflectionMapping());\n\n\t\t\t\t\t// add texture to material that will be wrapped around the sphere\n\t\t\t\t\tvar material = new THREE.MeshPhongMaterial( {\n\t\t\t\t\t\tcolor: 0xffffff, //the base color of the object, white here\n\t\t\t\t\t\tambient: 0xffffff, //ambient color of the object, also white\n\t\t\t\t\t\tspecular: 0x050505, //color for specular highlights, a dark grey here\n\t\t\t\t\t\tshininess: 50,\n\t\t\t\t\t\tmap: spheretexture //the texture you created from the video\n\t\t\t\t\t\t} );\n\t\t\t\t\t\n\t\t\t\t\tvar ball = new Ball(THREE, material, vid, videocanvasctx, self.scene, settings.settings);\n\t\t\t\t\tself.balls.push(ball);\n\t\t\t\t\tif(counter === 0) self.init();\n\t\t\t\t\tvid.removeEventListener('canplaythrough', videoload);\n\t\t\t\t});\n\t}, this);\n\n};\n\nApp.prototype.init = function(){\n\twindow.requestAnimationFrame( this.render.bind(this) );\n};\n\nApp.prototype.render = function(){\n\n\tthis.balls.forEach(function(ball){\n\t\tball.move();\n\t\tball.render();\n\t});\n\n\tthis.water.material.uniforms.time.value += 1.0 / 400.0;\n\tthis.water.render();\n\tthis.renderer.render( this.scene, this.camera );\n\n\twindow.requestAnimationFrame(this.render.bind(this));\n};\n\n\n\nmodule.exports = App;"," var Ball = function(THREE, material, video, ctx, scene, settings){\n    \n    this.video = video;\n    this.ctx = ctx;\n\n    this.material = material;\n\n    this.geometry = new THREE.SphereGeometry(100, 32, 32);\n    \n    var faceVertexUvs = this.geometry.faceVertexUvs[ 0 ];\n\n    for ( i = 0; i < faceVertexUvs.length; i ++ ) {\n\n      var uvs = faceVertexUvs[ i ];\n      var face = this.geometry.faces[ i ];\n\n        for ( var j = 0; j < 3; j ++ ) {\n\n          uvs[ j ].x = face.vertexNormals[ j ].x * 0.5 + 0.5;\n          uvs[ j ].y = face.vertexNormals[ j ].y * 0.5 + 0.5;\n\n        }\n      }\n\n\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n \n    this.mesh.position.x = settings.position.x;\n    this.mesh.position.y = settings.position.y;\n    this.mesh.position.z = settings.position.z;\n \n    this.mesh.scale.x = this.mesh.scale.y = this.mesh.scale.z = settings.scale;\n    \n    this.mesh.rotation.x = Math.PI / 2.50;\n    this.mesh.rotation.y = Math.PI / 1;\n\n    this.scale = settings.scale;\n    this.miny = settings.minz;\n    this.maxy = settings.maxz;\n \n    this.currentDirection = settings.direction;\n\n    // this.mesh.receiveShadow = true;\n \n    scene.add(this.mesh);\n};\n\nBall.prototype.render = function(){\n    this.ctx.drawImage( this.video, 0, 0 );\n    this.material.map.needsUpdate = true;\n};\n\nBall.prototype.move = function(){\n  \n  if(this.currentDirection === 1 && this.tooHigh()){ \n    this.currentDirection = -1;\n  } else if(this.currentDirection === -1 && this.tooLow()){\n    this.currentDirection = 1;\n  }\n \n  var moveBy = 0.5 * this.scale * this.currentDirection;\n  this.mesh.position.z += moveBy;\n};\n \nBall.prototype.tooHigh = function(){\n    return (this.mesh.position.z >= this.maxy);\n};\n\nBall.prototype.tooLow = function(){\n    return (this.mesh.position.z <= this.miny);\n};\n\nmodule.exports = Ball;","function MirrorLoader(THREE){\n\t/**\n\t * @author Slayvin / http://slayvin.net\n\t */\n\n\tTHREE.ShaderLib['mirror'] = {\n\n\t\tuniforms: { \"mirrorColor\": { type: \"c\", value: new THREE.Color(0x7F7F7F) },\n\t\t\t\t\t\"mirrorSampler\": { type: \"t\", value: null },\n\t\t\t\t\t\"textureMatrix\" : { type: \"m4\", value: new THREE.Matrix4() }\n\t\t},\n\n\t\tvertexShader: [\n\n\t\t\t\"uniform mat4 textureMatrix;\",\n\n\t\t\t\"varying vec4 mirrorCoord;\",\n\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\",\n\t\t\t\t\"mirrorCoord = textureMatrix * worldPosition;\",\n\n\t\t\t\t\"gl_Position = projectionMatrix * mvPosition;\",\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\"),\n\n\t\tfragmentShader: [\n\n\t\t\t\"uniform vec3 mirrorColor;\",\n\t\t\t\"uniform sampler2D mirrorSampler;\",\n\n\t\t\t\"varying vec4 mirrorCoord;\",\n\n\t\t\t\"float blendOverlay(float base, float blend) {\",\n\t\t\t\t\"return( base < 0.5 ? ( 2.0 * base * blend ) : (1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\",\n\t\t\t\"}\",\n\t\t\t\n\t\t\t\"void main() {\",\n\n\t\t\t\t\"vec4 color = texture2DProj(mirrorSampler, mirrorCoord);\",\n\t\t\t\t\"color = vec4(blendOverlay(mirrorColor.r, color.r), blendOverlay(mirrorColor.g, color.g), blendOverlay(mirrorColor.b, color.b), 1.0);\",\n\n\t\t\t\t\"gl_FragColor = color;\",\n\n\t\t\t\"}\"\n\n\t\t].join(\"\\n\")\n\n\t};\n\n\tTHREE.Mirror = function ( renderer, camera, options ) {\n\n\t\tTHREE.Object3D.call( this );\n\n\t\tthis.name = 'mirror_' + this.id;\n\n\t\toptions = options || {};\n\n\t\tthis.matrixNeedsUpdate = true;\n\n\t\tvar width = options.textureWidth !== undefined ? options.textureWidth : 512;\n\t\tvar height = options.textureHeight !== undefined ? options.textureHeight : 512;\n\n\t\tthis.clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n\n\t\tvar mirrorColor = options.color !== undefined ? new THREE.Color(options.color) : new THREE.Color(0x7F7F7F);\n\n\t\tthis.renderer = renderer;\n\t\tthis.mirrorPlane = new THREE.Plane();\n\t\tthis.normal = new THREE.Vector3( 0, 0, 1 );\n\t\tthis.mirrorWorldPosition = new THREE.Vector3();\n\t\tthis.cameraWorldPosition = new THREE.Vector3();\n\t\tthis.rotationMatrix = new THREE.Matrix4();\n\t\tthis.lookAtPosition = new THREE.Vector3(0, 0, -1);\n\t\tthis.clipPlane = new THREE.Vector4();\n\t\t\n\t\t// For debug only, show the normal and plane of the mirror\n\t\tvar debugMode = options.debugMode !== undefined ? options.debugMode : false;\n\n\t\tif ( debugMode ) {\n\n\t\t\tvar arrow = new THREE.ArrowHelper(new THREE.Vector3( 0, 0, 1 ), new THREE.Vector3( 0, 0, 0 ), 10, 0xffff80 );\n\t\t\tvar planeGeometry = new THREE.Geometry();\n\t\t\tplaneGeometry.vertices.push( new THREE.Vector3( -10, -10, 0 ) );\n\t\t\tplaneGeometry.vertices.push( new THREE.Vector3( 10, -10, 0 ) );\n\t\t\tplaneGeometry.vertices.push( new THREE.Vector3( 10, 10, 0 ) );\n\t\t\tplaneGeometry.vertices.push( new THREE.Vector3( -10, 10, 0 ) );\n\t\t\tplaneGeometry.vertices.push( planeGeometry.vertices[0] );\n\t\t\tvar plane = new THREE.Line( planeGeometry, new THREE.LineBasicMaterial( { color: 0xffff80 } ) );\n\n\t\t\tthis.add(arrow);\n\t\t\tthis.add(plane);\n\n\t\t}\n\n\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\n\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tthis.camera = new THREE.PerspectiveCamera();\n\t\t\tconsole.log( this.name + ': camera is not a Perspective Camera!' );\n\n\t\t}\n\n\t\tthis.textureMatrix = new THREE.Matrix4();\n\n\t\tthis.mirrorCamera = this.camera.clone();\n\n\t\tthis.texture = new THREE.WebGLRenderTarget( width, height );\n\t\tthis.tempTexture = new THREE.WebGLRenderTarget( width, height );\n\n\t\tvar mirrorShader = THREE.ShaderLib[ \"mirror\" ];\n\t\tvar mirrorUniforms = THREE.UniformsUtils.clone( mirrorShader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( {\n\n\t\t\tfragmentShader: mirrorShader.fragmentShader,\n\t\t\tvertexShader: mirrorShader.vertexShader,\n\t\t\tuniforms: mirrorUniforms\n\n\t\t} );\n\n\t\tthis.material.uniforms.mirrorSampler.value = this.texture;\n\t\tthis.material.uniforms.mirrorColor.value = mirrorColor;\n\t\tthis.material.uniforms.textureMatrix.value = this.textureMatrix;\n\n\t\tif ( !THREE.Math.isPowerOfTwo(width) || !THREE.Math.isPowerOfTwo( height ) ) {\n\n\t\t\tthis.texture.generateMipmaps = false;\n\t\t\tthis.tempTexture.generateMipmaps = false;\n\n\t\t}\n\n\t\tthis.updateTextureMatrix();\n\t\tthis.render();\n\n\t};\n\n\tTHREE.Mirror.prototype = Object.create( THREE.Object3D.prototype );\n\n\tTHREE.Mirror.prototype.renderWithMirror = function ( otherMirror ) {\n\n\t\t// update the mirror matrix to mirror the current view\n\t\tthis.updateTextureMatrix();\n\t\tthis.matrixNeedsUpdate = false;\n\n\t\t// set the camera of the other mirror so the mirrored view is the reference view\n\t\tvar tempCamera = otherMirror.camera;\n\t\totherMirror.camera = this.mirrorCamera;\n\n\t\t// render the other mirror in temp texture\n\t\totherMirror.renderTemp();\n\t\totherMirror.material.uniforms.mirrorSampler.value = otherMirror.tempTexture;\n\n\t\t// render the current mirror\n\t\tthis.render();\n\t\tthis.matrixNeedsUpdate = true;\n\n\t\t// restore material and camera of other mirror\n\t\totherMirror.material.uniforms.mirrorSampler.value = otherMirror.texture;\n\t\totherMirror.camera = tempCamera;\n\n\t\t// restore texture matrix of other mirror\n\t\totherMirror.updateTextureMatrix();\n\t};\n\n\tTHREE.Mirror.prototype.updateTextureMatrix = function () {\n\n\t\tvar sign = THREE.Math.sign;\n\n\t\tthis.updateMatrixWorld();\n\t\tthis.camera.updateMatrixWorld();\n\n\t\tthis.mirrorWorldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\tthis.cameraWorldPosition.setFromMatrixPosition( this.camera.matrixWorld );\n\n\t\tthis.rotationMatrix.extractRotation( this.matrixWorld );\n\n\t\tthis.normal.set( 0, 0, 1 );\n\t\tthis.normal.applyMatrix4( this.rotationMatrix );\n\n\t\tvar view = this.mirrorWorldPosition.clone().sub( this.cameraWorldPosition );\n\t\tview.reflect( this.normal ).negate();\n\t\tview.add( this.mirrorWorldPosition );\n\n\t\tthis.rotationMatrix.extractRotation( this.camera.matrixWorld );\n\n\t\tthis.lookAtPosition.set(0, 0, -1);\n\t\tthis.lookAtPosition.applyMatrix4( this.rotationMatrix );\n\t\tthis.lookAtPosition.add( this.cameraWorldPosition );\n\n\t\tvar target = this.mirrorWorldPosition.clone().sub( this.lookAtPosition );\n\t\ttarget.reflect( this.normal ).negate();\n\t\ttarget.add( this.mirrorWorldPosition );\n\n\t\tthis.up.set( 0, -1, 0 );\n\t\tthis.up.applyMatrix4( this.rotationMatrix );\n\t\tthis.up.reflect( this.normal ).negate();\n\n\t\tthis.mirrorCamera.position.copy( view );\n\t\tthis.mirrorCamera.up = this.up;\n\t\tthis.mirrorCamera.lookAt( target );\n\n\t\tthis.mirrorCamera.updateProjectionMatrix();\n\t\tthis.mirrorCamera.updateMatrixWorld();\n\t\tthis.mirrorCamera.matrixWorldInverse.getInverse( this.mirrorCamera.matrixWorld );\n\n\t\t// Update the texture matrix\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.mirrorCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.mirrorCamera.matrixWorldInverse );\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\tthis.mirrorPlane.setFromNormalAndCoplanarPoint( this.normal, this.mirrorWorldPosition );\n\t\tthis.mirrorPlane.applyMatrix4( this.mirrorCamera.matrixWorldInverse );\n\n\t\tthis.clipPlane.set( this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant );\n\n\t\tvar q = new THREE.Vector4();\n\t\tvar projectionMatrix = this.mirrorCamera.projectionMatrix;\n\n\t\tq.x = ( sign(this.clipPlane.x) + projectionMatrix.elements[8] ) / projectionMatrix.elements[0];\n\t\tq.y = ( sign(this.clipPlane.y) + projectionMatrix.elements[9] ) / projectionMatrix.elements[5];\n\t\tq.z = - 1.0;\n\t\tq.w = ( 1.0 + projectionMatrix.elements[10] ) / projectionMatrix.elements[14];\n\n\t\t// Calculate the scaled plane vector\n\t\tvar c = new THREE.Vector4();\n\t\tc = this.clipPlane.multiplyScalar( 2.0 / this.clipPlane.dot(q) );\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[2] = c.x;\n\t\tprojectionMatrix.elements[6] = c.y;\n\t\tprojectionMatrix.elements[10] = c.z + 1.0 - this.clipBias;\n\t\tprojectionMatrix.elements[14] = c.w;\n\n\t};\n\n\tTHREE.Mirror.prototype.render = function () {\n\n\t\tif ( this.matrixNeedsUpdate ) this.updateTextureMatrix();\n\n\t\tthis.matrixNeedsUpdate = true;\n\n\t\t// Render the mirrored view of the current scene into the target texture\n\t\tvar scene = this;\n\n\t\twhile ( scene.parent !== undefined ) {\n\n\t\t\tscene = scene.parent;\n\n\t\t}\n\n\t\tif ( scene !== undefined && scene instanceof THREE.Scene) {\n\t\t\tthis.renderer.render( scene, this.mirrorCamera, this.texture, true );\n\n\t\t}\n\n\t};\n\n\tTHREE.Mirror.prototype.renderTemp = function () {\n\n\t\tif ( this.matrixNeedsUpdate ) this.updateTextureMatrix();\n\n\t\tthis.matrixNeedsUpdate = true;\n\n\t\t// Render the mirrored view of the current scene into the target texture\n\t\tvar scene = this;\n\n\t\twhile ( scene.parent !== undefined ) {\n\n\t\t\tscene = scene.parent;\n\n\t\t}\n\n\t\tif ( scene !== undefined && scene instanceof THREE.Scene) {\n\n\t\t\tthis.renderer.render( scene, this.mirrorCamera, this.tempTexture, true );\n\n\t\t}\n\n\t};\n\n};\n\nmodule.exports = MirrorLoader;","/**\n * \n *@author Mr&Mrs / http://webgl.no/index.html\n * Work based on :\n *@author jbouny / https://github.com/jbouny\n * @author Slayvin / http://slayvin.net : Flat mirror for three.js\n * @author Stemkoski / http://www.adelphi.edu/~stemkoski : An implementation of water shader based on the flat mirror\n * @author Jonas Wagner / http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nfunction WaterLoader(THREE){\n\n\tTHREE.ShaderLib['water'] = {\n\n\t\tuniforms: { \"normalSampler\":\t{ type: \"t\", value: null },\n\t\t\t\t\t\"mirrorSampler\":\t{ type: \"t\", value: null },\n\t\t\t\t\t\"alpha\":\t\t\t{ type: \"f\", value: 1.0 },\n\t\t\t\t\t\"time\":\t\t\t\t{ type: \"f\", value: 0.0 },\n\t\t\t\t\t\"distortionScale\":\t{ type: \"f\", value: 20.0 },\n\t\t\t\t\t\"textureMatrix\" :\t{ type: \"m4\", value: new THREE.Matrix4() },\n\t\t\t\t\t\"sunColor\":\t\t\t{ type: \"c\", value: new THREE.Color( 0xff7F7F ) },\n\t\t\t\t\t\"sunDirection\":\t\t{ type: \"v3\", value: new THREE.Vector3( 0.70707, 0.70707, 0 ) },\n\t\t\t\t\t\"eye\":\t\t\t\t{ type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) },\n\t\t\t\t\t\"waterColor\":\t\t{ type: \"c\", value: new THREE.Color( 0xff5555 ) }\n\t\t},\n\n\t\tvertexShader: [\n\t\t\t'uniform mat4 textureMatrix;',\n\t\t\t'uniform float time;',\n\t\t\t'varying vec2 vUv;',\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec3 worldPosition;',\n\t\t\t'uniform vec3 eye;',\n\t\t\t'varying vec3 height;',\n\t\t\t'void main()',\n\t\t\t'{',\n\t\t\t'\tmirrorCoord = modelMatrix * vec4( position, 1.0 );',\n\t\t\t'\tworldPosition = mirrorCoord.xyz;',\n\t\t\t'\tmirrorCoord = textureMatrix * mirrorCoord;',\n\t\t\t'   vec3 newposition = position;',\n\t\t\t'  vec3 dist = worldPosition-eye;',\n\n\t\t\t '\tfloat divident= 100.0,amplitude= 8.0, timex = -2.1*time, timez = -1.6*time;',\n\t\t\t\t\"    float wave = ( ( sin(( timez)+(worldPosition.z/divident))+ sin((timex)+(worldPosition.x/divident)) )+(sin(( timez)+(worldPosition.z/divident))+ sin((timex)+(worldPosition.x/divident)) ) *amplitude);\",\n\t\t\t ' if(dist.x > 4000.0 || dist.z > 4000.0 )newposition.z = newposition.z*0.8;',\n\t\t\t ' else if(dist.x < -4000.0 || dist.z < -4000.0)newposition.z =newposition.z*0.8;',\t\t\n\t\t\t ' else newposition.z = ((newposition.z )*sin(wave)) +wave;',\n\t\t\n\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newposition, 1.0 );',\n\t\t\t'}'\n\t\t].join('\\n'),\n\n\t\tfragmentShader: [\n\t\t\t'precision highp float;',\n\t\t\t\n\t\t\t'uniform sampler2D mirrorSampler;',\n\t\t\t'uniform float alpha;',\n\t\t\t'uniform float time;',\n\t\t\t'uniform float distortionScale;',\n\t\t\t'uniform sampler2D normalSampler;',\n\t\t\t'uniform vec3 sunColor;',\n\t\t\t'uniform vec3 sunDirection;',\n\t\t\t'uniform vec3 eye;',\n\t\t\t'uniform vec3 waterColor;',\n\n\t\t\t'varying vec4 mirrorCoord;',\n\t\t\t'varying vec3 worldPosition;',\n\t\t\t\n\t\t\t'vec4 getNoise( vec2 uv )',\n\t\t\t'{',\n\n\t\t\t'\tvec2 uv0 = ( uv / 403.0 )+time*0.05- vec2(time /1112.0, time / 113.0);',\n\t\t\t'\tvec2 uv1 = uv / 207.0+vec2( time / 1112.0, time / 8.0 );',\n\t    \t'\tvec2 uv2 = uv / vec2( 4907.0, 4203.0 ) - vec2( time / 161.0, time / 92.0 );',\n\t\t\t'\tvec2 uv3 = uv / vec2( 3091.0, 3427.0 ) - vec2( time / 159.0, time / 80.0 );',\n\t\t\t\n\t\t\t'\tvec4 noise = ( texture2D( normalSampler, uv0 ) ) +',\n\t        '\t\t( texture2D( normalSampler, uv1 ) ) +',\n\t        '\t\t( texture2D( normalSampler, uv2 ) ) +',\n\t\t\t'\t\t( texture2D( normalSampler, uv3 ) );',\n\t\t\t'\treturn noise * 0.5 - 1.0;',\n\t\t\t'}',\n\t\t\t\n\t\t\t'void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor )',\n\t\t\t'{',\n\t\t\t'\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );',\n\t\t\t'\tfloat direction = max( 0.8, dot( eyeDirection, reflection ) );',\n\t\t\t'\tspecularColor += pow( direction, shiny ) * sunColor * spec;',\n\t\t\t'\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;',\n\t\t\t'}',\n\t\t\t\n\t\t\t'void main()',\n\t\t\t'{',\n\t\t\t'\tvec4 noise = getNoise( worldPosition.xz );',\n\t\t\n\t\t'\tvec3  surfaceNormal = normalize( noise.xzy * vec3( 0.55, 0.2, 0.65 ) );',\n\t\t\t'\tvec3 diffuseLight = vec3(0.0);',\n\t\t\t'\tvec3 specularLight = vec3(0.0);',\n\n\t\t\t'\tvec3 worldToEye = eye-worldPosition;',\n\t\t\t'\tvec3 eyeDirection = normalize( worldToEye );',\n\t\t\t'\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );',\n\t\t\t\n\t\t\t'\tfloat distance = length(worldToEye);',\n\n\t\t\n\t\t\t'\tsurfaceNormal = normalize( noise.xzy * vec3( 0.4,0.08, 0.4 ) );',\n\n\t\t\t'\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 0.3 / distance ) * distortionScale;',\n\t\t\t'\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.z + distortion ) );',\n\n\t\t\t'\tsurfaceNormal = normalize( noise.xzy * vec3( 2.5, 0.8, 2.5 ) );',\n\n\t\t\t'\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );',\n\t\t\t'\tfloat rf0 = 0.3;',\n\t\t\t'\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 8.0 );',\n\t\t\t'\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;',\n\t\t\t 'float angle = distance;',\n\t\t\t 'vec3 albedo;',\n\t\t\t'\tif(distance < 200.0)albedo = mix( sunColor*0.7 * diffuseLight *waterColor* 0.95 + scatter*0.005, ( vec3( 0.1 ) + reflectionSample + reflectionSample * specularLight*max(sin(distance+time),0.3) ), reflectance );',\n\t\t\t'\tif(distance >= 200.0)albedo = mix( sunColor*0.8 * diffuseLight*waterColor * 0.9 + scatter*0.01, ( vec3( 0.1 ) + reflectionSample + reflectionSample * specularLight ), reflectance );',\n\t\t\n\t\t\t\t'float limit = 0.13;',\n\t\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.x < 0.5 ) albedo.x = albedo.x+reflectionSample.x*0.12;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.y < 0.5  ) albedo.y = albedo.y+reflectionSample.y*0.12;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.z < 0.5  ) albedo.z = albedo.z+reflectionSample.z*0.12;',\n\n\n\t\t\t\t\t\t'limit = 0.15;',\n\t\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.x < 0.45 ) albedo.x = albedo.x+reflectionSample.x*0.1;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.y < 0.45  ) albedo.y = albedo.y+reflectionSample.y*0.1;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.z < 0.45  ) albedo.z = albedo.z+reflectionSample.z*0.1;',\n\n\t\t\t\t\t\t\t\t'limit = 0.17;',\n\t\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.x < 0.4 ) albedo.x = albedo.x+reflectionSample.x*0.05;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.y < 0.4  ) albedo.y = albedo.y+reflectionSample.y*0.05;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.z < 0.4  ) albedo.z = albedo.z+reflectionSample.z*0.05;',\n\n\n\t\t\t\t\t\t\t\t'limit = 0.19;',\n\t\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.x < 0.35 ) albedo.x = albedo.x+reflectionSample.x*0.02;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.y < 0.35  ) albedo.y = albedo.y+reflectionSample.y*0.02;',\n\t\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit)&& albedo.z < 0.35  ) albedo.z = albedo.z+reflectionSample.z*0.02;',\n\n\n\t\t//\t'float limit = 0.1;',\n\t\t\t\n\t\t\t\n\t\t//'if(albedo.x < limit || albedo.y < limit || albedo.z < limit){ albedo.x += reflectionSample.x-0.05;albedo.y+=reflectionSample.y-0.05;albedo.z+=reflectionSample.z-0.05;} ',\n\t\t\t//' limit = 0.130;',\n\t\t//\t'albedo*=0.9;',\n\t\t//\t'if(albedo.x < limit || albedo.y < limit || albedo.z < limit){ albedo.x += reflectionSample.x-0.05;albedo.y+=reflectionSample.y-0.05;albedo.z+=reflectionSample.z-0.05;} ',\n\t\t\t\t\n\t\t\t//' limit = 0.130;',\n\t\t\t//\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit) && distance >= 1300.0 )discard;',\n\t\t\t\n\t\t\t//\t\t'if((albedo.x < limit || albedo.y < limit || albedo.z < limit) && distance >= 500.0 )discard;',\n\t\t\n\t\t/*'   if(distance >= 500.0)gl_FragColor = vec4( albedo, 0.70 );',\n\t\t\t'\telse if(distance < 500.0)gl_FragColor = vec4( albedo, 0.68 );',\n\t\t\t\t'\telse if(distance < 495.0)gl_FragColor = vec4( albedo, 0.63 );',\n\t\t\t\t\t'\telse if(distance < 485.0)gl_FragColor = vec4( albedo, 0.58 );',\n\t\t\t\t\t\t\t'else\tif(distance < 475.0)gl_FragColor = vec4( albedo, 0.55 );',\n\t\t\t\t\t\t \t\t'else if(distance < 460.0)gl_FragColor = vec4( albedo, 0.50 );',\n\t\t\t\t\t\t\t\t'\telse if(distance < 450.0)gl_FragColor = vec4( albedo, 0.45 );',\n\t\t\t\t\t\t\t\t\t'\telse if(distance < 440.0)gl_FragColor = vec4( albedo, 0.40 );',\n\t\t\t\t\t\t\t\t\t\t'\telse if(distance < 430.0)gl_FragColor = vec4( albedo, 0.35 );',\n\t\t\t\t\t\t\t\t\t\t\t'\telse if(distance < 420.0)gl_FragColor = vec4( albedo, 0.20 );',\n\t\t\t\t\t\t\t\t\t\t\t\t'\telse if(distance < 400.0)gl_FragColor = vec4( albedo, 0.10);',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'\telse if(distance < 350.0)gl_FragColor = vec4( albedo, 0.06);',\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\telse if(distance < 300.0)gl_FragColor = vec4( albedo, 0.001);',*/\n\n\t\t\t\t\t'gl_FragColor = vec4( albedo, 1.0);',\n\t\t\t\n\t\t\t'}'\n\t\t].join('\\n')\n\n\t};\n\n\tTHREE.Water = function ( renderer, camera, scene, options ) {\n\n\t\tTHREE.Object3D.call( this );\n\t\tthis.name = 'water_' + this.id;\n\n\t\tfunction optionalParameter ( value, defaultValue ) {\n\t\t\treturn value !== undefined ? value : defaultValue;\n\t\t};\n\n\t\toptions = options || {};\n\t\t\n\t\tthis.matrixNeedsUpdate = true;\n\t\t\n\t\tvar width = optionalParameter( options.textureWidth, 512*4 );\n\t\tvar height = optionalParameter( options.textureHeight, 512*4 );\n\t\tthis.clipBias = optionalParameter( options.clipBias, 0.0 );\n\t\tthis.alpha = optionalParameter( options.alpha, 1.0 );\n\t\tthis.time = optionalParameter( options.time, 0.0 );\n\t\tthis.normalSampler = optionalParameter( options.waterNormals, null );\n\t\tthis.sunDirection = optionalParameter( options.sunDirection, new THREE.Vector3( 0.50707, 0.70707, -0.3 ) );\n\t\tthis.sunColor = new THREE.Color( optionalParameter( options.sunColor, 0xffffff ) );\n\t\tthis.waterColor = new THREE.Color( optionalParameter( options.waterColor, 0x7F7F7F ) );\n\t\tthis.eye = optionalParameter( options.eye, new THREE.Vector3( 0, 0, 0 ) );\n\t\tthis.distortionScale = optionalParameter( options.distortionScale, 20.0 );\n\t\t\n\t\tthis.renderer = renderer;\n\t\tthis.scene = scene;\n\t\tthis.mirrorPlane = new THREE.Plane();\n\t\tthis.normal = new THREE.Vector3( 0, 0, 1 );\n\t\tthis.mirrorWorldPosition = new THREE.Vector3();\n\t\tthis.cameraWorldPosition = new THREE.Vector3();\n\t\tthis.rotationMatrix = new THREE.Matrix4();\n\t\tthis.lookAtPosition = new THREE.Vector3( 0, 0, -1 );\n\t\tthis.clipPlane = new THREE.Vector4();\n\t\t\n\t\tif ( camera instanceof THREE.PerspectiveCamera )\n\t\t\tthis.camera = camera;\n\t\telse \n\t\t{\n\t\t\tthis.camera = new THREE.PerspectiveCamera();\n\t\t\tconsole.log(this.name + ': camera is not a Perspective Camera!')\n\t\t}\n\n\t\tthis.textureMatrix = new THREE.Matrix4();\n\n\t\tthis.mirrorCamera = this.camera.clone();\n\t\t\n\t\tthis.texture = new THREE.WebGLRenderTarget( width, height );\n\t\tthis.tempTexture = new THREE.WebGLRenderTarget( width, height );\n\t\t\n\t\tvar mirrorShader = THREE.ShaderLib[ \"water\" ];\n\t\tvar mirrorUniforms = THREE.UniformsUtils.clone( mirrorShader.uniforms );\n\n\t\tthis.material = new THREE.ShaderMaterial( { \n\t\t\tfragmentShader: mirrorShader.fragmentShader, \n\t\t\tvertexShader: mirrorShader.vertexShader, \n\t\t\tuniforms: mirrorUniforms,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.material.uniforms.mirrorSampler.value = this.texture;\n\t\tthis.material.uniforms.textureMatrix.value = this.textureMatrix;\n\t\tthis.material.uniforms.alpha.value = this.alpha;\n\t\tthis.material.uniforms.time.value = this.time;\n\t\tthis.material.uniforms.normalSampler.value = this.normalSampler;\n\t\tthis.material.uniforms.sunColor.value = this.sunColor;\n\t\tthis.material.uniforms.waterColor.value = this.waterColor;\n\t\tthis.material.uniforms.sunDirection.value = this.sunDirection;\n\t\tthis.material.uniforms.distortionScale.value = this.distortionScale;\n\t\t\n\t\tthis.material.uniforms.eye.value = this.eye;\n\t\t\n\t\tif ( !THREE.Math.isPowerOfTwo(width) || !THREE.Math.isPowerOfTwo(height) )\n\t\t{\n\t\t\tthis.texture.generateMipmaps = false;\n\t\t\tthis.tempTexture.generateMipmaps = false;\n\t\t}\n\n\t\tthis.updateTextureMatrix();\n\t\tthis.render();\n\t};\n\n\tTHREE.Water.prototype = Object.create( THREE.Mirror.prototype );\n\n\n\tTHREE.Water.prototype.updateTextureMatrix = function () {\n\n\t\tfunction sign(x) { return x ? x < 0 ? -1 : 1 : 0; }\n\n\t\tthis.updateMatrixWorld();\n\t\tthis.camera.updateMatrixWorld();\n\n\t\tthis.mirrorWorldPosition.setFromMatrixPosition( this.matrixWorld );\n\t\tthis.cameraWorldPosition.setFromMatrixPosition( this.camera.matrixWorld );\n\n\t\tthis.rotationMatrix.extractRotation( this.matrixWorld );\n\n\t\tthis.normal.set( 0, 0, 1 );\n\t\tthis.normal.applyMatrix4( this.rotationMatrix );\n\n\t\tvar view = this.mirrorWorldPosition.clone().sub( this.cameraWorldPosition );\n\t\tview.reflect( this.normal ).negate();\n\t\tview.add( this.mirrorWorldPosition );\n\n\t\tthis.rotationMatrix.extractRotation( this.camera.matrixWorld );\n\n\t\tthis.lookAtPosition.set(0, 0, -1);\n\t\tthis.lookAtPosition.applyMatrix4( this.rotationMatrix );\n\t\tthis.lookAtPosition.add( this.cameraWorldPosition );\n\n\t\tvar target = this.mirrorWorldPosition.clone().sub( this.lookAtPosition );\n\t\ttarget.reflect( this.normal ).negate();\n\t\ttarget.add( this.mirrorWorldPosition );\n\n\t\tthis.up.set(0, -1, 0);\n\t\tthis.up.applyMatrix4( this.rotationMatrix );\n\t\tthis.up.reflect( this.normal ).negate();\n\n\t\tthis.mirrorCamera.position.copy( view );\n\t\tthis.mirrorCamera.up = this.up;\n\t\tthis.mirrorCamera.lookAt( target );\n\t\tthis.mirrorCamera.aspect = this.camera.aspect;\n\n\t\tthis.mirrorCamera.updateProjectionMatrix();\n\t\tthis.mirrorCamera.updateMatrixWorld();\n\t\tthis.mirrorCamera.matrixWorldInverse.getInverse(this.mirrorCamera.matrixWorld);\n\n\t\t// Update the texture matrix\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply(this.mirrorCamera.projectionMatrix);\n\t\tthis.textureMatrix.multiply(this.mirrorCamera.matrixWorldInverse);\n\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\tthis.mirrorPlane.setFromNormalAndCoplanarPoint( this.normal, this.mirrorWorldPosition );\n\t\tthis.mirrorPlane.applyMatrix4(this.mirrorCamera.matrixWorldInverse);\n\n\t\tthis.clipPlane.set(this.mirrorPlane.normal.x, this.mirrorPlane.normal.y, this.mirrorPlane.normal.z, this.mirrorPlane.constant );\n\n\t\tvar q = new THREE.Vector4();\n\t\tvar projectionMatrix = this.mirrorCamera.projectionMatrix;\n\n\t\tq.x = (sign(this.clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n\t\tq.y = (sign(this.clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n\t\tq.z = -1.0;\n\t\tq.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n\n\t\t// Calculate the scaled plane vector\n\t\tvar c = new THREE.Vector4();\n\t\tc = this.clipPlane.multiplyScalar( 2.0 / this.clipPlane.dot(q) );\n\n\t\t// Replacing the third row of the projection matrix\n\t\tprojectionMatrix.elements[2] = c.x;\n\t\tprojectionMatrix.elements[6] = c.y;\n\t\tprojectionMatrix.elements[10] = c.z + 1.0 - this.clipBias;\n\t\tprojectionMatrix.elements[14] = c.w;\n\t\t\n\t\tvar worldCoordinates = new THREE.Vector3();\n\t\tworldCoordinates.setFromMatrixPosition( this.camera.matrixWorld );\n\t\tthis.eye = worldCoordinates;\n\t\tthis.material.uniforms.eye.value = this.eye;\n\t};\n};\n\nmodule.exports = WaterLoader;"],"sourceRoot":"/source/"}